/*
 * This is the collection of shared gRPC messages, enumerations, and timestamp utilities specifically designed for the 'cdx.opencdx' application. It provides essential definitions that promote efficient communication protocols across different components of the application.
 */
syntax = "proto3";
option java_multiple_files = true;
package cdx.opencdx.grpc.common;
import "google/protobuf/timestamp.proto";

/*
 * AddressPurpose identifies the intended use of an address.
 */
enum AddressPurpose {
  /*
   * Represents an address used for geographical location.
   */
  LOCATION = 0;

  /*
   * Represents an address used for mail correspondence.
   */
  MAILING = 1;

  /*
   * Represents the main or primary address.
   */
  PRIMARY = 2;

  /*
   * Represents an additional or secondary address.
   */
  SECONDARY = 3;

  /*
   * Represents an address used for invoice or billing correspondence.
   */
  BILLING = 4;

  /*
   * Represents an address used for shipping or delivery.
   */
  SHIPPING = 5;

  /*
   * Represents an address used for work or business location.
   */
  WORK = 6;
}

/*
 * PhoneType defines the classification of phone numbers.
 */
enum PhoneType {
  /*
   * Unclassified or undefined phone number type.
   */
  PHONE_TYPE_NOT_SPECIFIED = 0;

  /*
   * Mobile cell phone.
   */
  PHONE_TYPE_MOBILE = 1;

  /*
   * Residential home phone.
   */
  PHONE_TYPE_HOME = 2;

  /*
   * Work or business phone.
   */
  PHONE_TYPE_WORK = 3;

  /*
   * Fax machine.
   */
  PHONE_TYPE_FAX = 4;

  /*
   * Other or miscellaneous phone type.
   */
  PHONE_TYPE_OTHER = 5;
}

/*
 * EmailType distinguishes the category of email addresses.
 */
enum EmailType {
  /*
   * Unspecified email type.
   */
  EMAIL_TYPE_NOT_SPECIFIED = 0;

  /*
   * Personal and private email type.
   */
  EMAIL_TYPE_PERSONAL = 1;

  /*
   * Work or professional email type.
   */
  EMAIL_TYPE_WORK = 2;

  /*
   * Other or miscellaneous email type.
   */
  EMAIL_TYPE_OTHER = 3;
}

/*
 * Gender defines a range of identities that do not necessarily align
 * with established ideas of male and female.
 */
enum Gender {
  /*
   * Unidentified or undefined gender.
   */
  GENDER_NOT_SPECIFIED = 0;

  /*
   * Male gender.
   */
  GENDER_MALE = 1;

  /*
   * Female gender.
   */
  GENDER_FEMALE = 2;

  /*
   * Non-binary, neither male nor female.
   */
  GENDER_NON_BINARY = 3;

  /*
   * Other, undefined genders
   */
  GENDER_OTHER = 4;
}
/*
 * DurationType defines the units for periods of time.
 */
enum DurationType {
  /*
   * Unspecified unit of time.
   */
  DURATION_TYPE_NOT_SPECIFIED = 0;

  /*
   * Represents time in milliseconds.
   */
  DURATION_TYPE_MILLISECONDS = 1;

  /*
   * Represents time in seconds.
   */
  DURATION_TYPE_SECONDS = 2;

  /*
   * Represents time in minutes.
   */
  DURATION_TYPE_MINUTES = 3;

  /*
   * Represents time in hours.
   */
  DURATION_TYPE_HOURS = 4;

  /*
   * Represents time in days.
   */
  DURATION_TYPE_DAYS = 5;

  /*
   * Represents time in weeks.
   */
  DURATION_TYPE_WEEKS = 6;

  /*
   * Represents time in months.
   */
  DURATION_TYPE_MONTHS = 7;

  /*
   * Represents time in years.
   */
  DURATION_TYPE_YEARS = 8;
}

/*
 * Message for Country includes country-identifier and metadata fields.
 */
message Country {
  /*
   * Unique ID representing a Country.
   */
  optional string id = 1;

  /*
   * Name of the country.
   */
  string name = 2;

  /*
   * Creation timestamp of the country data.
   */
  optional google.protobuf.Timestamp created = 3;

  /*
   * Modification timestamp of the country data.
   */
  optional google.protobuf.Timestamp modified = 4;

  /*
   * Identifier of the creator of this record.
   */
  optional string creator = 5;

  /*
   * Identifier of the last modifier of this record.
   */
  optional string modifier = 6;
}

/*
 * Address, a composition of country, city, state, postal code and purpose of the address.
 */
message Address {
  /*
   * Country Identifier.
   */
  string country_id = 1;

  /*
   * Purpose of the address.
   */
  AddressPurpose address_purpose = 2;

  /*
   * First line of the address.
   */
  string address_1 = 3;

  /*
   * Optional: Second line of the address.
   */
  optional string address_2 = 4;

  /*
   * Optional: Third line of the address.
   */
  optional string address_3 = 5;

  /*
   * Name of the City.
   */
  string city = 6;

  /*
   * Name of the State.
   */
  string state = 7;

  /*
   * Zip or Postal code.
   */
  string postal_code = 8;
}

/*
 * PhoneNumber encapsulates the number along with its type.
 */
message PhoneNumber {
  /*
   * Telephone number.
   */
  string number = 1;

  /*
   * Classification of the phone number.
   */
  PhoneType type = 2;
}

/*
 * FullName includes the names of the user including first, middle, last along with title and suffix.
 */
message FullName {
  /*
   * Title of the user (ex: Mr., Mrs., Dr.).
   */
  string title = 1;

  /*
   * First name of the user.
   */
  string first_name = 2;

  /*
   * Middle name of the user(optional).
   */
  string middle_name = 3;

  /*
   * Last name of the user.
   */
  string last_name = 4;

  /*
   * Suffix for the name (ex: Jr., Sr., III).
   */
  string suffix = 5;
}

/*
 * ContactInfo stores the contact related information of a user.
 */
message ContactInfo {
  /*
   * Full name of the user.
   */
  FullName name = 1;

  /*
   * Identity of the patient.
   */
  optional string patient_id = 2;

  /*
   * Collection of addresses linked with the user.
   */
  repeated Address addresses = 3;

  /*
   * Collection of phone numbers linked with the user.
   */
  repeated PhoneNumber phone_numbers = 4;

  /*
   * Collection of email addresses linked with the user.
   */
  repeated EmailAddress emails = 5;
}

/*
 * EmailAddress, structure for storing email address and its type.
 */
message EmailAddress {
  /*
   * The email address.
   */
  string email = 1;

  /*
   * The type of the email address.
   */
  EmailType type = 2;
}

/*
 * Pagination is used in response message to provide info about pagination.
 */
message Pagination {
  /*
   * The current page number.
   */
  int32 page_number = 1;

  /*
   * The page size or count of items in the current page.
   */
  int32 page_size = 2;

  /*
   * Boolean value to sort in ascending order.
   */
  bool sort_ascending = 3;

  /*
   * Column or field based on which the sorting should be applied.
   */
  optional string sort = 4;

  /*
   * Total number of pages.
   */
  optional int64 total_pages = 5;

  /*
   * The total count of records available across pages.
   */
  optional int64 total_records = 6;
}

/*
 * Duration carries the period of time along with unit of time.
 */
message Duration {
  /*
   * Period of time.
   */
  int64 duration = 1;

  /*
   * Unit of time.
   */
  DurationType type = 2;
}

message PaymentDetails {
  /*
   * Mode of payment used for the test.
   */
  string payment_mode = 1;
  /*
   * ID referring to insurance information used for the test.
   */
  string insurance_info_id = 2;
  /*
   * ID of the payment transaction for the test.
   */
  string payment_transaction_id = 3;
  /*
   * More details about the payment.
   */
  string payment_details = 4;
}

enum ShippingStatus {
  /*
   * The delivery is currently being transported from the source to the destination.
   */
  IN_TRANSIT = 0;

  /*
   * The delivery has been successfully made at the destination.
   */
  DELIVERED = 1;

  /*
   * The planned delivery was called off.
   */
  CANCELED = 2;

  /*
   * The delivery is yet to be picked up from the source.
   */
  PENDING_PICKUP = 3;

  /*
   * The delivery is in its final phase of reaching the destination.
   */
  OUT_FOR_DELIVERY = 4;

  /*
   * The delivery couldn't reach the destination due to some reason.
   */
  FAILED_DELIVERY = 5;

  /*
   * The delivery was made but it was returned back from the destination.
   */
  RETURNED = 6;

  /*
   * The delivery is running behind the scheduled time.
   */
  DELAYED = 7;

  /*
   * The delivery is currently kept on a temporary pause.
   */
  ON_HOLD = 8;

  /*
   * There is some exceptional case or issue associated with the delivery.
   */
  EXCEPTION = 9;

  /*
   * The delivery couldn't be traced or located.
   */
  LOST = 10;

  /**
   * The delivery is in the process of being shipped.
   */
  PENDING = 11;
}
