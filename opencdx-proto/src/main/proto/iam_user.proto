/*
 * This definition streamlines the registration, login, and user management process within the system.
 */
syntax = "proto3";
package cdx.opencdx.grpc.iam;
import "google/protobuf/timestamp.proto";
import "common.proto";
option java_multiple_files = true;

/*
 * IamUserService is a protobuf service that handles user operations for the IAM system.
 */
service IamUserService {
  /*
   * SignUp is an rpc method that registers a new IAM user. It takes a SignUpRequest and returns a SignUpResponse.
   */
  rpc SignUp(SignUpRequest) returns (SignUpResponse);
  /*
   * ListIamUsers is an rpc method that returns a paginated, sortable list of IAM users.
   * It takes a ListIamUsersRequest and returns a ListIamUsersResponse.
   */
  rpc ListIamUsers(ListIamUsersRequest) returns (ListIamUsersResponse);
  /*
   * GetIamUser is an rpc method that returns IAM user information for a specified user ID.
   * It takes a GetIamUserRequest and returns a GetIamUserResponse.
   */
  rpc GetIamUser(GetIamUserRequest) returns (GetIamUserResponse);
  /*
   * UpdateIamUser is an rpc method that updates the information of an existing IAM user.
   * It takes an UpdateIamUserRequest and returns an UpdateIamUserResponse.
   */
  rpc UpdateIamUser(UpdateIamUserRequest) returns (UpdateIamUserResponse);
  /*
   * ChangePassword is an rpc method that changes the password of an existing IAM user.
   * It takes a ChangePasswordRequest and returns a ChangePasswordResponse.
   */
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse);
  /*
   * DeleteIamUser is an rpc method that deletes an IAM user specified by user ID.
   * It takes a DeleteIamUserRequest and returns a DeleteIamUserResponse.
   */
  rpc DeleteIamUser(DeleteIamUserRequest) returns (DeleteIamUserResponse);
  /*
   * UserExists is an rpc method that checks if an IAM user with a given ID exists.
   * It takes a UserExistsRequest and returns a UserExistsResponse.
   */
  rpc UserExists(UserExistsRequest) returns (UserExistsResponse);
  /*
   * Login is an rpc method that authenticates an IAM user. It takes a LoginRequest and returns a LoginResponse.
   */
  rpc Login(LoginRequest) returns (LoginResponse);
  /*
   * CurrentUser is an rpc method that returns the currently authenticated IAM user.
   * It takes a CurrentUserRequest and returns a CurrentUserResponse.
   */
  rpc CurrentUser(CurrentUserRequest) returns (CurrentUserResponse);
}

/*
 * This `.proto` file defines the data structures and messages used in managing identity and access management (IAM) users.
 */

/*
 * Enum defining possible user types in IAM.
 */
enum IamUserType {
  /*
   * Default or unspecified IAM user type.
   */
  IAM_USER_TYPE_UNSPECIFIED = 0;
  /*
   * Regular IAM user type.
   */
  IAM_USER_TYPE_REGULAR = 1;
  /*
   * System IAM user type.
   */
  IAM_USER_TYPE_SYSTEM = 2;
  /*
   * Trial IAM user type.
   */
  IAM_USER_TYPE_TRIAL = 3;
}

/*
 * Enum defining possible statuses of IAM users.
 */
enum IamUserStatus {
  /*
   * Default or unspecified IAM user status.
   */
  IAM_USER_STATUS_UNSPECIFIED = 0;
  /*
   * Active IAM user status.
   */
  IAM_USER_STATUS_ACTIVE = 1;
  /*
   * Inactive IAM user status.
   */
  IAM_USER_STATUS_INACTIVE = 2;
  /*
   * Deleted IAM user status.
   */
  IAM_USER_STATUS_DELETED = 3;
}

/*
 * Defines a request to log in with a username and password.
 */
message LoginRequest {
  /*
   * The username of the user.
   */
  string user_name = 1;
  /*
   * The password of the user.
   */
  string password = 2;
}

/*
 * Defines a response that holds a JWT token for authorizing future requests.
 */
message LoginResponse {
  /*
   * The JWT token.
   */
  string token = 1;
}

/*
 * Represents a request to get the current user. This message doesn't contain any fields.
 */
message CurrentUserRequest {
}

/*
 * Defines a response that returns the current user's data.
 */
message CurrentUserResponse {
  /*
   * Information about the current user.
   */
  IamUser iam_user = 1;
}

/*
 * Defines a request to create a new IAM user.
 */
message SignUpRequest {
  /*
   * The type of the user.
   */
  IamUserType type = 1;
  /*
   * The user's first name.
   */
  string first_name = 2;
  /*
   * The user's last name.
   */
  string last_name = 3;
  /*
   * The system's name.
   */
  string system_name = 4;
  /*
   * The username of the new user.
   */
  string username = 5;
  /*
   * The password for the new user.
   */
  string password = 6;
}

/*
 * Defines a response that contains the data of the created IAM user.
 */
message SignUpResponse {
  /*
   * Information about the new user.
   */
  IamUser iam_user = 1;
}

/*
 * Represents a request to list IAM users with pagination and sorting.
 */
message ListIamUsersRequest {
  /*
   * Details for pagination and sorting.
   */
  cdx.opencdx.grpc.common.Pagination pagination = 1;
}

/*
 * Defines a response that contains a list of IAM users.
 */
message ListIamUsersResponse {
  /*
   * Pagination results.
   */
  cdx.opencdx.grpc.common.Pagination pagination = 1;
  /*
   * List of fetched IAM users.
   */
  repeated IamUser iam_users = 2;
}

/*
 * Defines a request to fetch an IAM user by their user ID.
 */
message GetIamUserRequest {
  /*
   * ID of the user to fetch.
   */
  string id = 1;
}

/*
 * Defines a response that contains the fetched IAM user's data.
 */
message GetIamUserResponse {
  /*
   * Information about the fetched user.
   */
  IamUser iam_user = 1;
}

/*
 * Defines a request to update an IAM user's data.
 */
message UpdateIamUserRequest {
  /*
   * The user's updated data.
   */
  IamUser iam_user = 1;
}

/*
 * Defines a response that contains the data of the updated IAM user.
 */
message UpdateIamUserResponse {
  /*
   * Information about the updated user.
   */
  IamUser iam_user = 1;
}

/*
 * Defines a request to change an IAM user's password.
 */
message ChangePasswordRequest {
  /*
   * The ID of the user to update.
   */
  string id = 1;
  /*
   * The user's current password.
   */
  string old_password = 2;
  /*
   * The user's new password.
   */
  string new_password = 3;
  /*
   * Confirmation of the new password.
   */
  string new_password_confirmation = 4;
}

/*
 * Defines a response that contains the updated IAM user's data.
 */
message ChangePasswordResponse {
  /*
   * Information about the updated user.
   */
  IamUser iam_user = 1;
}

/*
 * Defines a request to delete an IAM user by their ID.
 */
message DeleteIamUserRequest {
  /*
   * ID of the user to delete.
   */
  string id = 1;
}

/*
 * Defines a response that contains the data of the deleted IAM user.
 */
message DeleteIamUserResponse {
  /*
   * Information about the deleted user.
   */
  IamUser iam_user = 1;
}

/*
 * Represents a request to check if an IAM user exists by their ID.
 */
message UserExistsRequest {
  /*
   * The ID of the user to check.
   */
  string id = 1;
}

/*
 * Defines a response that indicates whether the user exists.
 */
message UserExistsResponse {
  /*
   * The user's data if they exist.
   */
  IamUser iam_user = 1;
}

/*
 * Represents an IAM user.
 */
message IamUser {
  /*
   * The unique ID of the user.
   */
  optional string id = 1;
  /*
   * The name of the system for System Users.
   */
  string system_name = 2;
  /*
   * The username of the user.
   */
  string username = 3;
  /*
   * Indicates whether the user's email has been verified.
   */
  bool email_verified = 4;
  /*
   * The current status of the user.
   */
  IamUserStatus status = 5;
  /*
   * The type of the user.
   */
  IamUserType type = 6;
  /*
   * The timestamp when the user was created.
   */
  optional google.protobuf.Timestamp created = 7;
  /*
   * The timestamp when the user was last modified.
   */
  optional google.protobuf.Timestamp modified = 8;
  /*
   * The ID of the user who created this user.
   */
  optional string creator = 9;
  /*
   * The ID of the user who last modified this user.
   */
  optional string modifier = 10;
}
