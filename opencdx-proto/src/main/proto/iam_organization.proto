/*
 * This specification defines the structure for an Organization. It includes all the workspaces associated with that organization, in which users can participate.
 */
syntax = "proto3";
package cdx.opencdx.grpc.organization;
option java_multiple_files = true;
import "common.proto";
import "google/protobuf/timestamp.proto";
/*
 * The `Organization` message defines the data fields and structure for an organization entity.
 */
message Organization {
  /*
   * A unique string identifier for the organization
   */
  optional string id = 1;
  /*
   * Contains the official name of the organization
   */
  optional string name = 2;
  /*
   * Briefly describes the organization
   */
  optional string description = 3;
  /*
   * Represents the date when the organization was founded
   */
  optional google.protobuf.Timestamp founding_date = 4;
  /*
   * Captures the physical address of the organization
   */
  optional cdx.opencdx.grpc.common.Address address = 5;
  /*
   * Contains the official website URL of the organization
   */
  optional string website = 6;
  /*
   * Represents the industry or sector that the organization belongs to
   */
  optional string industry = 7;
  /*
   * Specifies the annual revenue generated by the organization
   */
  optional double revenue = 8;
  /*
   * Contains the URL to the organization's logo
   */
  optional string logo_url = 9;
  /*
   * Maintains the list of all social media profile links of the organization
   */
  repeated string social_media_links = 10;
  /*
   * Contains the mission statement of the organization
   */
  optional string mission_statement = 11;
  /*
   * Contains the vision statement of the organization
   */
  optional string vision_statement = 12;
  /*
   * Stores the contact information for the organization
   */
  repeated cdx.opencdx.grpc.common.ContactInfo contacts = 13;
  /*
   * Record of the timestamp when this instance of the organization was created
   */
  optional google.protobuf.Timestamp created = 14;
  /*
   * Record of the timestamp when this instance of the organization was last modified
   */
  optional google.protobuf.Timestamp modified = 15;
  /*
   * Denotes the ID of the user who created this organization instance
   */
  optional string creator = 16;
  /*
   * Denotes the ID of the user who last modified this organization instance
   */
  optional string modifier = 17;
}
/*
 * The `Workspace` message outlines the properties associated with workspace entity owned by an organization.
 */
message Workspace {
  /*
   * A unique string identifier for the workspace
   */
  optional string id = 1;

  /*
   * Contains the official name of the workspace
   */
  optional string name = 2;

  /*
   * Briefly describes the workspace
   */
  optional string description = 3;

  /*
   * Refers to the ID of the organization that owns this workspace
   */
  string organization_id = 4;

  /*
   * Represents the date when the workspace was created
   */
  optional google.protobuf.Timestamp created_date = 5;

  /*
   * Captures the physical location of the workspace
   */
  optional string location = 6;

  /*
   * Denotes the name of the workspace manager
   */
  optional string manager = 7;

  /*
   * Specifies the maximum capacity of the workspace
   */
  optional int32 capacity = 8;

  /*
   * List of facilities available within the workspace
   */
  repeated string facilities = 9;

  /*
   * Specifies the type of workspace (e.g., office, co-working space)
   */
  optional string workspace_type = 10;

  /*
   * Stores URLs to images of the workspace
   */
  repeated string workspace_image_urls = 11;

  /*
   * Contains the policies and rules for using the workspace
   */
  optional string usage_policy = 12;

  /*
   * Schedule of when the workspace is available for use
   */
  optional string availability_schedule = 13;

  /*
   * List of departments within the workspace
   */
  repeated Department departments = 14;

  /*
   * Record of the timestamp when this workspace instance was created
   */
  optional google.protobuf.Timestamp created = 15;

  /*
   * Record of the timestamp when this workspace instance was modified
   */
  optional google.protobuf.Timestamp modified = 16;

  /*
   * Denotes the ID of the user who created this workspace instance
   */
  optional string creator = 17;

  /*
   * Denotes the ID of the user who last modified this workspace instance
   */
  optional string modifier = 18;
}

/*
 * The `Department` message encapsulates the information about a department within an organization or workspace.
 */
message Department {
  /*
   * A unique string identifier for the department
   */
  optional string id = 1;

  /*
   * Contains the official name of the department
   */
  optional string name = 2;

  /*
   * Briefly describes the department
   */
  optional string description = 3;

  /*
   * List of employees working within the department
   */
  repeated Employee employees = 4;
}

/*
 * The `Employee` message captures identification and contact details for an employee.
 */
message Employee {
  /*
   * A unique string identifier for the employee
   */
  optional string employee_id = 1;

  /*
   * Contains the full name of the employee
   */
  optional cdx.opencdx.grpc.common.FullName name = 2;

  /*
   * Describes the title or position of the employee within the organization
   */
  optional string title = 3;

  /*
   * List of the employee's phone numbers
   */
  repeated cdx.opencdx.grpc.common.PhoneNumber phone_numbers = 4;

  /*
   * Contains the email address of the employee
   */
  repeated cdx.opencdx.grpc.common.EmailAddress email = 5;
}

/*
 * This message serves as a placeholder for methods that do not require any input parameters.
 * It's an empty message often used in RPC methods where no request data is to be sent.
 */
message Empty {}

/*
 * This message contains the details required for creating an organization. It encapsulates the organization to be created.
 */
message CreateOrganizationRequest {
  /*
   * The organization object with the details for the organization that will be created.
   */
  optional Organization organization = 1;
}

/*
 * This message contains the details of the organization that has been created. It encapsulates the organization created.
 */
message CreateOrganizationResponse {
  /*
   * The created organization object with the details of the new organization.
   */
  optional Organization organization = 1;
}

/*
 * This message contains the unique identifier of an organization. It is used to request the details of a specific organization.
 */
message GetOrganizationDetailsByIdRequest {
  /*
   * The unique identifier for the organization whose details are being requested.
   */
  optional string organization_id = 1;
}

/*
 * This message contains the details of the organization retrieved. It encapsulates the organization details.
 */
message GetOrganizationDetailsByIdResponse {
  /*
   * The organization object with the retrieved details of the organization.
   */
  optional Organization organization = 1;
}

/*
 * This message contains the updated details of an organization for a request to update an organization.
 */
message UpdateOrganizationRequest {
  /*
   * The organization object with the updated details for the organization that will be updated.
   */
  optional Organization organization = 1;
}

/*
 * This message contains the updated details of the organization that has been updated.
 */
message UpdateOrganizationResponse {
  /*
   * The updated organization object with the revised details of the organization.
   */
  optional Organization organization = 1;
}

/*
 * This message contains the list of organizations. It is the response message for a request to list all organizations.
 */
message ListOrganizationsResponse {
  /*
   * An array of organization objects which include the details of all organizations.
   */
  repeated Organization organizations = 1;
}

/*
 * This message contains the details required for creating a workspace within an organization.
 */
message CreateWorkspaceRequest {
  /*
   * The workspace object with the details for the workspace that will be created.
   */
  optional Workspace workspace = 1;
}

/*
 * This message contains the details of the workspace that has been created within an organization.
 */
message CreateWorkspaceResponse {
  /*
   * The created workspace object including the details of the new workspace.
   */
  optional Workspace workspace = 1;
}

/*
 * This message contains the unique identifier for a workspace. It is used to request the details of a specific workspace.
 */
message GetWorkspaceDetailsByIdRequest {
  /*
   * The unique identifier for the workspace whose details are being requested.
   */
  optional string workspace_id = 1;
}

/*
 * This message contains the details of the requested workspace.
 */
message GetWorkspaceDetailsByIdResponse {
  /*
   * The workspace object with the retrieved details of the workspace.
   */
  optional Workspace workspace = 1;
}

/*
 * This message contains the updated details of a workspace. It's used for a request to update a workspace.
 */
message UpdateWorkspaceRequest {
  /*
   * The workspace object with the updated details for the workspace that will be updated.
   */
  optional Workspace workspace = 1;
}

/*
 * This message contains the updated details of the workspace that has been updated.
 */
message UpdateWorkspaceResponse {
  /*
   * The updated workspace object with the revised details of the workspace.
   */
  optional Workspace workspace = 1;
}

/*
 * This message contains the list of all workspaces within an organization. It is the response message for a request to list all workspaces.
 */
message ListWorkspacesResponse {
  /*
   * An array of workspace objects which includes the details of all workspaces within an organization.
   */
  repeated Workspace workspaces = 1;
}
/*
 * The OrganizationService is a service that provides operations for
 * managing Organization entities. These operations include creating new
 * organizations, fetching organization details by ID, updating organization
 * details, and listing all organizations.
 */
service OrganizationService {
  /*
   * CreateOrganization is an RPC method that allows you to create a new organization.
   */
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse);

  /*
   * GetOrganizationDetailsById is an RPC method that fetches details of an organization
   * by its specific ID.
   */
  rpc GetOrganizationDetailsById(GetOrganizationDetailsByIdRequest) returns (GetOrganizationDetailsByIdResponse);

  /*
   * UpdateOrganization is an RPC method that lets you update details of an existing organization.
   */
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse);

  /*
   * ListOrganizations is an RPC method that returns a list of all organizations.
   */
  rpc ListOrganizations(Empty) returns (ListOrganizationsResponse);
}

/*
 * The WorkspaceService is a service that provides operations for
 * managing Workspace entities within an Organization. These operations
 * include creating new workspaces, fetching workspace details by ID,
 * updating workspace details, and listing all workspaces.
 */
service WorkspaceService {
  /*
   * CreateWorkspace is an RPC method that enables you to create a new workspace within an organization.
   */
  rpc CreateWorkspace(CreateWorkspaceRequest) returns (CreateWorkspaceResponse);

  /*
   * GetWorkspaceDetailsById is an RPC method that retrieves details of a workspace
   * by its specific ID.
   */
  rpc GetWorkspaceDetailsById(GetWorkspaceDetailsByIdRequest) returns (GetWorkspaceDetailsByIdResponse);

  /*
   * UpdateWorkspace is an RPC method that lets you update details of an existing workspace.
   */
  rpc UpdateWorkspace(UpdateWorkspaceRequest) returns (UpdateWorkspaceResponse);

  /*
   * ListWorkspaces is an RPC method that provides a list of all workspaces within an organization.
   */
  rpc ListWorkspaces(Empty) returns (ListWorkspacesResponse);
}
