syntax = "proto3";
option java_multiple_files = true;
package cdx.opencdx.grpc.lab.connected;
import "common.proto";
import "classification.proto";
import "connected_test.proto";
import "google/protobuf/timestamp.proto";

/**
 * The status of a LabFinding.
 */
enum LabFindingStatus {
  /**
   * The status of the LabFinding is unspecified.
   */
  LAB_FINDINGS_STATUS_UNSPECIFIED = 0;
  /**
   * The LabFinding has been received by the lab.
   */
  LAB_FINDINGS_STATUS_RECEIVED = 1;
}

/**
 * A LabFinding are the results of classification of a connected test submission being returned to the lab.
 */
message LabFindings {

  /**
   * The ID of the LabFinding.
   */
  optional string id = 1;
  /**
   * The basic information of the connected test submission.
   */
  cdx.opencdx.grpc.connected.BasicInfo basicInfo = 2;
  /**
   * The provider information of the connected test submission.
   */
  cdx.opencdx.grpc.connected.ProviderInfo providerInfo = 3;
  /**
   * The metadata of the connected test submission.
   */
  cdx.opencdx.grpc.connected.Metadata metadata = 4;
  /**
   * The classification results of the connected test submission.
   */
  cdx.opencdx.grpc.neural.classification.ClassificationResponse classification = 5;
  /*
 * The timestamp when this event was created.
 */
  optional google.protobuf.Timestamp created = 7;
  /*
   * The timestamp when this event was modified.
   */
  optional google.protobuf.Timestamp modified = 8;
  /*
   * The user ID of the creator of this event.
   */
  optional string creator = 9;
  /*
   * The user ID of the modifier of this event.
   */
  optional string modifier = 10;
}

/**
 * The response of a LabFinding.
 */
message LabFindingsResponse {
  /**
   * The ID of the LabFinding.
   */
  string lab_findings_id = 1;
  /**
   * The status of the LabFinding.
   */
  LabFindingStatus status = 2;
}

/**
 * MetaData for the processor in processing for this specific lab.
 */
message LabMetaDataProcessor {
  /**
   * The identifier of the lab.
   */
  string lab_identifier = 1;
  /**
   * The authorization code for the lab.
   */
  string lab_authorization = 2;
  /**
   * The processing code for the lab.
   */
  string lab_processing_code  = 3;
  /**
   * The data for the lab processor.
   */
  repeated string lab_data = 4;
}

/**
 * The request to create a connected lab.
 */
message ConnectedLab {
  /**
   * The basic information of the connected lab.
   */
  optional string id = 1;
  /**
   * The basic information of the connected lab.
   */
  string name = 2;
  /**
   * Identifier of processing system for submitting to the lab.
   */
  string identifier = 3;
  /*
   * ID of the organization involved in the test.
   */
  string organization_id = 4;
  /*
   * ID denoting the workspace in which the test was administered.
   */
  string workspace_id = 5;

  /**
   * The contact information of the connected lab.
   */
  cdx.opencdx.grpc.common.ContactInfo contact_info = 6;

  /*
   * The physical address/office location of the lab.
   */
  cdx.opencdx.grpc.common.Address lab_address = 7;

  /*
   * The email address used for formal communications with the lab.
   */
  cdx.opencdx.grpc.common.EmailAddress lab_email = 8;

  /*
   * The phone number used to get in touch with the lab.
   */
  cdx.opencdx.grpc.common.PhoneNumber lab_phone = 9;

  /*
   * The official website of the lab.
   */
  string lab_website = 10;

  /*
   * A brief description about the lab.
   */
  string lab_description = 11;

  /*
   * A list of all the certifications that the lab holds.
   * This is repeated as there can be multiple certifications.
   */
  repeated string lab_certifications = 12;

  /**
   * The metadata of the lab processor.
   */
  optional LabMetaDataProcessor lab_processor = 13;

  /*
   * The timestamp capturing when this particular Lab instance was created.
   * This is optional, and might not be present at all.
   */
  optional google.protobuf.Timestamp created = 14;

  /*
   * The timestamp capturing any modifications to the Lab instance.
   * Similar to 'created', this too is optional.
   */
  optional google.protobuf.Timestamp modified = 15;

  /*
   * The ID of the user who initially created this Lab instance.
   * Another optional field.
   */
  optional string creator = 16;

  /*
   * The ID of the user who made the most recent modifications to this Lab instance.
   * This field is also optional.
   */
  optional string modifier = 17;
}

/**
 * The request to create a connected lab.
 */
message CreateConnectedLabRequest {
  /**
   * The connected lab to be created.
   */
  ConnectedLab connected_lab = 1;
}

/**
 * The response of a connected lab creation.
 */
message CreateConnectedLabResponse {
  /**
   * The connected lab to be created.
   */
  ConnectedLab connected_lab = 1;
}

/**
 * The request to get a connected lab.
 */
message GetConnectedLabRequest {
  /**
   * The ID of the connected lab to be retrieved.
   */
  string connected_lab_id = 1;
}

/**
 * The response of a connected lab retrieval.
 */
message GetConnectedLabResponse {
  /**
   * The connected lab to be retrieved.
   */
  ConnectedLab connected_lab = 1;
}

/**
 * The request to update a connected lab.
 */
message UpdateConnectedLabRequest {
  /**
   * The connected lab to be updated.
   */
  ConnectedLab connected_lab = 1;
}

/**
 * The response of a connected lab update.
 */
message UpdateConnectedLabResponse {
  /**
   * The connected lab to be updated.
   */
  ConnectedLab connected_lab = 1;
}

/**
 * The request to delete a connected lab.
 */
message DeleteConnectedLabRequest {
  /**
   * The ID of the connected lab to be deleted.
   */
  string connected_lab_id = 1;
}

/**
 * The response of a connected lab deletion.
 */
message DeleteConnectedLabResponse {
  /**
     * The connected lab to be updated.
     */
  ConnectedLab connected_lab = 1;
}

/**
 * The request to list connected labs.
 */
message ListConnectedLabsRequest {
  /*
   * Pagination information and sorting.
   */
  cdx.opencdx.grpc.common.Pagination pagination = 1;

  /**
   * The ID of the organization to list connected tests.
   */
  string organization_id = 2;

  /**
   * The ID of the workspace to list connected tests.
   */
  string workspace_id = 3;
}

/**
 * The response of a connected lab listing.
 */
message ListConnectedLabsResponse {
  /**
   * The list of connected labs.
   */
  repeated ConnectedLab connected_labs = 1;
  /*
 * Pagination information and sorting.
 */
  cdx.opencdx.grpc.common.Pagination pagination = 2;
}

/**
 * The ConnectedLabService provides methods to manage connected labs.
 */
service ConnectedLabService {
  /**
   * Submit lab findings for a connected test submission.
   */
  rpc SubmitLabFindings(LabFindings) returns (LabFindingsResponse);

  /**
   * Create a connected lab.
   */
  rpc CreateConnectedLab(CreateConnectedLabRequest) returns (CreateConnectedLabResponse);
  /**
   * Get a connected lab.
   */
  rpc GetConnectedLab(GetConnectedLabRequest) returns (GetConnectedLabResponse);
  /**
   * Update a connected lab.
   */
  rpc UpdateConnectedLab(UpdateConnectedLabRequest) returns (UpdateConnectedLabResponse);
  /**
   * Delete a connected lab.
   */
  rpc DeleteConnectedLab(DeleteConnectedLabRequest) returns (DeleteConnectedLabResponse);
  /**
   * List connected labs.
   */
  rpc ListConnectedLabs(ListConnectedLabsRequest) returns (ListConnectedLabsResponse);
}