/*
 * A comprehensive care management system that monitors a user's medications, clinical tests, and other standard health practices.
 */
syntax = "proto3";
package cdx.opencdx.grpc.routine;
option java_multiple_files = true;
import "common.proto";
import "google/protobuf/timestamp.proto";
/*
 * Defines entities for the Routine System.
 * The main categories specified here are routines and their statuses.
 *
 */
message Routine {
  /*
   * Defines the enumeration for various statuses that a routine operation may exist in.
   * E.g., Scheduled, In progress, Completed, etc.
   */
  enum Status {
    /*
     * Indicates that the routine has been planned and is now scheduled
     */
    SCHEDULED = 0;

    /*
     * Indicates that the execution of the routine is currently underway
     */
    IN_PROGRESS = 1;

    /*
     * Indicates that the routine has been successfully completed
     */
    COMPLETED = 2;

    /*
     * Indicates that the routine was planned and scheduled but eventually got canceled
     */
    CANCELED = 3;

    /*
     * Indicates that the execution of the routine is behind the previously defined schedule
     */
    DELAYED = 4;

    /*
     * Indicates that the routine execution has been completed and is now awaiting approval
     */
    PENDING_APPROVAL = 5;

    /*
     * Indicates that the execution of the routine was not successful
     */
    FAILED = 6;

    /*
     * Indicates that the routine is temporarily on hold for now
     */
    ON_HOLD = 7;

    /*
     * Indicates that the routine is planned but its execution has not started yet
     */
    NOT_STARTED = 8;

    /*
     * Indicates that the routine or its results are currently under review
     */
    UNDER_REVIEW = 9;

    /*
     * Commonly used in healthcare settings, indicating that the routine has been marked as completed
     */
    DISCHARGED = 10;

    /*
     * Indicates that the routine has been recalled or needs to be re-run
     */
    RECALLED = 11;
  }

  /*
   * Holds the unique identifier assigned to each routine process
   */
  optional string routine_id = 1;

  /*
   * Stores the name or title assigned to the routine process
   */
  optional string name = 2;

  /*
   * Holds a brief description providing further details about the routine
   */
  optional string description = 3;

  /*
   * Represents the status, indicating the current state of the routine
   */
  Status  status = 4;

  /*
   * Stores the timestamp for when the routine was created
   */
  google.protobuf.Timestamp creation_datetime = 5;

  /*
   * Stores the timestamp for the most recent update made to the routine
   */
  google.protobuf.Timestamp last_updated_datetime = 6;

  /*
   * Holds the information about the user or team responsible for execution of the routine
   */
  optional string assigned_user = 7;

  /*
   * Defines an array to store references to any clinical protocols that are linked with the routine
   */
  repeated string associated_protocols = 8;
}

/*
 * This Protocol Buffers (protobuf) message represents entities related to the execution of a Clinical Protocol.
 * A Clinical Protocol Execution details the process of undergoing a specific protocol in a clinical setup.
 */
message ClinicalProtocolExecution {
  /*
   * The possible statuses for a clinical protocol execution.
   */
  enum Status {
    /*
     * The protocol execution is yet to start.
     */
    NOT_STARTED = 0;
    /*
     * The protocol execution is currently ongoing.
     */
    IN_PROGRESS = 1;
    /*
     * The protocol execution has finished successfully.
     */
    COMPLETED = 2;
    /*
     * The protocol execution was unsuccessful.
     */
    FAILED = 3;
    /*
     * The protocol execution was planned but subsequently cancelled.
     */
    CANCELED = 4;
    /*
     * The protocol execution is overdue and is running late.
     */
    DELAYED = 5;
    /*
     * The protocol execution results are being analysed/reviewed.
     */
    UNDER_REVIEW = 6;
  }
  /*
   * A unique identifier associated with this particular execution of a clinical protocol.
   */
  optional string execution_id = 1;
  /*
   * An ID that points to the routine that this clinical protocol execution is tied to.
   */
  optional string routine_id = 2;
  /*
   * The ID that links to the clinical protocol that is being executed.
   */
  optional string protocol_id = 3;
  /*
   * An enum value that represents the current status of this protocol execution.
   */
  optional Status status = 4;
  /*
   *  The date and time at which the protocol execution commenced.
   */
  google.protobuf.Timestamp start_datetime = 5;
  /*
   * The date and time at which the protocol execution ended.
   */
  google.protobuf.Timestamp end_datetime = 6;
  /*
   * Detailed information about the outcomes or results of the protocol execution.
   */
  optional string results = 7;
  /*
   * Any relevant information about the medical personnel overseeing this clinical protocol execution.
   */
  optional string assigned_medical_staff = 8;
  /*
   * A list of steps or procedures that encompass the clinical protocol.
   */
  repeated string steps = 9;
}

/*
 * This message represents a Laboratory Order entity used in creating conditions.
 * It includes both required and optional fields.
 */
message LabOrder {
  /*
   * This is a unique identifier assigned to each lab orders
   */
  optional string lab_order_id = 1;

  /*
   * This refers to the name of the lab test ordered
   */
  optional string test_name = 2;

  /*
   * This indicates when the lab order was made
   */
  google.protobuf.Timestamp order_datetime = 3;

  /*
   * This refers to the value set that triggered the creation of the eICR
   */
  optional string matched_value_set = 4;

  /*
   * Entities that are related to this lab order (e.g., Patients, Practitioners)
   */
  repeated string related_entities = 5;
}

/*
 * This message represents a Diagnosis entity.
 * It includes both required and optional fields.
 */
message Diagnosis {
  /*
   * This is a unique identifier for diagnosis
   */
  optional string diagnosis_id = 1;

  /*
   * This represents the diagnosis code assigned to the diagnosis
   */
  optional string diagnosis_code = 2;

  /*
   * This indicates when the diagnosis was made
   */
  google.protobuf.Timestamp diagnosis_datetime = 3;

  /*
   * This refers to the value set that triggered the creation of the eICR
   */
  optional string matched_value_set = 4;

  /*
   * Entities that are related to this diagnosis (e.g., Patients, Practitioners)
   */
  repeated string related_entities = 5;
}

/*
 * This message represents a Suspected Diagnosis entity.
 * It includes both required and optional fields.
 */
message SuspectedDiagnosis {
  /*
   * This is a unique identifier for suspected diagnosis
   */
  optional string suspected_diagnosis_id = 1;

  /*
   * This represents the diagnosis code assigned to the suspected diagnosis
   */
  optional string diagnosis_code = 2;

  /*
   * This indicates the time when the suspected diagnosis was made
   */
  google.protobuf.Timestamp diagnosis_datetime = 3;

  /*
   * This refers to the value set that triggered the creation of the eICR
   */
  optional string matched_value_set = 4;

  /*
   * Entities that are related to this suspected diagnosis (e.g., Patients, Practitioners)
   */
  repeated string related_entities = 5;
}

/*
 * This message represents a Laboratory Result entity.
 * It includes both required and optional fields.
 */
message LabResult {
  /*
   * This is a unique identifier for lab result
   */
  optional string result_id = 1;

  /*
   * This represents the value of the lab result
   */
  optional string result_value = 2;

  /*
   * This indicates when the lab result was generated
   */
  google.protobuf.Timestamp result_datetime = 3;

  /*
   * This is the value set that triggered the creation of the eICR
   */
  optional string matched_value_set = 4;

  /*
   * Entities that are related to this lab result (e.g., Patients, Lab Facilities)
   */
  repeated string related_entities = 5;
}

/*
 * Medication data object.
 * This message type represents the medication data
 * with unique and optional elements.
 */
message Medication {
  /*
  * The unique identifier for each medication.
  */
  optional string medication_id = 1;

  /*
  * Contains the name of the indicated medication.
  */
  optional string medication_name = 2;

  /*
  * Captures the specific time the medication was administered.
  */
  google.protobuf.Timestamp administration_datetime = 3;

  /*
  * Represents the value set that initiated the eICR.
  */
  optional string matched_value_set = 4;

  /*
  * Any associated entities such as patients and practitioners.
  */
  repeated string related_entities = 5;
}

/*
 * gRPC services and operations for managing healthcare data.
 */
service RoutineSystemService {
  /*
   * RPC service for creating a new entity in the healthcare routine.
   */
  rpc CreateRoutine(RoutineRequest) returns (RoutineResponse);
  /*
   * RPC service for retrieving information about a specified entity in the healthcare routine.
   */
  rpc GetRoutine(RoutineRequest) returns (RoutineResponse);
  /*
   * RPC service for creating new clinical protocol execution entity.
   */
  rpc CreateClinicalProtocolExecution(ClinicalProtocolExecutionRequest) returns (ClinicalProtocolExecutionResponse);
  /*
   * RPC service for retrieving data about a specific clinical protocol execution entity.
   */
  rpc GetClinicalProtocolExecution(ClinicalProtocolExecutionRequest) returns (ClinicalProtocolExecutionResponse);
  /*
   * RPC service for creating a new lab order entity.
   */
  rpc CreateLabOrder(LabOrderRequest) returns (LabOrderResponse);
  /*
   * RPC service for retrieving information about a specific lab order entity.
   */
  rpc GetLabOrder(LabOrderRequest) returns (LabOrderResponse);
  /*
   * RPC service for creating a new diagnosis entity.
   */
  rpc CreateDiagnosis(DiagnosisRequest) returns (DiagnosisResponse);
  /*
   * RPC service for retrieving information about a specific diagnosis entity.
   */
  rpc GetDiagnosis(DiagnosisRequest) returns (DiagnosisResponse);
  /*
   * RPC service for creating a new suspected diagnosis entity.
   */
  rpc CreateSuspectedDiagnosis(SuspectedDiagnosisRequest) returns (SuspectedDiagnosisResponse);
  /*
   * RPC service for retrieving information about a suspected diagnosis entity.
   */
  rpc GetSuspectedDiagnosis(SuspectedDiagnosisRequest) returns (SuspectedDiagnosisResponse);
  /*
   * RPC service for creating a new lab result entity.
   */
  rpc CreateLabResult(LabResultRequest) returns (LabResultResponse);
  /*
   * RPC service for retrieving data about a specific lab result entity.
   */
  rpc GetLabResult(LabResultRequest) returns (LabResultResponse);
  /*
   * RPC service for creating a new medication entity.
   */
  rpc CreateMedication(MedicationRequest) returns (MedicationResponse);
  /*
   * RPC service for retrieving information about a specific medication entity.
   */
  rpc GetMedication(MedicationRequest) returns (MedicationResponse);
}

/*
 * The RoutineRequest message describing the request format for a Routine operation.
 * The field 'routine' holds the new routine information that needs to be created.
 */
message RoutineRequest {
  /*
   * Data structure for the routine details
   */
  Routine routine = 1;
}

/*
 * The RoutineResponse message represents the response format from the Routine operation.
 * The field 'routine' holds the created routine information.
 */
message RoutineResponse {
  /*
   * Newly created routine data
   */
  Routine routine = 1;
}

/*
 * Message for Requesting a Clinical Protocol Execution.
 */
message ClinicalProtocolExecutionRequest {
  /*
   * Details for the Clinical Protocol Execution.
   */
  ClinicalProtocolExecution clinical_protocol_execution = 1;
}

/*
 * Response message for the Clinical Protocol Execution Operation.
 */
message ClinicalProtocolExecutionResponse {
  /*
   * Resulting data from the Clinical Protocol Execution.
   */
  ClinicalProtocolExecution clinical_protocol_execution = 1;
}

/*
 * Lab Order Request message. Contains all the necessary information to create a Lab Order.
 */
message LabOrderRequest {
  /*
   * Lab order details
   */
  LabOrder lab_order = 1;
}

/*
 * Response message for the Lab Order creation operation.
 */
message LabOrderResponse {
  /*
   * Newly created lab order data
   */
  LabOrder lab_order = 1;
}

/*
 * Diagnosis Request message. Contains all the necessary information to create a Diagnosis record.
 */
message DiagnosisRequest {
  /*
   * Diagnosis details
   */
  Diagnosis diagnosis = 1;
}

/*
 * Response message for the Diagnosis creation operation.
 */
message DiagnosisResponse {
  /*
   * Created diagnosis data
   */
  Diagnosis diagnosis = 1;
}

/*
 * Message for Requesting a new Suspected Diagnosis record.
 */
message SuspectedDiagnosisRequest {
  /*
   * Data structure for suspected diagnosis
   */
  SuspectedDiagnosis suspected_diagnosis = 1;
}

/*
 * Response message after Suspected Diagnosis operation.
 */
message SuspectedDiagnosisResponse {
  /*
   * The suspected diagnosis data that was created
   */
  SuspectedDiagnosis suspected_diagnosis = 1;
}

/*
 * Request message for Lab Result operation which requires all necessary information to create Lab Result data.
 */
message LabResultRequest {
  /*
   * Lab result details
   */
  LabResult lab_result = 1;
}

/*
 * Response message to contain the created Lab Result from the CreateLabResult operation.
 */
message LabResultResponse {
  /*
   * Created lab result data
   */
  LabResult lab_result = 1;
}

/*
 * Medication Request message. Contains all the necessary information to create a new medication record.
 */
message MedicationRequest {
  /*
   * Medication details
   */
  Medication medication = 1;
}

/*
 * Response message for Medication creation operation.
 */
message MedicationResponse {
  /*
   * New medication data
   */
  Medication medication = 1;
}
