/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ClientQuestionnaireData } from '../model';
// @ts-ignore
import type { ClientQuestionnaireDataRequest } from '../model';
// @ts-ignore
import type { GetQuestionnaireListRequest } from '../model';
// @ts-ignore
import type { Questionnaire } from '../model';
// @ts-ignore
import type { QuestionnaireDataRequest } from '../model';
// @ts-ignore
import type { QuestionnaireRequest } from '../model';
// @ts-ignore
import type { Questionnaires } from '../model';
// @ts-ignore
import type { SubmissionResponse } from '../model';
// @ts-ignore
import type { SystemQuestionnaireData } from '../model';
// @ts-ignore
import type { UserQuestionnaireData } from '../model';
// @ts-ignore
import type { UserQuestionnaireDataRequest } from '../model';
// @ts-ignore
import type { UserQuestionnaireDataResponse } from '../model';
/**
 * OpenCdxRestQuestionnaireControllerApi - axios parameter creator
 * @export
 */
export const OpenCdxRestQuestionnaireControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ClientQuestionnaireDataRequest} clientQuestionnaireDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClientQuestionnaireData: async (clientQuestionnaireDataRequest: ClientQuestionnaireDataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientQuestionnaireDataRequest' is not null or undefined
            assertParamExists('createClientQuestionnaireData', 'clientQuestionnaireDataRequest', clientQuestionnaireDataRequest)
            const localVarPath = `/client/questionnaire`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientQuestionnaireDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QuestionnaireRequest} questionnaireRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuestionnaire: async (questionnaireRequest: QuestionnaireRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionnaireRequest' is not null or undefined
            assertParamExists('createQuestionnaire', 'questionnaireRequest', questionnaireRequest)
            const localVarPath = `/questionnaire`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionnaireRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QuestionnaireDataRequest} questionnaireDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuestionnaireData: async (questionnaireDataRequest: QuestionnaireDataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionnaireDataRequest' is not null or undefined
            assertParamExists('createQuestionnaireData', 'questionnaireDataRequest', questionnaireDataRequest)
            const localVarPath = `/system/questionnaire`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionnaireDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserQuestionnaireDataRequest} userQuestionnaireDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserQuestionnaireData: async (userQuestionnaireDataRequest: UserQuestionnaireDataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userQuestionnaireDataRequest' is not null or undefined
            assertParamExists('createUserQuestionnaireData', 'userQuestionnaireDataRequest', userQuestionnaireDataRequest)
            const localVarPath = `/user/questionnaire`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userQuestionnaireDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientQuestionnaire: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteClientQuestionnaire', 'id', id)
            const localVarPath = `/client/questionnaire/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestionnaire: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteQuestionnaire', 'id', id)
            const localVarPath = `/questionnaire/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSystemQuestionnaire: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSystemQuestionnaire', 'id', id)
            const localVarPath = `/system/questionnaire/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientQuestionnaire: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getClientQuestionnaire', 'id', id)
            const localVarPath = `/client/questionnaire/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetQuestionnaireListRequest} getQuestionnaireListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientQuestionnaireDataList: async (getQuestionnaireListRequest: GetQuestionnaireListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getQuestionnaireListRequest' is not null or undefined
            assertParamExists('getClientQuestionnaireDataList', 'getQuestionnaireListRequest', getQuestionnaireListRequest)
            const localVarPath = `/client/questionnaire/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getQuestionnaireListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {boolean} [updateAnswers] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionnaire: async (id: string, updateAnswers?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getQuestionnaire', 'id', id)
            const localVarPath = `/questionnaire/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (updateAnswers !== undefined) {
                localVarQueryParameter['updateAnswers'] = updateAnswers;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetQuestionnaireListRequest} getQuestionnaireListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionnaireDataList: async (getQuestionnaireListRequest: GetQuestionnaireListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getQuestionnaireListRequest' is not null or undefined
            assertParamExists('getQuestionnaireDataList', 'getQuestionnaireListRequest', getQuestionnaireListRequest)
            const localVarPath = `/system/questionnaire/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getQuestionnaireListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetQuestionnaireListRequest} getQuestionnaireListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionnaires: async (getQuestionnaireListRequest: GetQuestionnaireListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getQuestionnaireListRequest' is not null or undefined
            assertParamExists('getQuestionnaires', 'getQuestionnaireListRequest', getQuestionnaireListRequest)
            const localVarPath = `/questionnaire/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getQuestionnaireListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemQuestionnaire: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSystemQuestionnaire', 'id', id)
            const localVarPath = `/system/questionnaire/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserQuestionnaire: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserQuestionnaire', 'id', id)
            const localVarPath = `/user/questionnaire/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetQuestionnaireListRequest} getQuestionnaireListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserQuestionnaireDataList: async (getQuestionnaireListRequest: GetQuestionnaireListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getQuestionnaireListRequest' is not null or undefined
            assertParamExists('getUserQuestionnaireDataList', 'getQuestionnaireListRequest', getQuestionnaireListRequest)
            const localVarPath = `/user/questionnaire/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getQuestionnaireListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshQuestionnaire: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('refreshQuestionnaire', 'id', id)
            const localVarPath = `/questionnaire/refresh/{Id}`
                .replace(`{${"Id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ClientQuestionnaireDataRequest} clientQuestionnaireDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientQuestionnaireData: async (clientQuestionnaireDataRequest: ClientQuestionnaireDataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clientQuestionnaireDataRequest' is not null or undefined
            assertParamExists('updateClientQuestionnaireData', 'clientQuestionnaireDataRequest', clientQuestionnaireDataRequest)
            const localVarPath = `/client/questionnaire`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(clientQuestionnaireDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QuestionnaireRequest} questionnaireRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestionnaire: async (questionnaireRequest: QuestionnaireRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionnaireRequest' is not null or undefined
            assertParamExists('updateQuestionnaire', 'questionnaireRequest', questionnaireRequest)
            const localVarPath = `/questionnaire`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionnaireRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {QuestionnaireDataRequest} questionnaireDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestionnaireData: async (questionnaireDataRequest: QuestionnaireDataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'questionnaireDataRequest' is not null or undefined
            assertParamExists('updateQuestionnaireData', 'questionnaireDataRequest', questionnaireDataRequest)
            const localVarPath = `/system/questionnaire`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(questionnaireDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenCdxRestQuestionnaireControllerApi - functional programming interface
 * @export
 */
export const OpenCdxRestQuestionnaireControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenCdxRestQuestionnaireControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ClientQuestionnaireDataRequest} clientQuestionnaireDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createClientQuestionnaireData(clientQuestionnaireDataRequest: ClientQuestionnaireDataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createClientQuestionnaireData(clientQuestionnaireDataRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.createClientQuestionnaireData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {QuestionnaireRequest} questionnaireRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuestionnaire(questionnaireRequest: QuestionnaireRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Questionnaire>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuestionnaire(questionnaireRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.createQuestionnaire']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {QuestionnaireDataRequest} questionnaireDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createQuestionnaireData(questionnaireDataRequest: QuestionnaireDataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createQuestionnaireData(questionnaireDataRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.createQuestionnaireData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserQuestionnaireDataRequest} userQuestionnaireDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserQuestionnaireData(userQuestionnaireDataRequest: UserQuestionnaireDataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserQuestionnaireData(userQuestionnaireDataRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.createUserQuestionnaireData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteClientQuestionnaire(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteClientQuestionnaire(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.deleteClientQuestionnaire']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuestionnaire(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuestionnaire(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.deleteQuestionnaire']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSystemQuestionnaire(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSystemQuestionnaire(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.deleteSystemQuestionnaire']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientQuestionnaire(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientQuestionnaireData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientQuestionnaire(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.getClientQuestionnaire']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetQuestionnaireListRequest} getQuestionnaireListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getClientQuestionnaireDataList(getQuestionnaireListRequest: GetQuestionnaireListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClientQuestionnaireData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getClientQuestionnaireDataList(getQuestionnaireListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.getClientQuestionnaireDataList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {boolean} [updateAnswers] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuestionnaire(id: string, updateAnswers?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Questionnaire>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestionnaire(id, updateAnswers, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.getQuestionnaire']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetQuestionnaireListRequest} getQuestionnaireListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuestionnaireDataList(getQuestionnaireListRequest: GetQuestionnaireListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemQuestionnaireData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestionnaireDataList(getQuestionnaireListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.getQuestionnaireDataList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetQuestionnaireListRequest} getQuestionnaireListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQuestionnaires(getQuestionnaireListRequest: GetQuestionnaireListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Questionnaires>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQuestionnaires(getQuestionnaireListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.getQuestionnaires']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSystemQuestionnaire(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemQuestionnaireData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSystemQuestionnaire(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.getSystemQuestionnaire']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserQuestionnaire(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserQuestionnaireData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserQuestionnaire(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.getUserQuestionnaire']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetQuestionnaireListRequest} getQuestionnaireListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserQuestionnaireDataList(getQuestionnaireListRequest: GetQuestionnaireListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserQuestionnaireDataResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserQuestionnaireDataList(getQuestionnaireListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.getUserQuestionnaireDataList']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshQuestionnaire(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Questionnaire>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshQuestionnaire(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.refreshQuestionnaire']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ClientQuestionnaireDataRequest} clientQuestionnaireDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateClientQuestionnaireData(clientQuestionnaireDataRequest: ClientQuestionnaireDataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateClientQuestionnaireData(clientQuestionnaireDataRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.updateClientQuestionnaireData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {QuestionnaireRequest} questionnaireRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuestionnaire(questionnaireRequest: QuestionnaireRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Questionnaire>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuestionnaire(questionnaireRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.updateQuestionnaire']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {QuestionnaireDataRequest} questionnaireDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuestionnaireData(questionnaireDataRequest: QuestionnaireDataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuestionnaireData(questionnaireDataRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestQuestionnaireControllerApi.updateQuestionnaireData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpenCdxRestQuestionnaireControllerApi - factory interface
 * @export
 */
export const OpenCdxRestQuestionnaireControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenCdxRestQuestionnaireControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiCreateClientQuestionnaireDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClientQuestionnaireData(requestParameters: OpenCdxRestQuestionnaireControllerApiCreateClientQuestionnaireDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubmissionResponse> {
            return localVarFp.createClientQuestionnaireData(requestParameters.clientQuestionnaireDataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiCreateQuestionnaireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiCreateQuestionnaireRequest, options?: RawAxiosRequestConfig): AxiosPromise<Questionnaire> {
            return localVarFp.createQuestionnaire(requestParameters.questionnaireRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiCreateQuestionnaireDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createQuestionnaireData(requestParameters: OpenCdxRestQuestionnaireControllerApiCreateQuestionnaireDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubmissionResponse> {
            return localVarFp.createQuestionnaireData(requestParameters.questionnaireDataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiCreateUserQuestionnaireDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserQuestionnaireData(requestParameters: OpenCdxRestQuestionnaireControllerApiCreateUserQuestionnaireDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubmissionResponse> {
            return localVarFp.createUserQuestionnaireData(requestParameters.userQuestionnaireDataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiDeleteClientQuestionnaireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteClientQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiDeleteClientQuestionnaireRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubmissionResponse> {
            return localVarFp.deleteClientQuestionnaire(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiDeleteQuestionnaireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiDeleteQuestionnaireRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubmissionResponse> {
            return localVarFp.deleteQuestionnaire(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiDeleteSystemQuestionnaireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSystemQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiDeleteSystemQuestionnaireRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubmissionResponse> {
            return localVarFp.deleteSystemQuestionnaire(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiGetClientQuestionnaireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiGetClientQuestionnaireRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClientQuestionnaireData> {
            return localVarFp.getClientQuestionnaire(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiGetClientQuestionnaireDataListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientQuestionnaireDataList(requestParameters: OpenCdxRestQuestionnaireControllerApiGetClientQuestionnaireDataListRequest, options?: RawAxiosRequestConfig): AxiosPromise<ClientQuestionnaireData> {
            return localVarFp.getClientQuestionnaireDataList(requestParameters.getQuestionnaireListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiGetQuestionnaireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiGetQuestionnaireRequest, options?: RawAxiosRequestConfig): AxiosPromise<Questionnaire> {
            return localVarFp.getQuestionnaire(requestParameters.id, requestParameters.updateAnswers, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiGetQuestionnaireDataListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionnaireDataList(requestParameters: OpenCdxRestQuestionnaireControllerApiGetQuestionnaireDataListRequest, options?: RawAxiosRequestConfig): AxiosPromise<SystemQuestionnaireData> {
            return localVarFp.getQuestionnaireDataList(requestParameters.getQuestionnaireListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiGetQuestionnairesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQuestionnaires(requestParameters: OpenCdxRestQuestionnaireControllerApiGetQuestionnairesRequest, options?: RawAxiosRequestConfig): AxiosPromise<Questionnaires> {
            return localVarFp.getQuestionnaires(requestParameters.getQuestionnaireListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiGetSystemQuestionnaireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSystemQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiGetSystemQuestionnaireRequest, options?: RawAxiosRequestConfig): AxiosPromise<SystemQuestionnaireData> {
            return localVarFp.getSystemQuestionnaire(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiGetUserQuestionnaireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiGetUserQuestionnaireRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserQuestionnaireData> {
            return localVarFp.getUserQuestionnaire(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiGetUserQuestionnaireDataListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserQuestionnaireDataList(requestParameters: OpenCdxRestQuestionnaireControllerApiGetUserQuestionnaireDataListRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserQuestionnaireDataResponse> {
            return localVarFp.getUserQuestionnaireDataList(requestParameters.getQuestionnaireListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiRefreshQuestionnaireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiRefreshQuestionnaireRequest, options?: RawAxiosRequestConfig): AxiosPromise<Questionnaire> {
            return localVarFp.refreshQuestionnaire(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiUpdateClientQuestionnaireDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateClientQuestionnaireData(requestParameters: OpenCdxRestQuestionnaireControllerApiUpdateClientQuestionnaireDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubmissionResponse> {
            return localVarFp.updateClientQuestionnaireData(requestParameters.clientQuestionnaireDataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiUpdateQuestionnaireRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiUpdateQuestionnaireRequest, options?: RawAxiosRequestConfig): AxiosPromise<Questionnaire> {
            return localVarFp.updateQuestionnaire(requestParameters.questionnaireRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestQuestionnaireControllerApiUpdateQuestionnaireDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuestionnaireData(requestParameters: OpenCdxRestQuestionnaireControllerApiUpdateQuestionnaireDataRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubmissionResponse> {
            return localVarFp.updateQuestionnaireData(requestParameters.questionnaireDataRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createClientQuestionnaireData operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiCreateClientQuestionnaireDataRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiCreateClientQuestionnaireDataRequest {
    /**
     * 
     * @type {ClientQuestionnaireDataRequest}
     * @memberof OpenCdxRestQuestionnaireControllerApiCreateClientQuestionnaireData
     */
    readonly clientQuestionnaireDataRequest: ClientQuestionnaireDataRequest
}

/**
 * Request parameters for createQuestionnaire operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiCreateQuestionnaireRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiCreateQuestionnaireRequest {
    /**
     * 
     * @type {QuestionnaireRequest}
     * @memberof OpenCdxRestQuestionnaireControllerApiCreateQuestionnaire
     */
    readonly questionnaireRequest: QuestionnaireRequest
}

/**
 * Request parameters for createQuestionnaireData operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiCreateQuestionnaireDataRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiCreateQuestionnaireDataRequest {
    /**
     * 
     * @type {QuestionnaireDataRequest}
     * @memberof OpenCdxRestQuestionnaireControllerApiCreateQuestionnaireData
     */
    readonly questionnaireDataRequest: QuestionnaireDataRequest
}

/**
 * Request parameters for createUserQuestionnaireData operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiCreateUserQuestionnaireDataRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiCreateUserQuestionnaireDataRequest {
    /**
     * 
     * @type {UserQuestionnaireDataRequest}
     * @memberof OpenCdxRestQuestionnaireControllerApiCreateUserQuestionnaireData
     */
    readonly userQuestionnaireDataRequest: UserQuestionnaireDataRequest
}

/**
 * Request parameters for deleteClientQuestionnaire operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiDeleteClientQuestionnaireRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiDeleteClientQuestionnaireRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestQuestionnaireControllerApiDeleteClientQuestionnaire
     */
    readonly id: string
}

/**
 * Request parameters for deleteQuestionnaire operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiDeleteQuestionnaireRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiDeleteQuestionnaireRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestQuestionnaireControllerApiDeleteQuestionnaire
     */
    readonly id: string
}

/**
 * Request parameters for deleteSystemQuestionnaire operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiDeleteSystemQuestionnaireRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiDeleteSystemQuestionnaireRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestQuestionnaireControllerApiDeleteSystemQuestionnaire
     */
    readonly id: string
}

/**
 * Request parameters for getClientQuestionnaire operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiGetClientQuestionnaireRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiGetClientQuestionnaireRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestQuestionnaireControllerApiGetClientQuestionnaire
     */
    readonly id: string
}

/**
 * Request parameters for getClientQuestionnaireDataList operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiGetClientQuestionnaireDataListRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiGetClientQuestionnaireDataListRequest {
    /**
     * 
     * @type {GetQuestionnaireListRequest}
     * @memberof OpenCdxRestQuestionnaireControllerApiGetClientQuestionnaireDataList
     */
    readonly getQuestionnaireListRequest: GetQuestionnaireListRequest
}

/**
 * Request parameters for getQuestionnaire operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiGetQuestionnaireRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiGetQuestionnaireRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestQuestionnaireControllerApiGetQuestionnaire
     */
    readonly id: string

    /**
     * 
     * @type {boolean}
     * @memberof OpenCdxRestQuestionnaireControllerApiGetQuestionnaire
     */
    readonly updateAnswers?: boolean
}

/**
 * Request parameters for getQuestionnaireDataList operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiGetQuestionnaireDataListRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiGetQuestionnaireDataListRequest {
    /**
     * 
     * @type {GetQuestionnaireListRequest}
     * @memberof OpenCdxRestQuestionnaireControllerApiGetQuestionnaireDataList
     */
    readonly getQuestionnaireListRequest: GetQuestionnaireListRequest
}

/**
 * Request parameters for getQuestionnaires operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiGetQuestionnairesRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiGetQuestionnairesRequest {
    /**
     * 
     * @type {GetQuestionnaireListRequest}
     * @memberof OpenCdxRestQuestionnaireControllerApiGetQuestionnaires
     */
    readonly getQuestionnaireListRequest: GetQuestionnaireListRequest
}

/**
 * Request parameters for getSystemQuestionnaire operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiGetSystemQuestionnaireRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiGetSystemQuestionnaireRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestQuestionnaireControllerApiGetSystemQuestionnaire
     */
    readonly id: string
}

/**
 * Request parameters for getUserQuestionnaire operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiGetUserQuestionnaireRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiGetUserQuestionnaireRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestQuestionnaireControllerApiGetUserQuestionnaire
     */
    readonly id: string
}

/**
 * Request parameters for getUserQuestionnaireDataList operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiGetUserQuestionnaireDataListRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiGetUserQuestionnaireDataListRequest {
    /**
     * 
     * @type {GetQuestionnaireListRequest}
     * @memberof OpenCdxRestQuestionnaireControllerApiGetUserQuestionnaireDataList
     */
    readonly getQuestionnaireListRequest: GetQuestionnaireListRequest
}

/**
 * Request parameters for refreshQuestionnaire operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiRefreshQuestionnaireRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiRefreshQuestionnaireRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestQuestionnaireControllerApiRefreshQuestionnaire
     */
    readonly id: string
}

/**
 * Request parameters for updateClientQuestionnaireData operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiUpdateClientQuestionnaireDataRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiUpdateClientQuestionnaireDataRequest {
    /**
     * 
     * @type {ClientQuestionnaireDataRequest}
     * @memberof OpenCdxRestQuestionnaireControllerApiUpdateClientQuestionnaireData
     */
    readonly clientQuestionnaireDataRequest: ClientQuestionnaireDataRequest
}

/**
 * Request parameters for updateQuestionnaire operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiUpdateQuestionnaireRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiUpdateQuestionnaireRequest {
    /**
     * 
     * @type {QuestionnaireRequest}
     * @memberof OpenCdxRestQuestionnaireControllerApiUpdateQuestionnaire
     */
    readonly questionnaireRequest: QuestionnaireRequest
}

/**
 * Request parameters for updateQuestionnaireData operation in OpenCdxRestQuestionnaireControllerApi.
 * @export
 * @interface OpenCdxRestQuestionnaireControllerApiUpdateQuestionnaireDataRequest
 */
export interface OpenCdxRestQuestionnaireControllerApiUpdateQuestionnaireDataRequest {
    /**
     * 
     * @type {QuestionnaireDataRequest}
     * @memberof OpenCdxRestQuestionnaireControllerApiUpdateQuestionnaireData
     */
    readonly questionnaireDataRequest: QuestionnaireDataRequest
}

/**
 * OpenCdxRestQuestionnaireControllerApi - object-oriented interface
 * @export
 * @class OpenCdxRestQuestionnaireControllerApi
 * @extends {BaseAPI}
 */
export class OpenCdxRestQuestionnaireControllerApi extends BaseAPI {
    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiCreateClientQuestionnaireDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public createClientQuestionnaireData(requestParameters: OpenCdxRestQuestionnaireControllerApiCreateClientQuestionnaireDataRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).createClientQuestionnaireData(requestParameters.clientQuestionnaireDataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiCreateQuestionnaireRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public createQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiCreateQuestionnaireRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).createQuestionnaire(requestParameters.questionnaireRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiCreateQuestionnaireDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public createQuestionnaireData(requestParameters: OpenCdxRestQuestionnaireControllerApiCreateQuestionnaireDataRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).createQuestionnaireData(requestParameters.questionnaireDataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiCreateUserQuestionnaireDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public createUserQuestionnaireData(requestParameters: OpenCdxRestQuestionnaireControllerApiCreateUserQuestionnaireDataRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).createUserQuestionnaireData(requestParameters.userQuestionnaireDataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiDeleteClientQuestionnaireRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public deleteClientQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiDeleteClientQuestionnaireRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).deleteClientQuestionnaire(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiDeleteQuestionnaireRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public deleteQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiDeleteQuestionnaireRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).deleteQuestionnaire(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiDeleteSystemQuestionnaireRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public deleteSystemQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiDeleteSystemQuestionnaireRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).deleteSystemQuestionnaire(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiGetClientQuestionnaireRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public getClientQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiGetClientQuestionnaireRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).getClientQuestionnaire(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiGetClientQuestionnaireDataListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public getClientQuestionnaireDataList(requestParameters: OpenCdxRestQuestionnaireControllerApiGetClientQuestionnaireDataListRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).getClientQuestionnaireDataList(requestParameters.getQuestionnaireListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiGetQuestionnaireRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public getQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiGetQuestionnaireRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).getQuestionnaire(requestParameters.id, requestParameters.updateAnswers, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiGetQuestionnaireDataListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public getQuestionnaireDataList(requestParameters: OpenCdxRestQuestionnaireControllerApiGetQuestionnaireDataListRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).getQuestionnaireDataList(requestParameters.getQuestionnaireListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiGetQuestionnairesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public getQuestionnaires(requestParameters: OpenCdxRestQuestionnaireControllerApiGetQuestionnairesRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).getQuestionnaires(requestParameters.getQuestionnaireListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiGetSystemQuestionnaireRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public getSystemQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiGetSystemQuestionnaireRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).getSystemQuestionnaire(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiGetUserQuestionnaireRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public getUserQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiGetUserQuestionnaireRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).getUserQuestionnaire(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiGetUserQuestionnaireDataListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public getUserQuestionnaireDataList(requestParameters: OpenCdxRestQuestionnaireControllerApiGetUserQuestionnaireDataListRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).getUserQuestionnaireDataList(requestParameters.getQuestionnaireListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiRefreshQuestionnaireRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public refreshQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiRefreshQuestionnaireRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).refreshQuestionnaire(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiUpdateClientQuestionnaireDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public updateClientQuestionnaireData(requestParameters: OpenCdxRestQuestionnaireControllerApiUpdateClientQuestionnaireDataRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).updateClientQuestionnaireData(requestParameters.clientQuestionnaireDataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiUpdateQuestionnaireRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public updateQuestionnaire(requestParameters: OpenCdxRestQuestionnaireControllerApiUpdateQuestionnaireRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).updateQuestionnaire(requestParameters.questionnaireRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestQuestionnaireControllerApiUpdateQuestionnaireDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestQuestionnaireControllerApi
     */
    public updateQuestionnaireData(requestParameters: OpenCdxRestQuestionnaireControllerApiUpdateQuestionnaireDataRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestQuestionnaireControllerApiFp(this.configuration).updateQuestionnaireData(requestParameters.questionnaireDataRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

