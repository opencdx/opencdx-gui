/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ChangePasswordRequest } from '../model';
// @ts-ignore
import type { ChangePasswordResponse } from '../model';
// @ts-ignore
import type { CurrentUserResponse } from '../model';
// @ts-ignore
import type { DeleteIamUserResponse } from '../model';
// @ts-ignore
import type { GetIamUserResponse } from '../model';
// @ts-ignore
import type { ListIamUsersRequest } from '../model';
// @ts-ignore
import type { ListIamUsersResponse } from '../model';
// @ts-ignore
import type { LoginRequest } from '../model';
// @ts-ignore
import type { LoginResponse } from '../model';
// @ts-ignore
import type { SignUpRequest } from '../model';
// @ts-ignore
import type { SignUpResponse } from '../model';
// @ts-ignore
import type { UpdateIamUserRequest } from '../model';
// @ts-ignore
import type { UpdateIamUserResponse } from '../model';
// @ts-ignore
import type { UserExistsRequest } from '../model';
// @ts-ignore
import type { UserExistsResponse } from '../model';
/**
 * OpenCdxiamUserRestControllerApi - axios parameter creator
 * @export
 */
export const OpenCdxiamUserRestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (changePasswordRequest: ChangePasswordRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'changePasswordRequest' is not null or undefined
            assertParamExists('changePassword', 'changePasswordRequest', changePasswordRequest)
            const localVarPath = `/user/password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changePasswordRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUser: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIamUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteIamUser', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIamUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getIamUser', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ListIamUsersRequest} listIamUsersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIamUsers: async (listIamUsersRequest: ListIamUsersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listIamUsersRequest' is not null or undefined
            assertParamExists('listIamUsers', 'listIamUsersRequest', listIamUsersRequest)
            const localVarPath = `/user/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listIamUsersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest)
            const localVarPath = `/user/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SignUpRequest} signUpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp: async (signUpRequest: SignUpRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signUpRequest' is not null or undefined
            assertParamExists('signUp', 'signUpRequest', signUpRequest)
            const localVarPath = `/user/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signUpRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateIamUserRequest} updateIamUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIamUser: async (updateIamUserRequest: UpdateIamUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateIamUserRequest' is not null or undefined
            assertParamExists('updateIamUser', 'updateIamUserRequest', updateIamUserRequest)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateIamUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserExistsRequest} userExistsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userExists: async (userExistsRequest: UserExistsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userExistsRequest' is not null or undefined
            assertParamExists('userExists', 'userExistsRequest', userExistsRequest)
            const localVarPath = `/user/exists`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userExistsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmailIamUser: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('verifyEmailIamUser', 'id', id)
            const localVarPath = `/user/verify/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenCdxiamUserRestControllerApi - functional programming interface
 * @export
 */
export const OpenCdxiamUserRestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenCdxiamUserRestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ChangePasswordRequest} changePasswordRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(changePasswordRequest: ChangePasswordRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangePasswordResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePassword(changePasswordRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxiamUserRestControllerApi.changePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async currentUser(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.currentUser(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxiamUserRestControllerApi.currentUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIamUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteIamUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIamUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxiamUserRestControllerApi.deleteIamUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIamUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetIamUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIamUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxiamUserRestControllerApi.getIamUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ListIamUsersRequest} listIamUsersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listIamUsers(listIamUsersRequest: ListIamUsersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListIamUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listIamUsers(listIamUsersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxiamUserRestControllerApi.listIamUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxiamUserRestControllerApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SignUpRequest} signUpRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUp(signUpRequest: SignUpRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignUpResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUp(signUpRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxiamUserRestControllerApi.signUp']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateIamUserRequest} updateIamUserRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIamUser(updateIamUserRequest: UpdateIamUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateIamUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIamUser(updateIamUserRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxiamUserRestControllerApi.updateIamUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserExistsRequest} userExistsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userExists(userExistsRequest: UserExistsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserExistsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userExists(userExistsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxiamUserRestControllerApi.userExists']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyEmailIamUser(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyEmailIamUser(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxiamUserRestControllerApi.verifyEmailIamUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpenCdxiamUserRestControllerApi - factory interface
 * @export
 */
export const OpenCdxiamUserRestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenCdxiamUserRestControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {OpenCdxiamUserRestControllerApiChangePasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(requestParameters: OpenCdxiamUserRestControllerApiChangePasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChangePasswordResponse> {
            return localVarFp.changePassword(requestParameters.changePasswordRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        currentUser(options?: RawAxiosRequestConfig): AxiosPromise<CurrentUserResponse> {
            return localVarFp.currentUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxiamUserRestControllerApiDeleteIamUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIamUser(requestParameters: OpenCdxiamUserRestControllerApiDeleteIamUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteIamUserResponse> {
            return localVarFp.deleteIamUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxiamUserRestControllerApiGetIamUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIamUser(requestParameters: OpenCdxiamUserRestControllerApiGetIamUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetIamUserResponse> {
            return localVarFp.getIamUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxiamUserRestControllerApiListIamUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listIamUsers(requestParameters: OpenCdxiamUserRestControllerApiListIamUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListIamUsersResponse> {
            return localVarFp.listIamUsers(requestParameters.listIamUsersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxiamUserRestControllerApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(requestParameters: OpenCdxiamUserRestControllerApiLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponse> {
            return localVarFp.login(requestParameters.loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxiamUserRestControllerApiSignUpRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUp(requestParameters: OpenCdxiamUserRestControllerApiSignUpRequest, options?: RawAxiosRequestConfig): AxiosPromise<SignUpResponse> {
            return localVarFp.signUp(requestParameters.signUpRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxiamUserRestControllerApiUpdateIamUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIamUser(requestParameters: OpenCdxiamUserRestControllerApiUpdateIamUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateIamUserResponse> {
            return localVarFp.updateIamUser(requestParameters.updateIamUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxiamUserRestControllerApiUserExistsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userExists(requestParameters: OpenCdxiamUserRestControllerApiUserExistsRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserExistsResponse> {
            return localVarFp.userExists(requestParameters.userExistsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxiamUserRestControllerApiVerifyEmailIamUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyEmailIamUser(requestParameters: OpenCdxiamUserRestControllerApiVerifyEmailIamUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.verifyEmailIamUser(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for changePassword operation in OpenCdxiamUserRestControllerApi.
 * @export
 * @interface OpenCdxiamUserRestControllerApiChangePasswordRequest
 */
export interface OpenCdxiamUserRestControllerApiChangePasswordRequest {
    /**
     * 
     * @type {ChangePasswordRequest}
     * @memberof OpenCdxiamUserRestControllerApiChangePassword
     */
    readonly changePasswordRequest: ChangePasswordRequest
}

/**
 * Request parameters for deleteIamUser operation in OpenCdxiamUserRestControllerApi.
 * @export
 * @interface OpenCdxiamUserRestControllerApiDeleteIamUserRequest
 */
export interface OpenCdxiamUserRestControllerApiDeleteIamUserRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxiamUserRestControllerApiDeleteIamUser
     */
    readonly id: string
}

/**
 * Request parameters for getIamUser operation in OpenCdxiamUserRestControllerApi.
 * @export
 * @interface OpenCdxiamUserRestControllerApiGetIamUserRequest
 */
export interface OpenCdxiamUserRestControllerApiGetIamUserRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxiamUserRestControllerApiGetIamUser
     */
    readonly id: string
}

/**
 * Request parameters for listIamUsers operation in OpenCdxiamUserRestControllerApi.
 * @export
 * @interface OpenCdxiamUserRestControllerApiListIamUsersRequest
 */
export interface OpenCdxiamUserRestControllerApiListIamUsersRequest {
    /**
     * 
     * @type {ListIamUsersRequest}
     * @memberof OpenCdxiamUserRestControllerApiListIamUsers
     */
    readonly listIamUsersRequest: ListIamUsersRequest
}

/**
 * Request parameters for login operation in OpenCdxiamUserRestControllerApi.
 * @export
 * @interface OpenCdxiamUserRestControllerApiLoginRequest
 */
export interface OpenCdxiamUserRestControllerApiLoginRequest {
    /**
     * 
     * @type {LoginRequest}
     * @memberof OpenCdxiamUserRestControllerApiLogin
     */
    readonly loginRequest: LoginRequest
}

/**
 * Request parameters for signUp operation in OpenCdxiamUserRestControllerApi.
 * @export
 * @interface OpenCdxiamUserRestControllerApiSignUpRequest
 */
export interface OpenCdxiamUserRestControllerApiSignUpRequest {
    /**
     * 
     * @type {SignUpRequest}
     * @memberof OpenCdxiamUserRestControllerApiSignUp
     */
    readonly signUpRequest: SignUpRequest
}

/**
 * Request parameters for updateIamUser operation in OpenCdxiamUserRestControllerApi.
 * @export
 * @interface OpenCdxiamUserRestControllerApiUpdateIamUserRequest
 */
export interface OpenCdxiamUserRestControllerApiUpdateIamUserRequest {
    /**
     * 
     * @type {UpdateIamUserRequest}
     * @memberof OpenCdxiamUserRestControllerApiUpdateIamUser
     */
    readonly updateIamUserRequest: UpdateIamUserRequest
}

/**
 * Request parameters for userExists operation in OpenCdxiamUserRestControllerApi.
 * @export
 * @interface OpenCdxiamUserRestControllerApiUserExistsRequest
 */
export interface OpenCdxiamUserRestControllerApiUserExistsRequest {
    /**
     * 
     * @type {UserExistsRequest}
     * @memberof OpenCdxiamUserRestControllerApiUserExists
     */
    readonly userExistsRequest: UserExistsRequest
}

/**
 * Request parameters for verifyEmailIamUser operation in OpenCdxiamUserRestControllerApi.
 * @export
 * @interface OpenCdxiamUserRestControllerApiVerifyEmailIamUserRequest
 */
export interface OpenCdxiamUserRestControllerApiVerifyEmailIamUserRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxiamUserRestControllerApiVerifyEmailIamUser
     */
    readonly id: string
}

/**
 * OpenCdxiamUserRestControllerApi - object-oriented interface
 * @export
 * @class OpenCdxiamUserRestControllerApi
 * @extends {BaseAPI}
 */
export class OpenCdxiamUserRestControllerApi extends BaseAPI {
    /**
     * 
     * @param {OpenCdxiamUserRestControllerApiChangePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxiamUserRestControllerApi
     */
    public changePassword(requestParameters: OpenCdxiamUserRestControllerApiChangePasswordRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxiamUserRestControllerApiFp(this.configuration).changePassword(requestParameters.changePasswordRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxiamUserRestControllerApi
     */
    public currentUser(options?: RawAxiosRequestConfig) {
        return OpenCdxiamUserRestControllerApiFp(this.configuration).currentUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxiamUserRestControllerApiDeleteIamUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxiamUserRestControllerApi
     */
    public deleteIamUser(requestParameters: OpenCdxiamUserRestControllerApiDeleteIamUserRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxiamUserRestControllerApiFp(this.configuration).deleteIamUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxiamUserRestControllerApiGetIamUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxiamUserRestControllerApi
     */
    public getIamUser(requestParameters: OpenCdxiamUserRestControllerApiGetIamUserRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxiamUserRestControllerApiFp(this.configuration).getIamUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxiamUserRestControllerApiListIamUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxiamUserRestControllerApi
     */
    public listIamUsers(requestParameters: OpenCdxiamUserRestControllerApiListIamUsersRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxiamUserRestControllerApiFp(this.configuration).listIamUsers(requestParameters.listIamUsersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxiamUserRestControllerApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxiamUserRestControllerApi
     */
    public login(requestParameters: OpenCdxiamUserRestControllerApiLoginRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxiamUserRestControllerApiFp(this.configuration).login(requestParameters.loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxiamUserRestControllerApiSignUpRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxiamUserRestControllerApi
     */
    public signUp(requestParameters: OpenCdxiamUserRestControllerApiSignUpRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxiamUserRestControllerApiFp(this.configuration).signUp(requestParameters.signUpRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxiamUserRestControllerApiUpdateIamUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxiamUserRestControllerApi
     */
    public updateIamUser(requestParameters: OpenCdxiamUserRestControllerApiUpdateIamUserRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxiamUserRestControllerApiFp(this.configuration).updateIamUser(requestParameters.updateIamUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxiamUserRestControllerApiUserExistsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxiamUserRestControllerApi
     */
    public userExists(requestParameters: OpenCdxiamUserRestControllerApiUserExistsRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxiamUserRestControllerApiFp(this.configuration).userExists(requestParameters.userExistsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxiamUserRestControllerApiVerifyEmailIamUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxiamUserRestControllerApi
     */
    public verifyEmailIamUser(requestParameters: OpenCdxiamUserRestControllerApiVerifyEmailIamUserRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxiamUserRestControllerApiFp(this.configuration).verifyEmailIamUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}

