/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/system/questionnaire": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateQuestionnaireData"];
        post: operations["createQuestionnaireData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/questionnaire": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateQuestionnaire"];
        post: operations["createQuestionnaire"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/questionnaire": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateClientQuestionnaireData"];
        post: operations["createClientQuestionnaireData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/questionnaire": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createUserQuestionnaireData"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/questionnaire/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["getUserQuestionnaireDataList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/questionnaire/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["getQuestionnaireDataList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/questionnaire/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["getQuestionnaires"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/questionnaire/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["getClientQuestionnaireDataList"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/questionnaire/{Id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getUserQuestionnaire"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/system/questionnaire/{Id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSystemQuestionnaire"];
        put?: never;
        post?: never;
        delete: operations["deleteSystemQuestionnaire"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/questionnaire/{Id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getQuestionnaire"];
        put?: never;
        post?: never;
        delete: operations["deleteQuestionnaire"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/questionnaire/refresh/{Id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["refreshQuestionnaire"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/client/questionnaire/{Id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getClientQuestionnaire"];
        put?: never;
        post?: never;
        delete: operations["deleteClientQuestionnaire"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        QuestionnaireData: {
            id?: string;
            name?: string;
            status?: string;
            state?: string;
            questionJsonId?: string;
            questionAnfJson?: string;
            rulesEngineConfig?: string;
            created?: components["schemas"]["Timestamp"];
            modified?: components["schemas"]["Timestamp"];
            creator?: string;
            modifier?: string;
        };
        QuestionnaireDataRequest: {
            questionnaireData?: components["schemas"]["QuestionnaireData"];
        };
        Timestamp: {
            /** Format: int64 */
            seconds?: number;
            /** Format: int32 */
            nanos?: number;
        };
        SubmissionResponse: {
            success?: boolean;
            message?: string;
            id?: string;
        };
        ANFStatement: {
            id?: string;
            time?: components["schemas"]["Measure"];
            subjectOfRecord?: components["schemas"]["Participant"];
            authors?: components["schemas"]["Practitioner"][];
            subjectOfInformation?: string;
            associatedStatement?: components["schemas"]["AssociatedStatement"][];
            topic?: string;
            type?: string;
            created?: components["schemas"]["Timestamp"];
            modified?: components["schemas"]["Timestamp"];
            creator?: string;
            modifier?: string;
            /** @enum {string} */
            status?: "STATUS_UNSPECIFIED" | "STATUS_ACTIVE" | "STATUS_DELETED" | "UNRECOGNIZED";
            performanceCircumstance?: components["schemas"]["PerformanceCircumstance"];
            requestCircumstance?: components["schemas"]["RequestCircumstance"];
            narrativeCircumstance?: components["schemas"]["NarrativeCircumstance"];
        };
        AnfStatementConnector: {
            anfStatement?: components["schemas"]["ANFStatement"];
            /** @enum {string} */
            anfStatementType?: "ANF_STATEMENT_TYPE_UNSPECIFIED" | "ANF_STATEMENT_TYPE_MAIN" | "ANF_STATEMENT_TYPE_ASSOCIATED" | "ANF_STATEMENT_USER_QUESTION" | "ANF_STATEMENT_TYPE_NOT_APPLICABLE" | "UNRECOGNIZED";
            /** @enum {string} */
            anfOperatorType?: "ANF_OPERATOR_TYPE_UNSPECIFIED" | "ANF_OPERATOR_TYPE_EQUAL" | "ANF_OPERATOR_TYPE_NOT_EQUAL" | "ANF_OPERATOR_TYPE_GREATER_THAN" | "ANF_OPERATOR_TYPE_GREATER_THAN_OR_EQUAL" | "ANF_OPERATOR_TYPE_LESS_THAN" | "ANF_OPERATOR_TYPE_LESS_THAN_OR_EQUAL" | "ANF_OPERATOR_TYPE_CONTAINS" | "ANF_OPERATOR_TYPE_NOT_CONTAINS" | "ANF_OPERATOR_TYPE_IN" | "ANF_OPERATOR_TYPE_NOT_IN" | "UNRECOGNIZED";
            operatorValue?: string;
        };
        AnswerValue: {
            /** Format: int32 */
            valueInteger?: number;
            /** Format: double */
            valueDouble?: number;
            valueString?: string;
            valueBoolean?: boolean;
            valueCoding?: components["schemas"]["Coding"];
        };
        AssociatedStatement: {
            id?: string;
            semantic?: string;
        };
        Code: {
            system?: string;
            code?: string;
        };
        Coding: {
            id?: string;
            system?: string;
            version?: string;
            code?: string;
            display?: string;
        };
        Extension: {
            url?: string;
            /** Format: double */
            valueDecimal?: number;
            valueCodeableConcept?: components["schemas"]["Coding"];
        };
        Measure: {
            upperBound?: string;
            lowerBound?: string;
            includeUpperBound?: boolean;
            includeLowerBound?: boolean;
            semantic?: string;
            resolution?: string;
        };
        NarrativeCircumstance: {
            timing?: components["schemas"]["Measure"];
            purpose?: string[];
            text?: string;
        };
        Participant: {
            id?: string;
            practitionerValue?: string;
            code?: string;
        };
        PerformanceCircumstance: {
            timing?: components["schemas"]["Measure"];
            purpose?: string[];
            status?: string;
            result?: components["schemas"]["Measure"];
            healthRisk?: string;
            normalRange?: components["schemas"]["Measure"];
            participant?: components["schemas"]["Participant"][];
        };
        Practitioner: {
            id?: string;
            practitionerValue?: string;
            code?: string;
        };
        Questionnaire: {
            id?: string;
            resourceType?: string;
            title?: string;
            /** @enum {string} */
            status?: "draft" | "active" | "retired" | "unknown" | "UNRECOGNIZED";
            description?: string;
            purpose?: string;
            item?: components["schemas"]["QuestionnaireItem"][];
            ruleId?: string;
            ruleQuestionId?: string[];
            created?: components["schemas"]["Timestamp"];
            modified?: components["schemas"]["Timestamp"];
            creator?: string;
            modifier?: string;
            version?: string;
        };
        QuestionnaireEnableWhen: {
            question?: string;
            operator?: string;
            answerCoding?: components["schemas"]["Coding"];
            /** Format: int32 */
            answerInteger?: number;
            /** Format: double */
            answerDouble?: number;
            answerBoolean?: boolean;
        };
        QuestionnaireItem: {
            type?: string;
            linkId?: string;
            text?: string;
            enableWhen?: components["schemas"]["QuestionnaireEnableWhen"][];
            enableBehavior?: string;
            required?: boolean;
            repeats?: boolean;
            readOnly?: boolean;
            code?: components["schemas"]["Code"][];
            extension?: components["schemas"]["QuestionnaireItemExtension"][];
            answerOption?: components["schemas"]["QuestionnaireItemAnswerOption"][];
            initial?: components["schemas"]["QuestionnaireItemInitial"][];
            anfStatementConnector?: components["schemas"]["AnfStatementConnector"][];
            answer?: components["schemas"]["AnswerValue"][];
        };
        QuestionnaireItemAnswerOption: {
            valueCoding?: components["schemas"]["Coding"];
            initialSelected?: boolean;
            extension?: components["schemas"]["Extension"][];
        };
        QuestionnaireItemExtension: {
            url?: string;
            valueCodeableConcept?: components["schemas"]["ValueCodeableConcept"];
            valueCoding?: components["schemas"]["Coding"];
            /** Format: int32 */
            valueInteger?: number;
            /** Format: double */
            valueDecimal?: number;
        };
        QuestionnaireItemInitial: {
            valueBoolean?: boolean;
            /** Format: int32 */
            valueInteger?: number;
            /** Format: double */
            valueDecimal?: number;
        };
        QuestionnaireRequest: {
            questionnaire?: components["schemas"]["Questionnaire"];
        };
        Repetition: {
            periodStart?: components["schemas"]["Timestamp"];
            /** Format: int32 */
            periodDuration?: number;
            /** @enum {string} */
            periodDurationType?: "DURATION_TYPE_NOT_SPECIFIED" | "DURATION_TYPE_MILLISECONDS" | "DURATION_TYPE_SECONDS" | "DURATION_TYPE_MINUTES" | "DURATION_TYPE_HOURS" | "DURATION_TYPE_DAYS" | "DURATION_TYPE_WEEKS" | "DURATION_TYPE_MONTHS" | "DURATION_TYPE_YEARS" | "UNRECOGNIZED";
            /** Format: int32 */
            eventFrequency?: number;
            /** @enum {string} */
            eventFrequencyType?: "DURATION_TYPE_NOT_SPECIFIED" | "DURATION_TYPE_MILLISECONDS" | "DURATION_TYPE_SECONDS" | "DURATION_TYPE_MINUTES" | "DURATION_TYPE_HOURS" | "DURATION_TYPE_DAYS" | "DURATION_TYPE_WEEKS" | "DURATION_TYPE_MONTHS" | "DURATION_TYPE_YEARS" | "UNRECOGNIZED";
            /** Format: int32 */
            eventSeparation?: number;
            /** @enum {string} */
            eventSeparationType?: "DURATION_TYPE_NOT_SPECIFIED" | "DURATION_TYPE_MILLISECONDS" | "DURATION_TYPE_SECONDS" | "DURATION_TYPE_MINUTES" | "DURATION_TYPE_HOURS" | "DURATION_TYPE_DAYS" | "DURATION_TYPE_WEEKS" | "DURATION_TYPE_MONTHS" | "DURATION_TYPE_YEARS" | "UNRECOGNIZED";
            /** Format: int32 */
            eventDuration?: number;
            /** @enum {string} */
            eventDurationType?: "DURATION_TYPE_NOT_SPECIFIED" | "DURATION_TYPE_MILLISECONDS" | "DURATION_TYPE_SECONDS" | "DURATION_TYPE_MINUTES" | "DURATION_TYPE_HOURS" | "DURATION_TYPE_DAYS" | "DURATION_TYPE_WEEKS" | "DURATION_TYPE_MONTHS" | "DURATION_TYPE_YEARS" | "UNRECOGNIZED";
        };
        RequestCircumstance: {
            timing?: components["schemas"]["Measure"];
            purpose?: string[];
            conditionalTrigger?: components["schemas"]["AssociatedStatement"][];
            requestedParticipant?: components["schemas"]["Participant"][];
            /** @enum {string} */
            priority?: "ROUTINE" | "STAT" | "UNRECOGNIZED";
            requestedResult?: components["schemas"]["Measure"];
            repetition?: components["schemas"]["Repetition"];
        };
        ValueCodeableConcept: {
            text?: string;
            coding?: components["schemas"]["Coding"][];
        };
        ClientQuestionnaireData: {
            questionnaireData?: components["schemas"]["QuestionnaireData"][];
            organizationId?: string;
            workspaceId?: string;
            ruleId?: string;
        };
        ClientQuestionnaireDataRequest: {
            clientQuestionnaireData?: components["schemas"]["ClientQuestionnaireData"];
        };
        UserQuestionnaireData: {
            id?: string;
            patientId?: string;
            questionnaireData?: components["schemas"]["Questionnaire"][];
        };
        UserQuestionnaireDataRequest: {
            userQuestionnaireData?: components["schemas"]["UserQuestionnaireData"];
        };
        GetQuestionnaireListRequest: {
            id?: string;
            pagination?: components["schemas"]["Pagination"];
            updateAnswers?: boolean;
        };
        Pagination: {
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            sortAscending?: boolean;
            sort?: string;
            /** Format: int64 */
            totalPages?: number;
            /** Format: int64 */
            totalRecords?: number;
        };
        UserQuestionnaireDataResponse: {
            list?: components["schemas"]["UserQuestionnaireData"][];
            pagination?: components["schemas"]["Pagination"];
        };
        SystemQuestionnaireData: {
            questionnaireData?: components["schemas"]["QuestionnaireData"][];
        };
        Questionnaires: {
            questionnaires?: components["schemas"]["Questionnaire"][];
            pagination?: components["schemas"]["Pagination"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    updateQuestionnaireData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuestionnaireDataRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionResponse"];
                };
            };
        };
    };
    createQuestionnaireData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuestionnaireDataRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionResponse"];
                };
            };
        };
    };
    updateQuestionnaire: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuestionnaireRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Questionnaire"];
                };
            };
        };
    };
    createQuestionnaire: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuestionnaireRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Questionnaire"];
                };
            };
        };
    };
    updateClientQuestionnaireData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClientQuestionnaireDataRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionResponse"];
                };
            };
        };
    };
    createClientQuestionnaireData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClientQuestionnaireDataRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionResponse"];
                };
            };
        };
    };
    createUserQuestionnaireData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserQuestionnaireDataRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionResponse"];
                };
            };
        };
    };
    getUserQuestionnaireDataList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetQuestionnaireListRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserQuestionnaireDataResponse"];
                };
            };
        };
    };
    getQuestionnaireDataList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetQuestionnaireListRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemQuestionnaireData"];
                };
            };
        };
    };
    getQuestionnaires: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetQuestionnaireListRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Questionnaires"];
                };
            };
        };
    };
    getClientQuestionnaireDataList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetQuestionnaireListRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClientQuestionnaireData"];
                };
            };
        };
    };
    getUserQuestionnaire: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                Id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserQuestionnaireData"];
                };
            };
        };
    };
    getSystemQuestionnaire: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                Id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SystemQuestionnaireData"];
                };
            };
        };
    };
    deleteSystemQuestionnaire: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                Id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionResponse"];
                };
            };
        };
    };
    getQuestionnaire: {
        parameters: {
            query?: {
                updateAnswers?: boolean;
            };
            header?: never;
            path: {
                Id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Questionnaire"];
                };
            };
        };
    };
    deleteQuestionnaire: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                Id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionResponse"];
                };
            };
        };
    };
    refreshQuestionnaire: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                Id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Questionnaire"];
                };
            };
        };
    };
    getClientQuestionnaire: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                Id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ClientQuestionnaireData"];
                };
            };
        };
    };
    deleteClientQuestionnaire: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                Id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionResponse"];
                };
            };
        };
    };
}
