/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/workspace": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateWorkspace"];
        post: operations["createWorkspace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateIamUser"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateOrganization"];
        post: operations["createOrganization"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["listWorkspaces"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["signUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["changePassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["listIamUsers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/exists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["userExists"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/protectPrivacy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["postProtectPrivacy"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["listOrganizations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/monitorRealTime": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["postMonitorRealTime"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/detectAnomalies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["postDetectAnomalies"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/authorize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["postAuthorize"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/analyzeUserBehavior": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["postAnalyzeUserBehavior"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getWorkspaceDetailsById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getIamUser"];
        put?: never;
        post?: never;
        delete: operations["deleteIamUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/verify/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["verifyEmailIamUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/current": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["currentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organization/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getOrganizationDetailsById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Department: {
            id?: string;
            name?: string;
            description?: string;
            employees?: components["schemas"]["Employee"][];
        };
        EmailAddress: {
            email?: string;
            /** @enum {string} */
            type?: "EMAIL_TYPE_NOT_SPECIFIED" | "EMAIL_TYPE_PERSONAL" | "EMAIL_TYPE_WORK" | "EMAIL_TYPE_OTHER" | "UNRECOGNIZED";
        };
        Employee: {
            employeeId?: string;
            name?: components["schemas"]["FullName"];
            title?: string;
            phoneNumbers?: components["schemas"]["PhoneNumber"][];
            email?: components["schemas"]["EmailAddress"][];
        };
        FullName: {
            title?: string;
            firstName?: string;
            middleName?: string;
            lastName?: string;
            suffix?: string;
        };
        PhoneNumber: {
            number?: string;
            /** @enum {string} */
            type?: "PHONE_TYPE_NOT_SPECIFIED" | "PHONE_TYPE_MOBILE" | "PHONE_TYPE_HOME" | "PHONE_TYPE_WORK" | "PHONE_TYPE_FAX" | "PHONE_TYPE_OTHER" | "UNRECOGNIZED";
        };
        Timestamp: {
            /** Format: int64 */
            seconds?: number;
            /** Format: int32 */
            nanos?: number;
        };
        UpdateWorkspaceRequest: {
            workspace?: components["schemas"]["Workspace"];
        };
        Workspace: {
            id?: string;
            name?: string;
            description?: string;
            organizationId?: string;
            createdDate?: components["schemas"]["Timestamp"];
            location?: string;
            manager?: string;
            /** Format: int32 */
            capacity?: number;
            facilities?: string[];
            workspaceType?: string;
            workspaceImageUrls?: string[];
            usagePolicy?: string;
            availabilitySchedule?: string;
            departments?: components["schemas"]["Department"][];
            created?: components["schemas"]["Timestamp"];
            modified?: components["schemas"]["Timestamp"];
            creator?: string;
            modifier?: string;
        };
        UpdateWorkspaceResponse: {
            workspace?: components["schemas"]["Workspace"];
        };
        IamUser: {
            id?: string;
            systemName?: string;
            username?: string;
            emailVerified?: boolean;
            /** @enum {string} */
            status?: "IAM_USER_STATUS_UNSPECIFIED" | "IAM_USER_STATUS_ACTIVE" | "IAM_USER_STATUS_INACTIVE" | "IAM_USER_STATUS_DELETED" | "UNRECOGNIZED";
            /** @enum {string} */
            type?: "IAM_USER_TYPE_UNSPECIFIED" | "IAM_USER_TYPE_REGULAR" | "IAM_USER_TYPE_SYSTEM" | "IAM_USER_TYPE_TRIAL" | "UNRECOGNIZED";
            organizationId?: string;
            workspaceId?: string;
            created?: string;
            modified?: string;
            creator?: string;
            modifier?: string;
        };
        UpdateIamUserRequest: {
            iamUser?: components["schemas"]["IamUser"];
        };
        UpdateIamUserResponse: {
            iamUser?: components["schemas"]["IamUser"];
        };
        Address: {
            countryId?: string;
            /** @enum {string} */
            addressPurpose?: "LOCATION" | "MAILING" | "PRIMARY" | "SECONDARY" | "BILLING" | "SHIPPING" | "WORK" | "UNRECOGNIZED";
            address1?: string;
            address2?: string;
            address3?: string;
            city?: string;
            state?: string;
            postalCode?: string;
        };
        ContactInfo: {
            name?: components["schemas"]["FullName"];
            patientId?: string;
            addresses?: components["schemas"]["Address"][];
            phoneNumbers?: components["schemas"]["PhoneNumber"][];
            emails?: components["schemas"]["EmailAddress"][];
        };
        Organization: {
            id?: string;
            name?: string;
            description?: string;
            foundingDate?: components["schemas"]["Timestamp"];
            address?: components["schemas"]["Address"];
            website?: string;
            industry?: string;
            /** Format: double */
            revenue?: number;
            logoUrl?: string;
            socialMediaLinks?: string[];
            missionStatement?: string;
            visionStatement?: string;
            contacts?: components["schemas"]["ContactInfo"][];
            created?: components["schemas"]["Timestamp"];
            modified?: components["schemas"]["Timestamp"];
            creator?: string;
            modifier?: string;
        };
        UpdateOrganizationRequest: {
            organization?: components["schemas"]["Organization"];
        };
        UpdateOrganizationResponse: {
            organization?: components["schemas"]["Organization"];
        };
        CreateWorkspaceRequest: {
            workspace?: components["schemas"]["Workspace"];
        };
        CreateWorkspaceResponse: {
            workspace?: components["schemas"]["Workspace"];
        };
        ListWorkspacesResponse: {
            workspaces?: components["schemas"]["Workspace"][];
        };
        SignUpRequest: {
            /** @enum {string} */
            type?: "IAM_USER_TYPE_UNSPECIFIED" | "IAM_USER_TYPE_REGULAR" | "IAM_USER_TYPE_SYSTEM" | "IAM_USER_TYPE_TRIAL" | "UNRECOGNIZED";
            firstName?: string;
            lastName?: string;
            systemName?: string;
            username?: string;
            password?: string;
            organizationId?: string;
            workspaceId?: string;
        };
        SignUpResponse: {
            iamUser?: components["schemas"]["IamUser"];
        };
        ChangePasswordRequest: {
            id?: string;
            oldPassword?: string;
            newPassword?: string;
            newPasswordConfirmation?: string;
        };
        ChangePasswordResponse: {
            iamUser?: components["schemas"]["IamUser"];
        };
        LoginRequest: {
            userName?: string;
            password?: string;
        };
        LoginResponse: {
            token?: string;
        };
        ListIamUsersRequest: {
            pagination?: components["schemas"]["Pagination"];
        };
        Pagination: {
            /** Format: int32 */
            pageNumber?: number;
            /** Format: int32 */
            pageSize?: number;
            sortAscending?: boolean;
            sort?: string;
            /** Format: int64 */
            totalPages?: number;
            /** Format: int64 */
            totalRecords?: number;
        };
        ListIamUsersResponse: {
            pagination?: components["schemas"]["Pagination"];
            iamUsers?: components["schemas"]["IamUser"][];
        };
        UserExistsRequest: {
            id?: string;
        };
        UserExistsResponse: {
            iamUser?: components["schemas"]["IamUser"];
        };
        PrivacyProtectionData: {
            encounterId?: string;
            dataType?: string;
            anonymizedData?: string;
            isDataEncrypted?: boolean;
            encryptionMethod?: string;
            dataRetentionPolicy?: string;
            hasDataSharingAgreement?: boolean;
            dataPurpose?: string;
        };
        PrivacyProtectionDataRequest: {
            privacyProtectionData?: components["schemas"]["PrivacyProtectionData"];
        };
        SecurityResponse: {
            encounterId?: string;
            response?: string;
        };
        CreateOrganizationRequest: {
            organization?: components["schemas"]["Organization"];
        };
        CreateOrganizationResponse: {
            organization?: components["schemas"]["Organization"];
        };
        ListOrganizationsResponse: {
            organizations?: components["schemas"]["Organization"][];
        };
        RealTimeMonitoringData: {
            encounterId?: string;
            monitoredEntity?: string;
            monitoringDetails?: string;
            monitoringStartTime?: components["schemas"]["Timestamp"];
            monitoringEndTime?: components["schemas"]["Timestamp"];
            triggeredAlerts?: string[];
            monitoringFrequency?: string;
            isContinuousMonitoring?: boolean;
            responsibleMonitoringTeam?: string;
        };
        RealTimeMonitoringDataRequest: {
            realTimeMonitoringData?: components["schemas"]["RealTimeMonitoringData"];
        };
        AnomalyDetectionData: {
            encounterId?: string;
            userId?: string;
            dataAccessPattern?: string;
            timeStamp?: components["schemas"]["Timestamp"];
            anomaliesDetected?: string[];
            sourceIp?: string;
            location?: string;
            affectedSystems?: string[];
            severityLevel?: string;
        };
        AnomalyDetectionDataRequest: {
            anomalyDetectionData?: components["schemas"]["AnomalyDetectionData"];
        };
        AuthorizationControlData: {
            encounterId?: string;
            userId?: string;
            dataAccessLevel?: string;
            accessGrantedBy?: string;
            accessScopes?: string[];
            accessValidityPeriod?: string;
            isTemporaryAccess?: boolean;
            conditionalAccessParams?: string[];
        };
        AuthorizationControlDataRequest: {
            authorizationControlData?: components["schemas"]["AuthorizationControlData"];
        };
        UserBehaviorAnalysisData: {
            encounterId?: string;
            userId?: string;
            behaviorPattern?: string;
            associatedActivities?: string[];
            analysisTimeFrame?: string;
            historicalBehaviorData?: string[];
            riskAssessment?: string;
            isBehaviorOutlier?: boolean;
            behaviorConsequence?: string;
        };
        UserBehaviorAnalysisDataRequest: {
            userBehaviorAnalysisData?: components["schemas"]["UserBehaviorAnalysisData"];
        };
        GetWorkspaceDetailsByIdResponse: {
            workspace?: components["schemas"]["Workspace"];
        };
        GetIamUserResponse: {
            iamUser?: components["schemas"]["IamUser"];
        };
        CurrentUserResponse: {
            iamUser?: components["schemas"]["IamUser"];
        };
        GetOrganizationDetailsByIdResponse: {
            organization?: components["schemas"]["Organization"];
        };
        DeleteIamUserResponse: {
            iamUser?: components["schemas"]["IamUser"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    updateWorkspace: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateWorkspaceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateWorkspaceResponse"];
                };
            };
        };
    };
    createWorkspace: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWorkspaceRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateWorkspaceResponse"];
                };
            };
        };
    };
    updateIamUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateIamUserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateIamUserResponse"];
                };
            };
        };
    };
    updateOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrganizationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateOrganizationResponse"];
                };
            };
        };
    };
    createOrganization: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrganizationRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateOrganizationResponse"];
                };
            };
        };
    };
    listWorkspaces: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListWorkspacesResponse"];
                };
            };
        };
    };
    signUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignUpRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignUpResponse"];
                };
            };
        };
    };
    changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePasswordRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ChangePasswordResponse"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
        };
    };
    listIamUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ListIamUsersRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListIamUsersResponse"];
                };
            };
        };
    };
    userExists: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserExistsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserExistsResponse"];
                };
            };
        };
    };
    postProtectPrivacy: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PrivacyProtectionDataRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SecurityResponse"];
                };
            };
        };
    };
    listOrganizations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListOrganizationsResponse"];
                };
            };
        };
    };
    postMonitorRealTime: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RealTimeMonitoringDataRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SecurityResponse"];
                };
            };
        };
    };
    postDetectAnomalies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AnomalyDetectionDataRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SecurityResponse"];
                };
            };
        };
    };
    postAuthorize: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthorizationControlDataRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SecurityResponse"];
                };
            };
        };
    };
    postAnalyzeUserBehavior: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserBehaviorAnalysisDataRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SecurityResponse"];
                };
            };
        };
    };
    getWorkspaceDetailsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetWorkspaceDetailsByIdResponse"];
                };
            };
        };
    };
    getIamUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetIamUserResponse"];
                };
            };
        };
    };
    deleteIamUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteIamUserResponse"];
                };
            };
        };
    };
    verifyEmailIamUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    currentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CurrentUserResponse"];
                };
            };
        };
    };
    getOrganizationDetailsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrganizationDetailsByIdResponse"];
                };
            };
        };
    };
}
