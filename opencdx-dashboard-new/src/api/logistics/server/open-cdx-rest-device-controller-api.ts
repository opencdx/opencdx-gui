/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DeleteResponse } from '../model';
// @ts-ignore
import type { Device } from '../model';
// @ts-ignore
import type { DeviceListRequest } from '../model';
// @ts-ignore
import type { DeviceListResponse } from '../model';
/**
 * OpenCdxRestDeviceControllerApi - axios parameter creator
 * @export
 */
export const OpenCdxRestDeviceControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Device} device 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDevice: async (device: Device, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'device' is not null or undefined
            assertParamExists('addDevice', 'device', device)
            const localVarPath = `/device`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(device, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDevice', 'id', id)
            const localVarPath = `/device/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDeviceById', 'id', id)
            const localVarPath = `/device/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeviceListRequest} deviceListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevices: async (deviceListRequest: DeviceListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deviceListRequest' is not null or undefined
            assertParamExists('listDevices', 'deviceListRequest', deviceListRequest)
            const localVarPath = `/device/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deviceListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Device} device 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevice: async (device: Device, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'device' is not null or undefined
            assertParamExists('updateDevice', 'device', device)
            const localVarPath = `/device`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(device, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenCdxRestDeviceControllerApi - functional programming interface
 * @export
 */
export const OpenCdxRestDeviceControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenCdxRestDeviceControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Device} device 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addDevice(device: Device, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addDevice(device, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestDeviceControllerApi.addDevice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDevice(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDevice(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestDeviceControllerApi.deleteDevice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeviceById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeviceById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestDeviceControllerApi.getDeviceById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DeviceListRequest} deviceListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDevices(deviceListRequest: DeviceListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDevices(deviceListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestDeviceControllerApi.listDevices']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Device} device 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDevice(device: Device, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Device>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDevice(device, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestDeviceControllerApi.updateDevice']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpenCdxRestDeviceControllerApi - factory interface
 * @export
 */
export const OpenCdxRestDeviceControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenCdxRestDeviceControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {OpenCdxRestDeviceControllerApiAddDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addDevice(requestParameters: OpenCdxRestDeviceControllerApiAddDeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Device> {
            return localVarFp.addDevice(requestParameters.device, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestDeviceControllerApiDeleteDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDevice(requestParameters: OpenCdxRestDeviceControllerApiDeleteDeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteResponse> {
            return localVarFp.deleteDevice(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestDeviceControllerApiGetDeviceByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceById(requestParameters: OpenCdxRestDeviceControllerApiGetDeviceByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Device> {
            return localVarFp.getDeviceById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestDeviceControllerApiListDevicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDevices(requestParameters: OpenCdxRestDeviceControllerApiListDevicesRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeviceListResponse> {
            return localVarFp.listDevices(requestParameters.deviceListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestDeviceControllerApiUpdateDeviceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDevice(requestParameters: OpenCdxRestDeviceControllerApiUpdateDeviceRequest, options?: RawAxiosRequestConfig): AxiosPromise<Device> {
            return localVarFp.updateDevice(requestParameters.device, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addDevice operation in OpenCdxRestDeviceControllerApi.
 * @export
 * @interface OpenCdxRestDeviceControllerApiAddDeviceRequest
 */
export interface OpenCdxRestDeviceControllerApiAddDeviceRequest {
    /**
     * 
     * @type {Device}
     * @memberof OpenCdxRestDeviceControllerApiAddDevice
     */
    readonly device: Device
}

/**
 * Request parameters for deleteDevice operation in OpenCdxRestDeviceControllerApi.
 * @export
 * @interface OpenCdxRestDeviceControllerApiDeleteDeviceRequest
 */
export interface OpenCdxRestDeviceControllerApiDeleteDeviceRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestDeviceControllerApiDeleteDevice
     */
    readonly id: string
}

/**
 * Request parameters for getDeviceById operation in OpenCdxRestDeviceControllerApi.
 * @export
 * @interface OpenCdxRestDeviceControllerApiGetDeviceByIdRequest
 */
export interface OpenCdxRestDeviceControllerApiGetDeviceByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestDeviceControllerApiGetDeviceById
     */
    readonly id: string
}

/**
 * Request parameters for listDevices operation in OpenCdxRestDeviceControllerApi.
 * @export
 * @interface OpenCdxRestDeviceControllerApiListDevicesRequest
 */
export interface OpenCdxRestDeviceControllerApiListDevicesRequest {
    /**
     * 
     * @type {DeviceListRequest}
     * @memberof OpenCdxRestDeviceControllerApiListDevices
     */
    readonly deviceListRequest: DeviceListRequest
}

/**
 * Request parameters for updateDevice operation in OpenCdxRestDeviceControllerApi.
 * @export
 * @interface OpenCdxRestDeviceControllerApiUpdateDeviceRequest
 */
export interface OpenCdxRestDeviceControllerApiUpdateDeviceRequest {
    /**
     * 
     * @type {Device}
     * @memberof OpenCdxRestDeviceControllerApiUpdateDevice
     */
    readonly device: Device
}

/**
 * OpenCdxRestDeviceControllerApi - object-oriented interface
 * @export
 * @class OpenCdxRestDeviceControllerApi
 * @extends {BaseAPI}
 */
export class OpenCdxRestDeviceControllerApi extends BaseAPI {
    /**
     * 
     * @param {OpenCdxRestDeviceControllerApiAddDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestDeviceControllerApi
     */
    public addDevice(requestParameters: OpenCdxRestDeviceControllerApiAddDeviceRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestDeviceControllerApiFp(this.configuration).addDevice(requestParameters.device, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestDeviceControllerApiDeleteDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestDeviceControllerApi
     */
    public deleteDevice(requestParameters: OpenCdxRestDeviceControllerApiDeleteDeviceRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestDeviceControllerApiFp(this.configuration).deleteDevice(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestDeviceControllerApiGetDeviceByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestDeviceControllerApi
     */
    public getDeviceById(requestParameters: OpenCdxRestDeviceControllerApiGetDeviceByIdRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestDeviceControllerApiFp(this.configuration).getDeviceById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestDeviceControllerApiListDevicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestDeviceControllerApi
     */
    public listDevices(requestParameters: OpenCdxRestDeviceControllerApiListDevicesRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestDeviceControllerApiFp(this.configuration).listDevices(requestParameters.deviceListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestDeviceControllerApiUpdateDeviceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestDeviceControllerApi
     */
    public updateDevice(requestParameters: OpenCdxRestDeviceControllerApiUpdateDeviceRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestDeviceControllerApiFp(this.configuration).updateDevice(requestParameters.device, options).then((request) => request(this.axios, this.basePath));
    }
}

