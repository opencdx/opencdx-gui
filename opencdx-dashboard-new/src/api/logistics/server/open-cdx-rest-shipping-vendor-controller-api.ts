/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DeliveryTrackingRequest } from '../model';
// @ts-ignore
import type { DeliveryTrackingResponse } from '../model';
// @ts-ignore
import type { Shipping } from '../model';
// @ts-ignore
import type { ShippingRequest } from '../model';
// @ts-ignore
import type { ShippingResponse } from '../model';
// @ts-ignore
import type { ShippingVendorResponse } from '../model';
/**
 * OpenCdxRestShippingVendorControllerApi - axios parameter creator
 * @export
 */
export const OpenCdxRestShippingVendorControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {DeliveryTrackingRequest} deliveryTrackingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeliveryTracking: async (deliveryTrackingRequest: DeliveryTrackingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deliveryTrackingRequest' is not null or undefined
            assertParamExists('createDeliveryTracking', 'deliveryTrackingRequest', deliveryTrackingRequest)
            const localVarPath = `/deliveryTracking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deliveryTrackingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} deliveryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeliveryTracking: async (deliveryId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deliveryId' is not null or undefined
            assertParamExists('getDeliveryTracking', 'deliveryId', deliveryId)
            const localVarPath = `/deliveryTracking/{deliveryId}`
                .replace(`{${"deliveryId"}}`, encodeURIComponent(String(deliveryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ShippingRequest} shippingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingVendors: async (shippingRequest: ShippingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shippingRequest' is not null or undefined
            assertParamExists('getShippingVendors', 'shippingRequest', shippingRequest)
            const localVarPath = `/vendors`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shippingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Shipping} shipping 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipPackage: async (shipping: Shipping, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipping' is not null or undefined
            assertParamExists('shipPackage', 'shipping', shipping)
            const localVarPath = `/ship`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(shipping, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenCdxRestShippingVendorControllerApi - functional programming interface
 * @export
 */
export const OpenCdxRestShippingVendorControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenCdxRestShippingVendorControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {DeliveryTrackingRequest} deliveryTrackingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDeliveryTracking(deliveryTrackingRequest: DeliveryTrackingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryTrackingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDeliveryTracking(deliveryTrackingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestShippingVendorControllerApi.createDeliveryTracking']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} deliveryId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeliveryTracking(deliveryId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeliveryTrackingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeliveryTracking(deliveryId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestShippingVendorControllerApi.getDeliveryTracking']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ShippingRequest} shippingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShippingVendors(shippingRequest: ShippingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingVendorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShippingVendors(shippingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestShippingVendorControllerApi.getShippingVendors']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Shipping} shipping 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shipPackage(shipping: Shipping, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shipPackage(shipping, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestShippingVendorControllerApi.shipPackage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpenCdxRestShippingVendorControllerApi - factory interface
 * @export
 */
export const OpenCdxRestShippingVendorControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenCdxRestShippingVendorControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {OpenCdxRestShippingVendorControllerApiCreateDeliveryTrackingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDeliveryTracking(requestParameters: OpenCdxRestShippingVendorControllerApiCreateDeliveryTrackingRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryTrackingResponse> {
            return localVarFp.createDeliveryTracking(requestParameters.deliveryTrackingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestShippingVendorControllerApiGetDeliveryTrackingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeliveryTracking(requestParameters: OpenCdxRestShippingVendorControllerApiGetDeliveryTrackingRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeliveryTrackingResponse> {
            return localVarFp.getDeliveryTracking(requestParameters.deliveryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestShippingVendorControllerApiGetShippingVendorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingVendors(requestParameters: OpenCdxRestShippingVendorControllerApiGetShippingVendorsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShippingVendorResponse> {
            return localVarFp.getShippingVendors(requestParameters.shippingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestShippingVendorControllerApiShipPackageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shipPackage(requestParameters: OpenCdxRestShippingVendorControllerApiShipPackageRequest, options?: RawAxiosRequestConfig): AxiosPromise<ShippingResponse> {
            return localVarFp.shipPackage(requestParameters.shipping, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDeliveryTracking operation in OpenCdxRestShippingVendorControllerApi.
 * @export
 * @interface OpenCdxRestShippingVendorControllerApiCreateDeliveryTrackingRequest
 */
export interface OpenCdxRestShippingVendorControllerApiCreateDeliveryTrackingRequest {
    /**
     * 
     * @type {DeliveryTrackingRequest}
     * @memberof OpenCdxRestShippingVendorControllerApiCreateDeliveryTracking
     */
    readonly deliveryTrackingRequest: DeliveryTrackingRequest
}

/**
 * Request parameters for getDeliveryTracking operation in OpenCdxRestShippingVendorControllerApi.
 * @export
 * @interface OpenCdxRestShippingVendorControllerApiGetDeliveryTrackingRequest
 */
export interface OpenCdxRestShippingVendorControllerApiGetDeliveryTrackingRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestShippingVendorControllerApiGetDeliveryTracking
     */
    readonly deliveryId: string
}

/**
 * Request parameters for getShippingVendors operation in OpenCdxRestShippingVendorControllerApi.
 * @export
 * @interface OpenCdxRestShippingVendorControllerApiGetShippingVendorsRequest
 */
export interface OpenCdxRestShippingVendorControllerApiGetShippingVendorsRequest {
    /**
     * 
     * @type {ShippingRequest}
     * @memberof OpenCdxRestShippingVendorControllerApiGetShippingVendors
     */
    readonly shippingRequest: ShippingRequest
}

/**
 * Request parameters for shipPackage operation in OpenCdxRestShippingVendorControllerApi.
 * @export
 * @interface OpenCdxRestShippingVendorControllerApiShipPackageRequest
 */
export interface OpenCdxRestShippingVendorControllerApiShipPackageRequest {
    /**
     * 
     * @type {Shipping}
     * @memberof OpenCdxRestShippingVendorControllerApiShipPackage
     */
    readonly shipping: Shipping
}

/**
 * OpenCdxRestShippingVendorControllerApi - object-oriented interface
 * @export
 * @class OpenCdxRestShippingVendorControllerApi
 * @extends {BaseAPI}
 */
export class OpenCdxRestShippingVendorControllerApi extends BaseAPI {
    /**
     * 
     * @param {OpenCdxRestShippingVendorControllerApiCreateDeliveryTrackingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestShippingVendorControllerApi
     */
    public createDeliveryTracking(requestParameters: OpenCdxRestShippingVendorControllerApiCreateDeliveryTrackingRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestShippingVendorControllerApiFp(this.configuration).createDeliveryTracking(requestParameters.deliveryTrackingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestShippingVendorControllerApiGetDeliveryTrackingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestShippingVendorControllerApi
     */
    public getDeliveryTracking(requestParameters: OpenCdxRestShippingVendorControllerApiGetDeliveryTrackingRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestShippingVendorControllerApiFp(this.configuration).getDeliveryTracking(requestParameters.deliveryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestShippingVendorControllerApiGetShippingVendorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestShippingVendorControllerApi
     */
    public getShippingVendors(requestParameters: OpenCdxRestShippingVendorControllerApiGetShippingVendorsRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestShippingVendorControllerApiFp(this.configuration).getShippingVendors(requestParameters.shippingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestShippingVendorControllerApiShipPackageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestShippingVendorControllerApi
     */
    public shipPackage(requestParameters: OpenCdxRestShippingVendorControllerApiShipPackageRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestShippingVendorControllerApiFp(this.configuration).shipPackage(requestParameters.shipping, options).then((request) => request(this.axios, this.basePath));
    }
}

