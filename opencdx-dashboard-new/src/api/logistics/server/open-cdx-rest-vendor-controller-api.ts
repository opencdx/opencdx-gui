/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DeleteResponse } from '../model';
// @ts-ignore
import type { Vendor } from '../model';
// @ts-ignore
import type { VendorsListRequest } from '../model';
// @ts-ignore
import type { VendorsListResponse } from '../model';
/**
 * OpenCdxRestVendorControllerApi - axios parameter creator
 * @export
 */
export const OpenCdxRestVendorControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Vendor} vendor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVendor: async (vendor: Vendor, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vendor' is not null or undefined
            assertParamExists('addVendor', 'vendor', vendor)
            const localVarPath = `/vendor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vendor, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVendor: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteVendor', 'id', id)
            const localVarPath = `/vendor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVendorById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVendorById', 'id', id)
            const localVarPath = `/vendor/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {VendorsListRequest} vendorsListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVendors: async (vendorsListRequest: VendorsListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vendorsListRequest' is not null or undefined
            assertParamExists('listVendors', 'vendorsListRequest', vendorsListRequest)
            const localVarPath = `/vendor/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vendorsListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Vendor} vendor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVendor: async (vendor: Vendor, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'vendor' is not null or undefined
            assertParamExists('updateVendor', 'vendor', vendor)
            const localVarPath = `/vendor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vendor, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenCdxRestVendorControllerApi - functional programming interface
 * @export
 */
export const OpenCdxRestVendorControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenCdxRestVendorControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Vendor} vendor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addVendor(vendor: Vendor, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vendor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addVendor(vendor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestVendorControllerApi.addVendor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteVendor(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteVendor(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestVendorControllerApi.deleteVendor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVendorById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vendor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVendorById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestVendorControllerApi.getVendorById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {VendorsListRequest} vendorsListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVendors(vendorsListRequest: VendorsListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VendorsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVendors(vendorsListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestVendorControllerApi.listVendors']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Vendor} vendor 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVendor(vendor: Vendor, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Vendor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVendor(vendor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestVendorControllerApi.updateVendor']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpenCdxRestVendorControllerApi - factory interface
 * @export
 */
export const OpenCdxRestVendorControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenCdxRestVendorControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {OpenCdxRestVendorControllerApiAddVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addVendor(requestParameters: OpenCdxRestVendorControllerApiAddVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vendor> {
            return localVarFp.addVendor(requestParameters.vendor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestVendorControllerApiDeleteVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteVendor(requestParameters: OpenCdxRestVendorControllerApiDeleteVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteResponse> {
            return localVarFp.deleteVendor(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestVendorControllerApiGetVendorByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVendorById(requestParameters: OpenCdxRestVendorControllerApiGetVendorByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vendor> {
            return localVarFp.getVendorById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestVendorControllerApiListVendorsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVendors(requestParameters: OpenCdxRestVendorControllerApiListVendorsRequest, options?: RawAxiosRequestConfig): AxiosPromise<VendorsListResponse> {
            return localVarFp.listVendors(requestParameters.vendorsListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestVendorControllerApiUpdateVendorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVendor(requestParameters: OpenCdxRestVendorControllerApiUpdateVendorRequest, options?: RawAxiosRequestConfig): AxiosPromise<Vendor> {
            return localVarFp.updateVendor(requestParameters.vendor, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addVendor operation in OpenCdxRestVendorControllerApi.
 * @export
 * @interface OpenCdxRestVendorControllerApiAddVendorRequest
 */
export interface OpenCdxRestVendorControllerApiAddVendorRequest {
    /**
     * 
     * @type {Vendor}
     * @memberof OpenCdxRestVendorControllerApiAddVendor
     */
    readonly vendor: Vendor
}

/**
 * Request parameters for deleteVendor operation in OpenCdxRestVendorControllerApi.
 * @export
 * @interface OpenCdxRestVendorControllerApiDeleteVendorRequest
 */
export interface OpenCdxRestVendorControllerApiDeleteVendorRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestVendorControllerApiDeleteVendor
     */
    readonly id: string
}

/**
 * Request parameters for getVendorById operation in OpenCdxRestVendorControllerApi.
 * @export
 * @interface OpenCdxRestVendorControllerApiGetVendorByIdRequest
 */
export interface OpenCdxRestVendorControllerApiGetVendorByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestVendorControllerApiGetVendorById
     */
    readonly id: string
}

/**
 * Request parameters for listVendors operation in OpenCdxRestVendorControllerApi.
 * @export
 * @interface OpenCdxRestVendorControllerApiListVendorsRequest
 */
export interface OpenCdxRestVendorControllerApiListVendorsRequest {
    /**
     * 
     * @type {VendorsListRequest}
     * @memberof OpenCdxRestVendorControllerApiListVendors
     */
    readonly vendorsListRequest: VendorsListRequest
}

/**
 * Request parameters for updateVendor operation in OpenCdxRestVendorControllerApi.
 * @export
 * @interface OpenCdxRestVendorControllerApiUpdateVendorRequest
 */
export interface OpenCdxRestVendorControllerApiUpdateVendorRequest {
    /**
     * 
     * @type {Vendor}
     * @memberof OpenCdxRestVendorControllerApiUpdateVendor
     */
    readonly vendor: Vendor
}

/**
 * OpenCdxRestVendorControllerApi - object-oriented interface
 * @export
 * @class OpenCdxRestVendorControllerApi
 * @extends {BaseAPI}
 */
export class OpenCdxRestVendorControllerApi extends BaseAPI {
    /**
     * 
     * @param {OpenCdxRestVendorControllerApiAddVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestVendorControllerApi
     */
    public addVendor(requestParameters: OpenCdxRestVendorControllerApiAddVendorRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestVendorControllerApiFp(this.configuration).addVendor(requestParameters.vendor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestVendorControllerApiDeleteVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestVendorControllerApi
     */
    public deleteVendor(requestParameters: OpenCdxRestVendorControllerApiDeleteVendorRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestVendorControllerApiFp(this.configuration).deleteVendor(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestVendorControllerApiGetVendorByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestVendorControllerApi
     */
    public getVendorById(requestParameters: OpenCdxRestVendorControllerApiGetVendorByIdRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestVendorControllerApiFp(this.configuration).getVendorById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestVendorControllerApiListVendorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestVendorControllerApi
     */
    public listVendors(requestParameters: OpenCdxRestVendorControllerApiListVendorsRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestVendorControllerApiFp(this.configuration).listVendors(requestParameters.vendorsListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestVendorControllerApiUpdateVendorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestVendorControllerApi
     */
    public updateVendor(requestParameters: OpenCdxRestVendorControllerApiUpdateVendorRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestVendorControllerApiFp(this.configuration).updateVendor(requestParameters.vendor, options).then((request) => request(this.axios, this.basePath));
    }
}

