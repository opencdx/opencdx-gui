/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { Country } from '../model';
// @ts-ignore
import type { CountryListRequest } from '../model';
// @ts-ignore
import type { CountryListResponse } from '../model';
// @ts-ignore
import type { DeleteResponse } from '../model';
/**
 * OpenCdxRestCountryControllerApi - axios parameter creator
 * @export
 */
export const OpenCdxRestCountryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Country} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCountry: async (country: Country, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('addCountry', 'country', country)
            const localVarPath = `/country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(country, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCountry: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCountry', 'id', id)
            const localVarPath = `/country/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getCountryById', 'id', id)
            const localVarPath = `/country/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CountryListRequest} countryListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCountries1: async (countryListRequest: CountryListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'countryListRequest' is not null or undefined
            assertParamExists('listCountries1', 'countryListRequest', countryListRequest)
            const localVarPath = `/country/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(countryListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Country} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCountry: async (country: Country, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'country' is not null or undefined
            assertParamExists('updateCountry', 'country', country)
            const localVarPath = `/country`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(country, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenCdxRestCountryControllerApi - functional programming interface
 * @export
 */
export const OpenCdxRestCountryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenCdxRestCountryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Country} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCountry(country: Country, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCountry(country, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCountryControllerApi.addCountry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCountry(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCountry(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCountryControllerApi.deleteCountry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCountryById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCountryById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCountryControllerApi.getCountryById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CountryListRequest} countryListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCountries1(countryListRequest: CountryListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CountryListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCountries1(countryListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCountryControllerApi.listCountries1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Country} country 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCountry(country: Country, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Country>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCountry(country, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCountryControllerApi.updateCountry']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpenCdxRestCountryControllerApi - factory interface
 * @export
 */
export const OpenCdxRestCountryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenCdxRestCountryControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {OpenCdxRestCountryControllerApiAddCountryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCountry(requestParameters: OpenCdxRestCountryControllerApiAddCountryRequest, options?: RawAxiosRequestConfig): AxiosPromise<Country> {
            return localVarFp.addCountry(requestParameters.country, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCountryControllerApiDeleteCountryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCountry(requestParameters: OpenCdxRestCountryControllerApiDeleteCountryRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteResponse> {
            return localVarFp.deleteCountry(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCountryControllerApiGetCountryByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountryById(requestParameters: OpenCdxRestCountryControllerApiGetCountryByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Country> {
            return localVarFp.getCountryById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCountryControllerApiListCountries1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCountries1(requestParameters: OpenCdxRestCountryControllerApiListCountries1Request, options?: RawAxiosRequestConfig): AxiosPromise<CountryListResponse> {
            return localVarFp.listCountries1(requestParameters.countryListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCountryControllerApiUpdateCountryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCountry(requestParameters: OpenCdxRestCountryControllerApiUpdateCountryRequest, options?: RawAxiosRequestConfig): AxiosPromise<Country> {
            return localVarFp.updateCountry(requestParameters.country, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addCountry operation in OpenCdxRestCountryControllerApi.
 * @export
 * @interface OpenCdxRestCountryControllerApiAddCountryRequest
 */
export interface OpenCdxRestCountryControllerApiAddCountryRequest {
    /**
     * 
     * @type {Country}
     * @memberof OpenCdxRestCountryControllerApiAddCountry
     */
    readonly country: Country
}

/**
 * Request parameters for deleteCountry operation in OpenCdxRestCountryControllerApi.
 * @export
 * @interface OpenCdxRestCountryControllerApiDeleteCountryRequest
 */
export interface OpenCdxRestCountryControllerApiDeleteCountryRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestCountryControllerApiDeleteCountry
     */
    readonly id: string
}

/**
 * Request parameters for getCountryById operation in OpenCdxRestCountryControllerApi.
 * @export
 * @interface OpenCdxRestCountryControllerApiGetCountryByIdRequest
 */
export interface OpenCdxRestCountryControllerApiGetCountryByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestCountryControllerApiGetCountryById
     */
    readonly id: string
}

/**
 * Request parameters for listCountries1 operation in OpenCdxRestCountryControllerApi.
 * @export
 * @interface OpenCdxRestCountryControllerApiListCountries1Request
 */
export interface OpenCdxRestCountryControllerApiListCountries1Request {
    /**
     * 
     * @type {CountryListRequest}
     * @memberof OpenCdxRestCountryControllerApiListCountries1
     */
    readonly countryListRequest: CountryListRequest
}

/**
 * Request parameters for updateCountry operation in OpenCdxRestCountryControllerApi.
 * @export
 * @interface OpenCdxRestCountryControllerApiUpdateCountryRequest
 */
export interface OpenCdxRestCountryControllerApiUpdateCountryRequest {
    /**
     * 
     * @type {Country}
     * @memberof OpenCdxRestCountryControllerApiUpdateCountry
     */
    readonly country: Country
}

/**
 * OpenCdxRestCountryControllerApi - object-oriented interface
 * @export
 * @class OpenCdxRestCountryControllerApi
 * @extends {BaseAPI}
 */
export class OpenCdxRestCountryControllerApi extends BaseAPI {
    /**
     * 
     * @param {OpenCdxRestCountryControllerApiAddCountryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCountryControllerApi
     */
    public addCountry(requestParameters: OpenCdxRestCountryControllerApiAddCountryRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCountryControllerApiFp(this.configuration).addCountry(requestParameters.country, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCountryControllerApiDeleteCountryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCountryControllerApi
     */
    public deleteCountry(requestParameters: OpenCdxRestCountryControllerApiDeleteCountryRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCountryControllerApiFp(this.configuration).deleteCountry(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCountryControllerApiGetCountryByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCountryControllerApi
     */
    public getCountryById(requestParameters: OpenCdxRestCountryControllerApiGetCountryByIdRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCountryControllerApiFp(this.configuration).getCountryById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCountryControllerApiListCountries1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCountryControllerApi
     */
    public listCountries1(requestParameters: OpenCdxRestCountryControllerApiListCountries1Request, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCountryControllerApiFp(this.configuration).listCountries1(requestParameters.countryListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCountryControllerApiUpdateCountryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCountryControllerApi
     */
    public updateCountry(requestParameters: OpenCdxRestCountryControllerApiUpdateCountryRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCountryControllerApiFp(this.configuration).updateCountry(requestParameters.country, options).then((request) => request(this.axios, this.basePath));
    }
}

