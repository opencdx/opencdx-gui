/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DeleteResponse } from '../model';
// @ts-ignore
import type { Manufacturer } from '../model';
// @ts-ignore
import type { ManufacturerListRequest } from '../model';
// @ts-ignore
import type { ManufacturersListResponse } from '../model';
/**
 * OpenCdxRestManufacturerControllerApi - axios parameter creator
 * @export
 */
export const OpenCdxRestManufacturerControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {Manufacturer} manufacturer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addManufacturer: async (manufacturer: Manufacturer, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'manufacturer' is not null or undefined
            assertParamExists('addManufacturer', 'manufacturer', manufacturer)
            const localVarPath = `/manufacturer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(manufacturer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteManufacturer: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteManufacturer', 'id', id)
            const localVarPath = `/manufacturer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManufacturerById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getManufacturerById', 'id', id)
            const localVarPath = `/manufacturer/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ManufacturerListRequest} manufacturerListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCountries: async (manufacturerListRequest: ManufacturerListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'manufacturerListRequest' is not null or undefined
            assertParamExists('listCountries', 'manufacturerListRequest', manufacturerListRequest)
            const localVarPath = `/manufacturer/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(manufacturerListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Manufacturer} manufacturer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateManufacturer: async (manufacturer: Manufacturer, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'manufacturer' is not null or undefined
            assertParamExists('updateManufacturer', 'manufacturer', manufacturer)
            const localVarPath = `/manufacturer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(manufacturer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenCdxRestManufacturerControllerApi - functional programming interface
 * @export
 */
export const OpenCdxRestManufacturerControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenCdxRestManufacturerControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {Manufacturer} manufacturer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addManufacturer(manufacturer: Manufacturer, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Manufacturer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addManufacturer(manufacturer, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestManufacturerControllerApi.addManufacturer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteManufacturer(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteManufacturer(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestManufacturerControllerApi.deleteManufacturer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getManufacturerById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Manufacturer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getManufacturerById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestManufacturerControllerApi.getManufacturerById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ManufacturerListRequest} manufacturerListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCountries(manufacturerListRequest: ManufacturerListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ManufacturersListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCountries(manufacturerListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestManufacturerControllerApi.listCountries']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Manufacturer} manufacturer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateManufacturer(manufacturer: Manufacturer, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Manufacturer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateManufacturer(manufacturer, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestManufacturerControllerApi.updateManufacturer']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpenCdxRestManufacturerControllerApi - factory interface
 * @export
 */
export const OpenCdxRestManufacturerControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenCdxRestManufacturerControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {OpenCdxRestManufacturerControllerApiAddManufacturerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addManufacturer(requestParameters: OpenCdxRestManufacturerControllerApiAddManufacturerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Manufacturer> {
            return localVarFp.addManufacturer(requestParameters.manufacturer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestManufacturerControllerApiDeleteManufacturerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteManufacturer(requestParameters: OpenCdxRestManufacturerControllerApiDeleteManufacturerRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteResponse> {
            return localVarFp.deleteManufacturer(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestManufacturerControllerApiGetManufacturerByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getManufacturerById(requestParameters: OpenCdxRestManufacturerControllerApiGetManufacturerByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<Manufacturer> {
            return localVarFp.getManufacturerById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestManufacturerControllerApiListCountriesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCountries(requestParameters: OpenCdxRestManufacturerControllerApiListCountriesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ManufacturersListResponse> {
            return localVarFp.listCountries(requestParameters.manufacturerListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestManufacturerControllerApiUpdateManufacturerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateManufacturer(requestParameters: OpenCdxRestManufacturerControllerApiUpdateManufacturerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Manufacturer> {
            return localVarFp.updateManufacturer(requestParameters.manufacturer, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addManufacturer operation in OpenCdxRestManufacturerControllerApi.
 * @export
 * @interface OpenCdxRestManufacturerControllerApiAddManufacturerRequest
 */
export interface OpenCdxRestManufacturerControllerApiAddManufacturerRequest {
    /**
     * 
     * @type {Manufacturer}
     * @memberof OpenCdxRestManufacturerControllerApiAddManufacturer
     */
    readonly manufacturer: Manufacturer
}

/**
 * Request parameters for deleteManufacturer operation in OpenCdxRestManufacturerControllerApi.
 * @export
 * @interface OpenCdxRestManufacturerControllerApiDeleteManufacturerRequest
 */
export interface OpenCdxRestManufacturerControllerApiDeleteManufacturerRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestManufacturerControllerApiDeleteManufacturer
     */
    readonly id: string
}

/**
 * Request parameters for getManufacturerById operation in OpenCdxRestManufacturerControllerApi.
 * @export
 * @interface OpenCdxRestManufacturerControllerApiGetManufacturerByIdRequest
 */
export interface OpenCdxRestManufacturerControllerApiGetManufacturerByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestManufacturerControllerApiGetManufacturerById
     */
    readonly id: string
}

/**
 * Request parameters for listCountries operation in OpenCdxRestManufacturerControllerApi.
 * @export
 * @interface OpenCdxRestManufacturerControllerApiListCountriesRequest
 */
export interface OpenCdxRestManufacturerControllerApiListCountriesRequest {
    /**
     * 
     * @type {ManufacturerListRequest}
     * @memberof OpenCdxRestManufacturerControllerApiListCountries
     */
    readonly manufacturerListRequest: ManufacturerListRequest
}

/**
 * Request parameters for updateManufacturer operation in OpenCdxRestManufacturerControllerApi.
 * @export
 * @interface OpenCdxRestManufacturerControllerApiUpdateManufacturerRequest
 */
export interface OpenCdxRestManufacturerControllerApiUpdateManufacturerRequest {
    /**
     * 
     * @type {Manufacturer}
     * @memberof OpenCdxRestManufacturerControllerApiUpdateManufacturer
     */
    readonly manufacturer: Manufacturer
}

/**
 * OpenCdxRestManufacturerControllerApi - object-oriented interface
 * @export
 * @class OpenCdxRestManufacturerControllerApi
 * @extends {BaseAPI}
 */
export class OpenCdxRestManufacturerControllerApi extends BaseAPI {
    /**
     * 
     * @param {OpenCdxRestManufacturerControllerApiAddManufacturerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestManufacturerControllerApi
     */
    public addManufacturer(requestParameters: OpenCdxRestManufacturerControllerApiAddManufacturerRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestManufacturerControllerApiFp(this.configuration).addManufacturer(requestParameters.manufacturer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestManufacturerControllerApiDeleteManufacturerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestManufacturerControllerApi
     */
    public deleteManufacturer(requestParameters: OpenCdxRestManufacturerControllerApiDeleteManufacturerRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestManufacturerControllerApiFp(this.configuration).deleteManufacturer(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestManufacturerControllerApiGetManufacturerByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestManufacturerControllerApi
     */
    public getManufacturerById(requestParameters: OpenCdxRestManufacturerControllerApiGetManufacturerByIdRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestManufacturerControllerApiFp(this.configuration).getManufacturerById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestManufacturerControllerApiListCountriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestManufacturerControllerApi
     */
    public listCountries(requestParameters: OpenCdxRestManufacturerControllerApiListCountriesRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestManufacturerControllerApiFp(this.configuration).listCountries(requestParameters.manufacturerListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestManufacturerControllerApiUpdateManufacturerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestManufacturerControllerApi
     */
    public updateManufacturer(requestParameters: OpenCdxRestManufacturerControllerApiUpdateManufacturerRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestManufacturerControllerApiFp(this.configuration).updateManufacturer(requestParameters.manufacturer, options).then((request) => request(this.axios, this.basePath));
    }
}

