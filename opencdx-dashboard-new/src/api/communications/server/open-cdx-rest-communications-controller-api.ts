/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { EmailTemplate } from '../model';
// @ts-ignore
import type { EmailTemplateListRequest } from '../model';
// @ts-ignore
import type { EmailTemplateListResponse } from '../model';
// @ts-ignore
import type { GetMessagesRequest } from '../model';
// @ts-ignore
import type { GetMessagesResponse } from '../model';
// @ts-ignore
import type { MarkMessagesAsReadRequest } from '../model';
// @ts-ignore
import type { MarkMessagesAsReadResponse } from '../model';
// @ts-ignore
import type { MarkMessagesAsUnreadRequest } from '../model';
// @ts-ignore
import type { MarkMessagesAsUnreadResponse } from '../model';
// @ts-ignore
import type { MessageTemplate } from '../model';
// @ts-ignore
import type { MessageTemplateListResponse } from '../model';
// @ts-ignore
import type { Notification } from '../model';
// @ts-ignore
import type { NotificationEvent } from '../model';
// @ts-ignore
import type { NotificationEventListRequest } from '../model';
// @ts-ignore
import type { NotificationEventListResponse } from '../model';
// @ts-ignore
import type { Pagination } from '../model';
// @ts-ignore
import type { SMSTemplate } from '../model';
// @ts-ignore
import type { SMSTemplateListRequest } from '../model';
// @ts-ignore
import type { SMSTemplateListResponse } from '../model';
// @ts-ignore
import type { SuccessResponse } from '../model';
// @ts-ignore
import type { TemplateRequest } from '../model';
/**
 * OpenCdxRestCommunicationsControllerApi - axios parameter creator
 * @export
 */
export const OpenCdxRestCommunicationsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {EmailTemplate} emailTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailTemplate: async (emailTemplate: EmailTemplate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailTemplate' is not null or undefined
            assertParamExists('createEmailTemplate', 'emailTemplate', emailTemplate)
            const localVarPath = `/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MessageTemplate} messageTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageTemplate: async (messageTemplate: MessageTemplate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageTemplate' is not null or undefined
            assertParamExists('createMessageTemplate', 'messageTemplate', messageTemplate)
            const localVarPath = `/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NotificationEvent} notificationEvent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotificationEvent: async (notificationEvent: NotificationEvent, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationEvent' is not null or undefined
            assertParamExists('createNotificationEvent', 'notificationEvent', notificationEvent)
            const localVarPath = `/event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationEvent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SMSTemplate} sMSTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSMSTemplate: async (sMSTemplate: SMSTemplate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sMSTemplate' is not null or undefined
            assertParamExists('createSMSTemplate', 'sMSTemplate', sMSTemplate)
            const localVarPath = `/sms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sMSTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailTemplate: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteEmailTemplate', 'id', id)
            const localVarPath = `/email/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessageTemplate: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteMessageTemplate', 'id', id)
            const localVarPath = `/message/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotificationEvent: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteNotificationEvent', 'id', id)
            const localVarPath = `/event/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSMSTemplate: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteSMSTemplate', 'id', id)
            const localVarPath = `/sms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplate: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEmailTemplate', 'id', id)
            const localVarPath = `/email/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TemplateRequest} templateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageTemplate: async (templateRequest: TemplateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateRequest' is not null or undefined
            assertParamExists('getMessageTemplate', 'templateRequest', templateRequest)
            const localVarPath = `/messageTemplate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (templateRequest !== undefined) {
                for (const [key, value] of Object.entries(templateRequest)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GetMessagesRequest} getMessagesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessages: async (getMessagesRequest: GetMessagesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'getMessagesRequest' is not null or undefined
            assertParamExists('getMessages', 'getMessagesRequest', getMessagesRequest)
            const localVarPath = `/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getMessagesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationEvent: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNotificationEvent', 'id', id)
            const localVarPath = `/event/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSMSTemplate: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getSMSTemplate', 'id', id)
            const localVarPath = `/sms/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmailTemplateListRequest} emailTemplateListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmailTemplates: async (emailTemplateListRequest: EmailTemplateListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailTemplateListRequest' is not null or undefined
            assertParamExists('listEmailTemplates', 'emailTemplateListRequest', emailTemplateListRequest)
            const localVarPath = `/email/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailTemplateListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Pagination} pagination 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessageTemplates: async (pagination: Pagination, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pagination' is not null or undefined
            assertParamExists('listMessageTemplates', 'pagination', pagination)
            const localVarPath = `/message/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pagination, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NotificationEventListRequest} notificationEventListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNotificationEvents: async (notificationEventListRequest: NotificationEventListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationEventListRequest' is not null or undefined
            assertParamExists('listNotificationEvents', 'notificationEventListRequest', notificationEventListRequest)
            const localVarPath = `/event/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationEventListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SMSTemplateListRequest} sMSTemplateListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSMSTemplates: async (sMSTemplateListRequest: SMSTemplateListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sMSTemplateListRequest' is not null or undefined
            assertParamExists('listSMSTemplates', 'sMSTemplateListRequest', sMSTemplateListRequest)
            const localVarPath = `/sms/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sMSTemplateListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MarkMessagesAsReadRequest} markMessagesAsReadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsRead: async (markMessagesAsReadRequest: MarkMessagesAsReadRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'markMessagesAsReadRequest' is not null or undefined
            assertParamExists('markMessageAsRead', 'markMessagesAsReadRequest', markMessagesAsReadRequest)
            const localVarPath = `/message/read`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(markMessagesAsReadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MarkMessagesAsUnreadRequest} markMessagesAsUnreadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsUnread: async (markMessagesAsUnreadRequest: MarkMessagesAsUnreadRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'markMessagesAsUnreadRequest' is not null or undefined
            assertParamExists('markMessageAsUnread', 'markMessagesAsUnreadRequest', markMessagesAsUnreadRequest)
            const localVarPath = `/message/unread`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(markMessagesAsUnreadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNotification: async (notification: Notification, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notification' is not null or undefined
            assertParamExists('sendNotification', 'notification', notification)
            const localVarPath = `/notification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notification, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {EmailTemplate} emailTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailTemplate: async (emailTemplate: EmailTemplate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'emailTemplate' is not null or undefined
            assertParamExists('updateEmailTemplate', 'emailTemplate', emailTemplate)
            const localVarPath = `/email`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(emailTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {MessageTemplate} messageTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageTemplate: async (messageTemplate: MessageTemplate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'messageTemplate' is not null or undefined
            assertParamExists('updateMessageTemplate', 'messageTemplate', messageTemplate)
            const localVarPath = `/message`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(messageTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {NotificationEvent} notificationEvent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationEvent: async (notificationEvent: NotificationEvent, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationEvent' is not null or undefined
            assertParamExists('updateNotificationEvent', 'notificationEvent', notificationEvent)
            const localVarPath = `/event`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(notificationEvent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SMSTemplate} sMSTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSMSTemplate: async (sMSTemplate: SMSTemplate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sMSTemplate' is not null or undefined
            assertParamExists('updateSMSTemplate', 'sMSTemplate', sMSTemplate)
            const localVarPath = `/sms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sMSTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenCdxRestCommunicationsControllerApi - functional programming interface
 * @export
 */
export const OpenCdxRestCommunicationsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenCdxRestCommunicationsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {EmailTemplate} emailTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmailTemplate(emailTemplate: EmailTemplate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmailTemplate(emailTemplate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.createEmailTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MessageTemplate} messageTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMessageTemplate(messageTemplate: MessageTemplate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMessageTemplate(messageTemplate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.createMessageTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {NotificationEvent} notificationEvent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNotificationEvent(notificationEvent: NotificationEvent, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNotificationEvent(notificationEvent, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.createNotificationEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SMSTemplate} sMSTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSMSTemplate(sMSTemplate: SMSTemplate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SMSTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSMSTemplate(sMSTemplate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.createSMSTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEmailTemplate(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteEmailTemplate(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.deleteEmailTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMessageTemplate(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMessageTemplate(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.deleteMessageTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNotificationEvent(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNotificationEvent(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.deleteNotificationEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSMSTemplate(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSMSTemplate(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.deleteSMSTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailTemplate(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailTemplate(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.getEmailTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TemplateRequest} templateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessageTemplate(templateRequest: TemplateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessageTemplate(templateRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.getMessageTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {GetMessagesRequest} getMessagesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessages(getMessagesRequest: GetMessagesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMessagesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessages(getMessagesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.getMessages']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotificationEvent(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotificationEvent(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.getNotificationEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSMSTemplate(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SMSTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSMSTemplate(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.getSMSTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {EmailTemplateListRequest} emailTemplateListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEmailTemplates(emailTemplateListRequest: EmailTemplateListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailTemplateListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEmailTemplates(emailTemplateListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.listEmailTemplates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Pagination} pagination 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMessageTemplates(pagination: Pagination, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplateListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listMessageTemplates(pagination, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.listMessageTemplates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {NotificationEventListRequest} notificationEventListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listNotificationEvents(notificationEventListRequest: NotificationEventListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationEventListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listNotificationEvents(notificationEventListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.listNotificationEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SMSTemplateListRequest} sMSTemplateListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSMSTemplates(sMSTemplateListRequest: SMSTemplateListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SMSTemplateListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSMSTemplates(sMSTemplateListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.listSMSTemplates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MarkMessagesAsReadRequest} markMessagesAsReadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markMessageAsRead(markMessagesAsReadRequest: MarkMessagesAsReadRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarkMessagesAsReadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markMessageAsRead(markMessagesAsReadRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.markMessageAsRead']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MarkMessagesAsUnreadRequest} markMessagesAsUnreadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markMessageAsUnread(markMessagesAsUnreadRequest: MarkMessagesAsUnreadRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MarkMessagesAsUnreadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markMessageAsUnread(markMessagesAsUnreadRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.markMessageAsUnread']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {Notification} notification 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendNotification(notification: Notification, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendNotification(notification, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.sendNotification']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {EmailTemplate} emailTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEmailTemplate(emailTemplate: EmailTemplate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEmailTemplate(emailTemplate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.updateEmailTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {MessageTemplate} messageTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMessageTemplate(messageTemplate: MessageTemplate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMessageTemplate(messageTemplate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.updateMessageTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {NotificationEvent} notificationEvent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNotificationEvent(notificationEvent: NotificationEvent, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NotificationEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNotificationEvent(notificationEvent, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.updateNotificationEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SMSTemplate} sMSTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSMSTemplate(sMSTemplate: SMSTemplate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SMSTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSMSTemplate(sMSTemplate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestCommunicationsControllerApi.updateSMSTemplate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpenCdxRestCommunicationsControllerApi - factory interface
 * @export
 */
export const OpenCdxRestCommunicationsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenCdxRestCommunicationsControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiCreateEmailTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiCreateEmailTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmailTemplate> {
            return localVarFp.createEmailTemplate(requestParameters.emailTemplate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiCreateMessageTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMessageTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiCreateMessageTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<MessageTemplate> {
            return localVarFp.createMessageTemplate(requestParameters.messageTemplate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiCreateNotificationEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotificationEvent(requestParameters: OpenCdxRestCommunicationsControllerApiCreateNotificationEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<NotificationEvent> {
            return localVarFp.createNotificationEvent(requestParameters.notificationEvent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiCreateSMSTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSMSTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiCreateSMSTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<SMSTemplate> {
            return localVarFp.createSMSTemplate(requestParameters.sMSTemplate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiDeleteEmailTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEmailTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiDeleteEmailTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.deleteEmailTemplate(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiDeleteMessageTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMessageTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiDeleteMessageTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.deleteMessageTemplate(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiDeleteNotificationEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotificationEvent(requestParameters: OpenCdxRestCommunicationsControllerApiDeleteNotificationEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.deleteNotificationEvent(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiDeleteSMSTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSMSTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiDeleteSMSTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.deleteSMSTemplate(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiGetEmailTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiGetEmailTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmailTemplate> {
            return localVarFp.getEmailTemplate(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiGetMessageTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessageTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiGetMessageTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<MessageTemplate> {
            return localVarFp.getMessageTemplate(requestParameters.templateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiGetMessagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessages(requestParameters: OpenCdxRestCommunicationsControllerApiGetMessagesRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetMessagesResponse> {
            return localVarFp.getMessages(requestParameters.getMessagesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiGetNotificationEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotificationEvent(requestParameters: OpenCdxRestCommunicationsControllerApiGetNotificationEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<NotificationEvent> {
            return localVarFp.getNotificationEvent(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiGetSMSTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSMSTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiGetSMSTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<SMSTemplate> {
            return localVarFp.getSMSTemplate(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiListEmailTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEmailTemplates(requestParameters: OpenCdxRestCommunicationsControllerApiListEmailTemplatesRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmailTemplateListResponse> {
            return localVarFp.listEmailTemplates(requestParameters.emailTemplateListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiListMessageTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMessageTemplates(requestParameters: OpenCdxRestCommunicationsControllerApiListMessageTemplatesRequest, options?: RawAxiosRequestConfig): AxiosPromise<MessageTemplateListResponse> {
            return localVarFp.listMessageTemplates(requestParameters.pagination, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiListNotificationEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listNotificationEvents(requestParameters: OpenCdxRestCommunicationsControllerApiListNotificationEventsRequest, options?: RawAxiosRequestConfig): AxiosPromise<NotificationEventListResponse> {
            return localVarFp.listNotificationEvents(requestParameters.notificationEventListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiListSMSTemplatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSMSTemplates(requestParameters: OpenCdxRestCommunicationsControllerApiListSMSTemplatesRequest, options?: RawAxiosRequestConfig): AxiosPromise<SMSTemplateListResponse> {
            return localVarFp.listSMSTemplates(requestParameters.sMSTemplateListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiMarkMessageAsReadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsRead(requestParameters: OpenCdxRestCommunicationsControllerApiMarkMessageAsReadRequest, options?: RawAxiosRequestConfig): AxiosPromise<MarkMessagesAsReadResponse> {
            return localVarFp.markMessageAsRead(requestParameters.markMessagesAsReadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiMarkMessageAsUnreadRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markMessageAsUnread(requestParameters: OpenCdxRestCommunicationsControllerApiMarkMessageAsUnreadRequest, options?: RawAxiosRequestConfig): AxiosPromise<MarkMessagesAsUnreadResponse> {
            return localVarFp.markMessageAsUnread(requestParameters.markMessagesAsUnreadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiSendNotificationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendNotification(requestParameters: OpenCdxRestCommunicationsControllerApiSendNotificationRequest, options?: RawAxiosRequestConfig): AxiosPromise<SuccessResponse> {
            return localVarFp.sendNotification(requestParameters.notification, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiUpdateEmailTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEmailTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiUpdateEmailTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<EmailTemplate> {
            return localVarFp.updateEmailTemplate(requestParameters.emailTemplate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiUpdateMessageTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMessageTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiUpdateMessageTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<MessageTemplate> {
            return localVarFp.updateMessageTemplate(requestParameters.messageTemplate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiUpdateNotificationEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNotificationEvent(requestParameters: OpenCdxRestCommunicationsControllerApiUpdateNotificationEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<NotificationEvent> {
            return localVarFp.updateNotificationEvent(requestParameters.notificationEvent, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestCommunicationsControllerApiUpdateSMSTemplateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSMSTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiUpdateSMSTemplateRequest, options?: RawAxiosRequestConfig): AxiosPromise<SMSTemplate> {
            return localVarFp.updateSMSTemplate(requestParameters.sMSTemplate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createEmailTemplate operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiCreateEmailTemplateRequest
 */
export interface OpenCdxRestCommunicationsControllerApiCreateEmailTemplateRequest {
    /**
     * 
     * @type {EmailTemplate}
     * @memberof OpenCdxRestCommunicationsControllerApiCreateEmailTemplate
     */
    readonly emailTemplate: EmailTemplate
}

/**
 * Request parameters for createMessageTemplate operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiCreateMessageTemplateRequest
 */
export interface OpenCdxRestCommunicationsControllerApiCreateMessageTemplateRequest {
    /**
     * 
     * @type {MessageTemplate}
     * @memberof OpenCdxRestCommunicationsControllerApiCreateMessageTemplate
     */
    readonly messageTemplate: MessageTemplate
}

/**
 * Request parameters for createNotificationEvent operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiCreateNotificationEventRequest
 */
export interface OpenCdxRestCommunicationsControllerApiCreateNotificationEventRequest {
    /**
     * 
     * @type {NotificationEvent}
     * @memberof OpenCdxRestCommunicationsControllerApiCreateNotificationEvent
     */
    readonly notificationEvent: NotificationEvent
}

/**
 * Request parameters for createSMSTemplate operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiCreateSMSTemplateRequest
 */
export interface OpenCdxRestCommunicationsControllerApiCreateSMSTemplateRequest {
    /**
     * 
     * @type {SMSTemplate}
     * @memberof OpenCdxRestCommunicationsControllerApiCreateSMSTemplate
     */
    readonly sMSTemplate: SMSTemplate
}

/**
 * Request parameters for deleteEmailTemplate operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiDeleteEmailTemplateRequest
 */
export interface OpenCdxRestCommunicationsControllerApiDeleteEmailTemplateRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestCommunicationsControllerApiDeleteEmailTemplate
     */
    readonly id: string
}

/**
 * Request parameters for deleteMessageTemplate operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiDeleteMessageTemplateRequest
 */
export interface OpenCdxRestCommunicationsControllerApiDeleteMessageTemplateRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestCommunicationsControllerApiDeleteMessageTemplate
     */
    readonly id: string
}

/**
 * Request parameters for deleteNotificationEvent operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiDeleteNotificationEventRequest
 */
export interface OpenCdxRestCommunicationsControllerApiDeleteNotificationEventRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestCommunicationsControllerApiDeleteNotificationEvent
     */
    readonly id: string
}

/**
 * Request parameters for deleteSMSTemplate operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiDeleteSMSTemplateRequest
 */
export interface OpenCdxRestCommunicationsControllerApiDeleteSMSTemplateRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestCommunicationsControllerApiDeleteSMSTemplate
     */
    readonly id: string
}

/**
 * Request parameters for getEmailTemplate operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiGetEmailTemplateRequest
 */
export interface OpenCdxRestCommunicationsControllerApiGetEmailTemplateRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestCommunicationsControllerApiGetEmailTemplate
     */
    readonly id: string
}

/**
 * Request parameters for getMessageTemplate operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiGetMessageTemplateRequest
 */
export interface OpenCdxRestCommunicationsControllerApiGetMessageTemplateRequest {
    /**
     * 
     * @type {TemplateRequest}
     * @memberof OpenCdxRestCommunicationsControllerApiGetMessageTemplate
     */
    readonly templateRequest: TemplateRequest
}

/**
 * Request parameters for getMessages operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiGetMessagesRequest
 */
export interface OpenCdxRestCommunicationsControllerApiGetMessagesRequest {
    /**
     * 
     * @type {GetMessagesRequest}
     * @memberof OpenCdxRestCommunicationsControllerApiGetMessages
     */
    readonly getMessagesRequest: GetMessagesRequest
}

/**
 * Request parameters for getNotificationEvent operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiGetNotificationEventRequest
 */
export interface OpenCdxRestCommunicationsControllerApiGetNotificationEventRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestCommunicationsControllerApiGetNotificationEvent
     */
    readonly id: string
}

/**
 * Request parameters for getSMSTemplate operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiGetSMSTemplateRequest
 */
export interface OpenCdxRestCommunicationsControllerApiGetSMSTemplateRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestCommunicationsControllerApiGetSMSTemplate
     */
    readonly id: string
}

/**
 * Request parameters for listEmailTemplates operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiListEmailTemplatesRequest
 */
export interface OpenCdxRestCommunicationsControllerApiListEmailTemplatesRequest {
    /**
     * 
     * @type {EmailTemplateListRequest}
     * @memberof OpenCdxRestCommunicationsControllerApiListEmailTemplates
     */
    readonly emailTemplateListRequest: EmailTemplateListRequest
}

/**
 * Request parameters for listMessageTemplates operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiListMessageTemplatesRequest
 */
export interface OpenCdxRestCommunicationsControllerApiListMessageTemplatesRequest {
    /**
     * 
     * @type {Pagination}
     * @memberof OpenCdxRestCommunicationsControllerApiListMessageTemplates
     */
    readonly pagination: Pagination
}

/**
 * Request parameters for listNotificationEvents operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiListNotificationEventsRequest
 */
export interface OpenCdxRestCommunicationsControllerApiListNotificationEventsRequest {
    /**
     * 
     * @type {NotificationEventListRequest}
     * @memberof OpenCdxRestCommunicationsControllerApiListNotificationEvents
     */
    readonly notificationEventListRequest: NotificationEventListRequest
}

/**
 * Request parameters for listSMSTemplates operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiListSMSTemplatesRequest
 */
export interface OpenCdxRestCommunicationsControllerApiListSMSTemplatesRequest {
    /**
     * 
     * @type {SMSTemplateListRequest}
     * @memberof OpenCdxRestCommunicationsControllerApiListSMSTemplates
     */
    readonly sMSTemplateListRequest: SMSTemplateListRequest
}

/**
 * Request parameters for markMessageAsRead operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiMarkMessageAsReadRequest
 */
export interface OpenCdxRestCommunicationsControllerApiMarkMessageAsReadRequest {
    /**
     * 
     * @type {MarkMessagesAsReadRequest}
     * @memberof OpenCdxRestCommunicationsControllerApiMarkMessageAsRead
     */
    readonly markMessagesAsReadRequest: MarkMessagesAsReadRequest
}

/**
 * Request parameters for markMessageAsUnread operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiMarkMessageAsUnreadRequest
 */
export interface OpenCdxRestCommunicationsControllerApiMarkMessageAsUnreadRequest {
    /**
     * 
     * @type {MarkMessagesAsUnreadRequest}
     * @memberof OpenCdxRestCommunicationsControllerApiMarkMessageAsUnread
     */
    readonly markMessagesAsUnreadRequest: MarkMessagesAsUnreadRequest
}

/**
 * Request parameters for sendNotification operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiSendNotificationRequest
 */
export interface OpenCdxRestCommunicationsControllerApiSendNotificationRequest {
    /**
     * 
     * @type {Notification}
     * @memberof OpenCdxRestCommunicationsControllerApiSendNotification
     */
    readonly notification: Notification
}

/**
 * Request parameters for updateEmailTemplate operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiUpdateEmailTemplateRequest
 */
export interface OpenCdxRestCommunicationsControllerApiUpdateEmailTemplateRequest {
    /**
     * 
     * @type {EmailTemplate}
     * @memberof OpenCdxRestCommunicationsControllerApiUpdateEmailTemplate
     */
    readonly emailTemplate: EmailTemplate
}

/**
 * Request parameters for updateMessageTemplate operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiUpdateMessageTemplateRequest
 */
export interface OpenCdxRestCommunicationsControllerApiUpdateMessageTemplateRequest {
    /**
     * 
     * @type {MessageTemplate}
     * @memberof OpenCdxRestCommunicationsControllerApiUpdateMessageTemplate
     */
    readonly messageTemplate: MessageTemplate
}

/**
 * Request parameters for updateNotificationEvent operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiUpdateNotificationEventRequest
 */
export interface OpenCdxRestCommunicationsControllerApiUpdateNotificationEventRequest {
    /**
     * 
     * @type {NotificationEvent}
     * @memberof OpenCdxRestCommunicationsControllerApiUpdateNotificationEvent
     */
    readonly notificationEvent: NotificationEvent
}

/**
 * Request parameters for updateSMSTemplate operation in OpenCdxRestCommunicationsControllerApi.
 * @export
 * @interface OpenCdxRestCommunicationsControllerApiUpdateSMSTemplateRequest
 */
export interface OpenCdxRestCommunicationsControllerApiUpdateSMSTemplateRequest {
    /**
     * 
     * @type {SMSTemplate}
     * @memberof OpenCdxRestCommunicationsControllerApiUpdateSMSTemplate
     */
    readonly sMSTemplate: SMSTemplate
}

/**
 * OpenCdxRestCommunicationsControllerApi - object-oriented interface
 * @export
 * @class OpenCdxRestCommunicationsControllerApi
 * @extends {BaseAPI}
 */
export class OpenCdxRestCommunicationsControllerApi extends BaseAPI {
    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiCreateEmailTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public createEmailTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiCreateEmailTemplateRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).createEmailTemplate(requestParameters.emailTemplate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiCreateMessageTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public createMessageTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiCreateMessageTemplateRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).createMessageTemplate(requestParameters.messageTemplate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiCreateNotificationEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public createNotificationEvent(requestParameters: OpenCdxRestCommunicationsControllerApiCreateNotificationEventRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).createNotificationEvent(requestParameters.notificationEvent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiCreateSMSTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public createSMSTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiCreateSMSTemplateRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).createSMSTemplate(requestParameters.sMSTemplate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiDeleteEmailTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public deleteEmailTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiDeleteEmailTemplateRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).deleteEmailTemplate(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiDeleteMessageTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public deleteMessageTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiDeleteMessageTemplateRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).deleteMessageTemplate(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiDeleteNotificationEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public deleteNotificationEvent(requestParameters: OpenCdxRestCommunicationsControllerApiDeleteNotificationEventRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).deleteNotificationEvent(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiDeleteSMSTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public deleteSMSTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiDeleteSMSTemplateRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).deleteSMSTemplate(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiGetEmailTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public getEmailTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiGetEmailTemplateRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).getEmailTemplate(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiGetMessageTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public getMessageTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiGetMessageTemplateRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).getMessageTemplate(requestParameters.templateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiGetMessagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public getMessages(requestParameters: OpenCdxRestCommunicationsControllerApiGetMessagesRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).getMessages(requestParameters.getMessagesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiGetNotificationEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public getNotificationEvent(requestParameters: OpenCdxRestCommunicationsControllerApiGetNotificationEventRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).getNotificationEvent(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiGetSMSTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public getSMSTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiGetSMSTemplateRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).getSMSTemplate(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiListEmailTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public listEmailTemplates(requestParameters: OpenCdxRestCommunicationsControllerApiListEmailTemplatesRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).listEmailTemplates(requestParameters.emailTemplateListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiListMessageTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public listMessageTemplates(requestParameters: OpenCdxRestCommunicationsControllerApiListMessageTemplatesRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).listMessageTemplates(requestParameters.pagination, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiListNotificationEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public listNotificationEvents(requestParameters: OpenCdxRestCommunicationsControllerApiListNotificationEventsRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).listNotificationEvents(requestParameters.notificationEventListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiListSMSTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public listSMSTemplates(requestParameters: OpenCdxRestCommunicationsControllerApiListSMSTemplatesRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).listSMSTemplates(requestParameters.sMSTemplateListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiMarkMessageAsReadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public markMessageAsRead(requestParameters: OpenCdxRestCommunicationsControllerApiMarkMessageAsReadRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).markMessageAsRead(requestParameters.markMessagesAsReadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiMarkMessageAsUnreadRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public markMessageAsUnread(requestParameters: OpenCdxRestCommunicationsControllerApiMarkMessageAsUnreadRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).markMessageAsUnread(requestParameters.markMessagesAsUnreadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiSendNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public sendNotification(requestParameters: OpenCdxRestCommunicationsControllerApiSendNotificationRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).sendNotification(requestParameters.notification, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiUpdateEmailTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public updateEmailTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiUpdateEmailTemplateRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).updateEmailTemplate(requestParameters.emailTemplate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiUpdateMessageTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public updateMessageTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiUpdateMessageTemplateRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).updateMessageTemplate(requestParameters.messageTemplate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiUpdateNotificationEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public updateNotificationEvent(requestParameters: OpenCdxRestCommunicationsControllerApiUpdateNotificationEventRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).updateNotificationEvent(requestParameters.notificationEvent, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestCommunicationsControllerApiUpdateSMSTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestCommunicationsControllerApi
     */
    public updateSMSTemplate(requestParameters: OpenCdxRestCommunicationsControllerApiUpdateSMSTemplateRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestCommunicationsControllerApiFp(this.configuration).updateSMSTemplate(requestParameters.sMSTemplate, options).then((request) => request(this.axios, this.basePath));
    }
}

