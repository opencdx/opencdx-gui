/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { TinkarGetResponse } from '../model';
// @ts-ignore
import type { TinkarGetResult } from '../model';
// @ts-ignore
import type { TinkarSearchQueryResponse } from '../model';
/**
 * OpenCdxRestTinkarSearchControllerApi - axios parameter creator
 * @export
 */
export const OpenCdxRestTinkarSearchControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} query 
         * @param {number} [maxResults] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conceptSearch: async (query: string, maxResults?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('conceptSearch', 'query', query)
            const localVarPath = `/conceptSearch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} resultConformanceConceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllowedResultConceptsFromResultConformance: async (resultConformanceConceptId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resultConformanceConceptId' is not null or undefined
            assertParamExists('getAllowedResultConceptsFromResultConformance', 'resultConformanceConceptId', resultConformanceConceptId)
            const localVarPath = `/allowed-results/resultConformanceConceptId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (resultConformanceConceptId !== undefined) {
                localVarQueryParameter['resultConformanceConceptId'] = resultConformanceConceptId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity: async (conceptId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('getEntity', 'conceptId', conceptId)
            const localVarPath = `/conceptId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (conceptId !== undefined) {
                localVarQueryParameter['conceptId'] = conceptId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} testKitConceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLIDRRecordConceptsFromTestKit: async (testKitConceptId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testKitConceptId' is not null or undefined
            assertParamExists('getLIDRRecordConceptsFromTestKit', 'testKitConceptId', testKitConceptId)
            const localVarPath = `/lidr-records/testKitConceptId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (testKitConceptId !== undefined) {
                localVarQueryParameter['testKitConceptId'] = testKitConceptId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} lidrRecordConceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResultConformanceConceptsFromLIDRRecord: async (lidrRecordConceptId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lidrRecordConceptId' is not null or undefined
            assertParamExists('getResultConformanceConceptsFromLIDRRecord', 'lidrRecordConceptId', lidrRecordConceptId)
            const localVarPath = `/result-conformances/lidrRecordConceptId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (lidrRecordConceptId !== undefined) {
                localVarQueryParameter['lidrRecordConceptId'] = lidrRecordConceptId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTinkarChildConcepts: async (conceptId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('getTinkarChildConcepts', 'conceptId', conceptId)
            const localVarPath = `/children/conceptId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (conceptId !== undefined) {
                localVarQueryParameter['conceptId'] = conceptId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTinkarDescendantConcepts: async (conceptId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'conceptId' is not null or undefined
            assertParamExists('getTinkarDescendantConcepts', 'conceptId', conceptId)
            const localVarPath = `/descendants/conceptId`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (conceptId !== undefined) {
                localVarQueryParameter['conceptId'] = conceptId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} query 
         * @param {number} maxResults 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (query: string, maxResults: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('search', 'query', query)
            // verify required parameter 'maxResults' is not null or undefined
            assertParamExists('search', 'maxResults', maxResults)
            const localVarPath = `/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (maxResults !== undefined) {
                localVarQueryParameter['maxResults'] = maxResults;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenCdxRestTinkarSearchControllerApi - functional programming interface
 * @export
 */
export const OpenCdxRestTinkarSearchControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenCdxRestTinkarSearchControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} query 
         * @param {number} [maxResults] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async conceptSearch(query: string, maxResults?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TinkarGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.conceptSearch(query, maxResults, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestTinkarSearchControllerApi.conceptSearch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} resultConformanceConceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllowedResultConceptsFromResultConformance(resultConformanceConceptId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TinkarGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllowedResultConceptsFromResultConformance(resultConformanceConceptId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestTinkarSearchControllerApi.getAllowedResultConceptsFromResultConformance']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntity(conceptId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TinkarGetResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEntity(conceptId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestTinkarSearchControllerApi.getEntity']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} testKitConceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLIDRRecordConceptsFromTestKit(testKitConceptId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TinkarGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getLIDRRecordConceptsFromTestKit(testKitConceptId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestTinkarSearchControllerApi.getLIDRRecordConceptsFromTestKit']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} lidrRecordConceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResultConformanceConceptsFromLIDRRecord(lidrRecordConceptId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TinkarGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResultConformanceConceptsFromLIDRRecord(lidrRecordConceptId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestTinkarSearchControllerApi.getResultConformanceConceptsFromLIDRRecord']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTinkarChildConcepts(conceptId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TinkarGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTinkarChildConcepts(conceptId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestTinkarSearchControllerApi.getTinkarChildConcepts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} conceptId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTinkarDescendantConcepts(conceptId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TinkarGetResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTinkarDescendantConcepts(conceptId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestTinkarSearchControllerApi.getTinkarDescendantConcepts']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} query 
         * @param {number} maxResults 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(query: string, maxResults: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TinkarSearchQueryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(query, maxResults, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestTinkarSearchControllerApi.search']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpenCdxRestTinkarSearchControllerApi - factory interface
 * @export
 */
export const OpenCdxRestTinkarSearchControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenCdxRestTinkarSearchControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {OpenCdxRestTinkarSearchControllerApiConceptSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        conceptSearch(requestParameters: OpenCdxRestTinkarSearchControllerApiConceptSearchRequest, options?: RawAxiosRequestConfig): AxiosPromise<TinkarGetResponse> {
            return localVarFp.conceptSearch(requestParameters.query, requestParameters.maxResults, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestTinkarSearchControllerApiGetAllowedResultConceptsFromResultConformanceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllowedResultConceptsFromResultConformance(requestParameters: OpenCdxRestTinkarSearchControllerApiGetAllowedResultConceptsFromResultConformanceRequest, options?: RawAxiosRequestConfig): AxiosPromise<TinkarGetResponse> {
            return localVarFp.getAllowedResultConceptsFromResultConformance(requestParameters.resultConformanceConceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestTinkarSearchControllerApiGetEntityRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntity(requestParameters: OpenCdxRestTinkarSearchControllerApiGetEntityRequest, options?: RawAxiosRequestConfig): AxiosPromise<TinkarGetResult> {
            return localVarFp.getEntity(requestParameters.conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestTinkarSearchControllerApiGetLIDRRecordConceptsFromTestKitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLIDRRecordConceptsFromTestKit(requestParameters: OpenCdxRestTinkarSearchControllerApiGetLIDRRecordConceptsFromTestKitRequest, options?: RawAxiosRequestConfig): AxiosPromise<TinkarGetResponse> {
            return localVarFp.getLIDRRecordConceptsFromTestKit(requestParameters.testKitConceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestTinkarSearchControllerApiGetResultConformanceConceptsFromLIDRRecordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResultConformanceConceptsFromLIDRRecord(requestParameters: OpenCdxRestTinkarSearchControllerApiGetResultConformanceConceptsFromLIDRRecordRequest, options?: RawAxiosRequestConfig): AxiosPromise<TinkarGetResponse> {
            return localVarFp.getResultConformanceConceptsFromLIDRRecord(requestParameters.lidrRecordConceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestTinkarSearchControllerApiGetTinkarChildConceptsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTinkarChildConcepts(requestParameters: OpenCdxRestTinkarSearchControllerApiGetTinkarChildConceptsRequest, options?: RawAxiosRequestConfig): AxiosPromise<TinkarGetResponse> {
            return localVarFp.getTinkarChildConcepts(requestParameters.conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestTinkarSearchControllerApiGetTinkarDescendantConceptsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTinkarDescendantConcepts(requestParameters: OpenCdxRestTinkarSearchControllerApiGetTinkarDescendantConceptsRequest, options?: RawAxiosRequestConfig): AxiosPromise<TinkarGetResponse> {
            return localVarFp.getTinkarDescendantConcepts(requestParameters.conceptId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestTinkarSearchControllerApiSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(requestParameters: OpenCdxRestTinkarSearchControllerApiSearchRequest, options?: RawAxiosRequestConfig): AxiosPromise<TinkarSearchQueryResponse> {
            return localVarFp.search(requestParameters.query, requestParameters.maxResults, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for conceptSearch operation in OpenCdxRestTinkarSearchControllerApi.
 * @export
 * @interface OpenCdxRestTinkarSearchControllerApiConceptSearchRequest
 */
export interface OpenCdxRestTinkarSearchControllerApiConceptSearchRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestTinkarSearchControllerApiConceptSearch
     */
    readonly query: string

    /**
     * 
     * @type {number}
     * @memberof OpenCdxRestTinkarSearchControllerApiConceptSearch
     */
    readonly maxResults?: number
}

/**
 * Request parameters for getAllowedResultConceptsFromResultConformance operation in OpenCdxRestTinkarSearchControllerApi.
 * @export
 * @interface OpenCdxRestTinkarSearchControllerApiGetAllowedResultConceptsFromResultConformanceRequest
 */
export interface OpenCdxRestTinkarSearchControllerApiGetAllowedResultConceptsFromResultConformanceRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestTinkarSearchControllerApiGetAllowedResultConceptsFromResultConformance
     */
    readonly resultConformanceConceptId: string
}

/**
 * Request parameters for getEntity operation in OpenCdxRestTinkarSearchControllerApi.
 * @export
 * @interface OpenCdxRestTinkarSearchControllerApiGetEntityRequest
 */
export interface OpenCdxRestTinkarSearchControllerApiGetEntityRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestTinkarSearchControllerApiGetEntity
     */
    readonly conceptId: string
}

/**
 * Request parameters for getLIDRRecordConceptsFromTestKit operation in OpenCdxRestTinkarSearchControllerApi.
 * @export
 * @interface OpenCdxRestTinkarSearchControllerApiGetLIDRRecordConceptsFromTestKitRequest
 */
export interface OpenCdxRestTinkarSearchControllerApiGetLIDRRecordConceptsFromTestKitRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestTinkarSearchControllerApiGetLIDRRecordConceptsFromTestKit
     */
    readonly testKitConceptId: string
}

/**
 * Request parameters for getResultConformanceConceptsFromLIDRRecord operation in OpenCdxRestTinkarSearchControllerApi.
 * @export
 * @interface OpenCdxRestTinkarSearchControllerApiGetResultConformanceConceptsFromLIDRRecordRequest
 */
export interface OpenCdxRestTinkarSearchControllerApiGetResultConformanceConceptsFromLIDRRecordRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestTinkarSearchControllerApiGetResultConformanceConceptsFromLIDRRecord
     */
    readonly lidrRecordConceptId: string
}

/**
 * Request parameters for getTinkarChildConcepts operation in OpenCdxRestTinkarSearchControllerApi.
 * @export
 * @interface OpenCdxRestTinkarSearchControllerApiGetTinkarChildConceptsRequest
 */
export interface OpenCdxRestTinkarSearchControllerApiGetTinkarChildConceptsRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestTinkarSearchControllerApiGetTinkarChildConcepts
     */
    readonly conceptId: string
}

/**
 * Request parameters for getTinkarDescendantConcepts operation in OpenCdxRestTinkarSearchControllerApi.
 * @export
 * @interface OpenCdxRestTinkarSearchControllerApiGetTinkarDescendantConceptsRequest
 */
export interface OpenCdxRestTinkarSearchControllerApiGetTinkarDescendantConceptsRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestTinkarSearchControllerApiGetTinkarDescendantConcepts
     */
    readonly conceptId: string
}

/**
 * Request parameters for search operation in OpenCdxRestTinkarSearchControllerApi.
 * @export
 * @interface OpenCdxRestTinkarSearchControllerApiSearchRequest
 */
export interface OpenCdxRestTinkarSearchControllerApiSearchRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestTinkarSearchControllerApiSearch
     */
    readonly query: string

    /**
     * 
     * @type {number}
     * @memberof OpenCdxRestTinkarSearchControllerApiSearch
     */
    readonly maxResults: number
}

/**
 * OpenCdxRestTinkarSearchControllerApi - object-oriented interface
 * @export
 * @class OpenCdxRestTinkarSearchControllerApi
 * @extends {BaseAPI}
 */
export class OpenCdxRestTinkarSearchControllerApi extends BaseAPI {
    /**
     * 
     * @param {OpenCdxRestTinkarSearchControllerApiConceptSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestTinkarSearchControllerApi
     */
    public conceptSearch(requestParameters: OpenCdxRestTinkarSearchControllerApiConceptSearchRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestTinkarSearchControllerApiFp(this.configuration).conceptSearch(requestParameters.query, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestTinkarSearchControllerApiGetAllowedResultConceptsFromResultConformanceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestTinkarSearchControllerApi
     */
    public getAllowedResultConceptsFromResultConformance(requestParameters: OpenCdxRestTinkarSearchControllerApiGetAllowedResultConceptsFromResultConformanceRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestTinkarSearchControllerApiFp(this.configuration).getAllowedResultConceptsFromResultConformance(requestParameters.resultConformanceConceptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestTinkarSearchControllerApiGetEntityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestTinkarSearchControllerApi
     */
    public getEntity(requestParameters: OpenCdxRestTinkarSearchControllerApiGetEntityRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestTinkarSearchControllerApiFp(this.configuration).getEntity(requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestTinkarSearchControllerApiGetLIDRRecordConceptsFromTestKitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestTinkarSearchControllerApi
     */
    public getLIDRRecordConceptsFromTestKit(requestParameters: OpenCdxRestTinkarSearchControllerApiGetLIDRRecordConceptsFromTestKitRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestTinkarSearchControllerApiFp(this.configuration).getLIDRRecordConceptsFromTestKit(requestParameters.testKitConceptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestTinkarSearchControllerApiGetResultConformanceConceptsFromLIDRRecordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestTinkarSearchControllerApi
     */
    public getResultConformanceConceptsFromLIDRRecord(requestParameters: OpenCdxRestTinkarSearchControllerApiGetResultConformanceConceptsFromLIDRRecordRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestTinkarSearchControllerApiFp(this.configuration).getResultConformanceConceptsFromLIDRRecord(requestParameters.lidrRecordConceptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestTinkarSearchControllerApiGetTinkarChildConceptsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestTinkarSearchControllerApi
     */
    public getTinkarChildConcepts(requestParameters: OpenCdxRestTinkarSearchControllerApiGetTinkarChildConceptsRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestTinkarSearchControllerApiFp(this.configuration).getTinkarChildConcepts(requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestTinkarSearchControllerApiGetTinkarDescendantConceptsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestTinkarSearchControllerApi
     */
    public getTinkarDescendantConcepts(requestParameters: OpenCdxRestTinkarSearchControllerApiGetTinkarDescendantConceptsRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestTinkarSearchControllerApiFp(this.configuration).getTinkarDescendantConcepts(requestParameters.conceptId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestTinkarSearchControllerApiSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestTinkarSearchControllerApi
     */
    public search(requestParameters: OpenCdxRestTinkarSearchControllerApiSearchRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestTinkarSearchControllerApiFp(this.configuration).search(requestParameters.query, requestParameters.maxResults, options).then((request) => request(this.axios, this.basePath));
    }
}

