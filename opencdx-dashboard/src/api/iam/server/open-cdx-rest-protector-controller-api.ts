/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { AnomalyDetectionDataRequest } from '../model';
// @ts-ignore
import type { AuthorizationControlDataRequest } from '../model';
// @ts-ignore
import type { PrivacyProtectionDataRequest } from '../model';
// @ts-ignore
import type { RealTimeMonitoringDataRequest } from '../model';
// @ts-ignore
import type { SecurityResponse } from '../model';
// @ts-ignore
import type { UserBehaviorAnalysisDataRequest } from '../model';
/**
 * OpenCdxRestProtectorControllerApi - axios parameter creator
 * @export
 */
export const OpenCdxRestProtectorControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {UserBehaviorAnalysisDataRequest} userBehaviorAnalysisDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAnalyzeUserBehavior: async (userBehaviorAnalysisDataRequest: UserBehaviorAnalysisDataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userBehaviorAnalysisDataRequest' is not null or undefined
            assertParamExists('postAnalyzeUserBehavior', 'userBehaviorAnalysisDataRequest', userBehaviorAnalysisDataRequest)
            const localVarPath = `/analyzeUserBehavior`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userBehaviorAnalysisDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AuthorizationControlDataRequest} authorizationControlDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthorize: async (authorizationControlDataRequest: AuthorizationControlDataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizationControlDataRequest' is not null or undefined
            assertParamExists('postAuthorize', 'authorizationControlDataRequest', authorizationControlDataRequest)
            const localVarPath = `/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorizationControlDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AnomalyDetectionDataRequest} anomalyDetectionDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDetectAnomalies: async (anomalyDetectionDataRequest: AnomalyDetectionDataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'anomalyDetectionDataRequest' is not null or undefined
            assertParamExists('postDetectAnomalies', 'anomalyDetectionDataRequest', anomalyDetectionDataRequest)
            const localVarPath = `/detectAnomalies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(anomalyDetectionDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RealTimeMonitoringDataRequest} realTimeMonitoringDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMonitorRealTime: async (realTimeMonitoringDataRequest: RealTimeMonitoringDataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'realTimeMonitoringDataRequest' is not null or undefined
            assertParamExists('postMonitorRealTime', 'realTimeMonitoringDataRequest', realTimeMonitoringDataRequest)
            const localVarPath = `/monitorRealTime`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(realTimeMonitoringDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PrivacyProtectionDataRequest} privacyProtectionDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProtectPrivacy: async (privacyProtectionDataRequest: PrivacyProtectionDataRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'privacyProtectionDataRequest' is not null or undefined
            assertParamExists('postProtectPrivacy', 'privacyProtectionDataRequest', privacyProtectionDataRequest)
            const localVarPath = `/protectPrivacy`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(privacyProtectionDataRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenCdxRestProtectorControllerApi - functional programming interface
 * @export
 */
export const OpenCdxRestProtectorControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenCdxRestProtectorControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {UserBehaviorAnalysisDataRequest} userBehaviorAnalysisDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAnalyzeUserBehavior(userBehaviorAnalysisDataRequest: UserBehaviorAnalysisDataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAnalyzeUserBehavior(userBehaviorAnalysisDataRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestProtectorControllerApi.postAnalyzeUserBehavior']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AuthorizationControlDataRequest} authorizationControlDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postAuthorize(authorizationControlDataRequest: AuthorizationControlDataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postAuthorize(authorizationControlDataRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestProtectorControllerApi.postAuthorize']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AnomalyDetectionDataRequest} anomalyDetectionDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDetectAnomalies(anomalyDetectionDataRequest: AnomalyDetectionDataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDetectAnomalies(anomalyDetectionDataRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestProtectorControllerApi.postDetectAnomalies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RealTimeMonitoringDataRequest} realTimeMonitoringDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMonitorRealTime(realTimeMonitoringDataRequest: RealTimeMonitoringDataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postMonitorRealTime(realTimeMonitoringDataRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestProtectorControllerApi.postMonitorRealTime']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {PrivacyProtectionDataRequest} privacyProtectionDataRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postProtectPrivacy(privacyProtectionDataRequest: PrivacyProtectionDataRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SecurityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postProtectPrivacy(privacyProtectionDataRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestProtectorControllerApi.postProtectPrivacy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpenCdxRestProtectorControllerApi - factory interface
 * @export
 */
export const OpenCdxRestProtectorControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenCdxRestProtectorControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {OpenCdxRestProtectorControllerApiPostAnalyzeUserBehaviorRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAnalyzeUserBehavior(requestParameters: OpenCdxRestProtectorControllerApiPostAnalyzeUserBehaviorRequest, options?: RawAxiosRequestConfig): AxiosPromise<SecurityResponse> {
            return localVarFp.postAnalyzeUserBehavior(requestParameters.userBehaviorAnalysisDataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestProtectorControllerApiPostAuthorizeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postAuthorize(requestParameters: OpenCdxRestProtectorControllerApiPostAuthorizeRequest, options?: RawAxiosRequestConfig): AxiosPromise<SecurityResponse> {
            return localVarFp.postAuthorize(requestParameters.authorizationControlDataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestProtectorControllerApiPostDetectAnomaliesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDetectAnomalies(requestParameters: OpenCdxRestProtectorControllerApiPostDetectAnomaliesRequest, options?: RawAxiosRequestConfig): AxiosPromise<SecurityResponse> {
            return localVarFp.postDetectAnomalies(requestParameters.anomalyDetectionDataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestProtectorControllerApiPostMonitorRealTimeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMonitorRealTime(requestParameters: OpenCdxRestProtectorControllerApiPostMonitorRealTimeRequest, options?: RawAxiosRequestConfig): AxiosPromise<SecurityResponse> {
            return localVarFp.postMonitorRealTime(requestParameters.realTimeMonitoringDataRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestProtectorControllerApiPostProtectPrivacyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postProtectPrivacy(requestParameters: OpenCdxRestProtectorControllerApiPostProtectPrivacyRequest, options?: RawAxiosRequestConfig): AxiosPromise<SecurityResponse> {
            return localVarFp.postProtectPrivacy(requestParameters.privacyProtectionDataRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for postAnalyzeUserBehavior operation in OpenCdxRestProtectorControllerApi.
 * @export
 * @interface OpenCdxRestProtectorControllerApiPostAnalyzeUserBehaviorRequest
 */
export interface OpenCdxRestProtectorControllerApiPostAnalyzeUserBehaviorRequest {
    /**
     * 
     * @type {UserBehaviorAnalysisDataRequest}
     * @memberof OpenCdxRestProtectorControllerApiPostAnalyzeUserBehavior
     */
    readonly userBehaviorAnalysisDataRequest: UserBehaviorAnalysisDataRequest
}

/**
 * Request parameters for postAuthorize operation in OpenCdxRestProtectorControllerApi.
 * @export
 * @interface OpenCdxRestProtectorControllerApiPostAuthorizeRequest
 */
export interface OpenCdxRestProtectorControllerApiPostAuthorizeRequest {
    /**
     * 
     * @type {AuthorizationControlDataRequest}
     * @memberof OpenCdxRestProtectorControllerApiPostAuthorize
     */
    readonly authorizationControlDataRequest: AuthorizationControlDataRequest
}

/**
 * Request parameters for postDetectAnomalies operation in OpenCdxRestProtectorControllerApi.
 * @export
 * @interface OpenCdxRestProtectorControllerApiPostDetectAnomaliesRequest
 */
export interface OpenCdxRestProtectorControllerApiPostDetectAnomaliesRequest {
    /**
     * 
     * @type {AnomalyDetectionDataRequest}
     * @memberof OpenCdxRestProtectorControllerApiPostDetectAnomalies
     */
    readonly anomalyDetectionDataRequest: AnomalyDetectionDataRequest
}

/**
 * Request parameters for postMonitorRealTime operation in OpenCdxRestProtectorControllerApi.
 * @export
 * @interface OpenCdxRestProtectorControllerApiPostMonitorRealTimeRequest
 */
export interface OpenCdxRestProtectorControllerApiPostMonitorRealTimeRequest {
    /**
     * 
     * @type {RealTimeMonitoringDataRequest}
     * @memberof OpenCdxRestProtectorControllerApiPostMonitorRealTime
     */
    readonly realTimeMonitoringDataRequest: RealTimeMonitoringDataRequest
}

/**
 * Request parameters for postProtectPrivacy operation in OpenCdxRestProtectorControllerApi.
 * @export
 * @interface OpenCdxRestProtectorControllerApiPostProtectPrivacyRequest
 */
export interface OpenCdxRestProtectorControllerApiPostProtectPrivacyRequest {
    /**
     * 
     * @type {PrivacyProtectionDataRequest}
     * @memberof OpenCdxRestProtectorControllerApiPostProtectPrivacy
     */
    readonly privacyProtectionDataRequest: PrivacyProtectionDataRequest
}

/**
 * OpenCdxRestProtectorControllerApi - object-oriented interface
 * @export
 * @class OpenCdxRestProtectorControllerApi
 * @extends {BaseAPI}
 */
export class OpenCdxRestProtectorControllerApi extends BaseAPI {
    /**
     * 
     * @param {OpenCdxRestProtectorControllerApiPostAnalyzeUserBehaviorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestProtectorControllerApi
     */
    public postAnalyzeUserBehavior(requestParameters: OpenCdxRestProtectorControllerApiPostAnalyzeUserBehaviorRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestProtectorControllerApiFp(this.configuration).postAnalyzeUserBehavior(requestParameters.userBehaviorAnalysisDataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestProtectorControllerApiPostAuthorizeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestProtectorControllerApi
     */
    public postAuthorize(requestParameters: OpenCdxRestProtectorControllerApiPostAuthorizeRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestProtectorControllerApiFp(this.configuration).postAuthorize(requestParameters.authorizationControlDataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestProtectorControllerApiPostDetectAnomaliesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestProtectorControllerApi
     */
    public postDetectAnomalies(requestParameters: OpenCdxRestProtectorControllerApiPostDetectAnomaliesRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestProtectorControllerApiFp(this.configuration).postDetectAnomalies(requestParameters.anomalyDetectionDataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestProtectorControllerApiPostMonitorRealTimeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestProtectorControllerApi
     */
    public postMonitorRealTime(requestParameters: OpenCdxRestProtectorControllerApiPostMonitorRealTimeRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestProtectorControllerApiFp(this.configuration).postMonitorRealTime(requestParameters.realTimeMonitoringDataRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestProtectorControllerApiPostProtectPrivacyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestProtectorControllerApi
     */
    public postProtectPrivacy(requestParameters: OpenCdxRestProtectorControllerApiPostProtectPrivacyRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestProtectorControllerApiFp(this.configuration).postProtectPrivacy(requestParameters.privacyProtectionDataRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

