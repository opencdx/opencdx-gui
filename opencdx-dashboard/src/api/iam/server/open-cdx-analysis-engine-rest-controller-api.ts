/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateAnalysisEngineRequest } from '../model';
// @ts-ignore
import type { CreateAnalysisEngineResponse } from '../model';
// @ts-ignore
import type { DeleteAnalysisEngineResponse } from '../model';
// @ts-ignore
import type { GetAnalysisEngineResponse } from '../model';
// @ts-ignore
import type { ListAnalysisEnginesRequest } from '../model';
// @ts-ignore
import type { ListAnalysisEnginesResponse } from '../model';
// @ts-ignore
import type { UpdateAnalysisEngineRequest } from '../model';
// @ts-ignore
import type { UpdateAnalysisEngineResponse } from '../model';
/**
 * OpenCdxAnalysisEngineRestControllerApi - axios parameter creator
 * @export
 */
export const OpenCdxAnalysisEngineRestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateAnalysisEngineRequest} createAnalysisEngineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnalysisEngineRequest: async (createAnalysisEngineRequest: CreateAnalysisEngineRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createAnalysisEngineRequest' is not null or undefined
            assertParamExists('createAnalysisEngineRequest', 'createAnalysisEngineRequest', createAnalysisEngineRequest)
            const localVarPath = `/analysis-engine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createAnalysisEngineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnalysisEngine: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAnalysisEngine', 'id', id)
            const localVarPath = `/analysis-engine/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalysisEngineRequest: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAnalysisEngineRequest', 'id', id)
            const localVarPath = `/analysis-engine/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ListAnalysisEnginesRequest} listAnalysisEnginesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAnalysisEngineRequest: async (listAnalysisEnginesRequest: ListAnalysisEnginesRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listAnalysisEnginesRequest' is not null or undefined
            assertParamExists('listAnalysisEngineRequest', 'listAnalysisEnginesRequest', listAnalysisEnginesRequest)
            const localVarPath = `/analysis-engine/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listAnalysisEnginesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateAnalysisEngineRequest} updateAnalysisEngineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnalysisEngineRequest: async (updateAnalysisEngineRequest: UpdateAnalysisEngineRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateAnalysisEngineRequest' is not null or undefined
            assertParamExists('updateAnalysisEngineRequest', 'updateAnalysisEngineRequest', updateAnalysisEngineRequest)
            const localVarPath = `/analysis-engine`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateAnalysisEngineRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenCdxAnalysisEngineRestControllerApi - functional programming interface
 * @export
 */
export const OpenCdxAnalysisEngineRestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenCdxAnalysisEngineRestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateAnalysisEngineRequest} createAnalysisEngineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAnalysisEngineRequest(createAnalysisEngineRequest: CreateAnalysisEngineRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAnalysisEngineResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAnalysisEngineRequest(createAnalysisEngineRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxAnalysisEngineRestControllerApi.createAnalysisEngineRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAnalysisEngine(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteAnalysisEngineResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAnalysisEngine(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxAnalysisEngineRestControllerApi.deleteAnalysisEngine']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAnalysisEngineRequest(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAnalysisEngineResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAnalysisEngineRequest(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxAnalysisEngineRestControllerApi.getAnalysisEngineRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ListAnalysisEnginesRequest} listAnalysisEnginesRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAnalysisEngineRequest(listAnalysisEnginesRequest: ListAnalysisEnginesRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAnalysisEnginesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAnalysisEngineRequest(listAnalysisEnginesRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxAnalysisEngineRestControllerApi.listAnalysisEngineRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateAnalysisEngineRequest} updateAnalysisEngineRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAnalysisEngineRequest(updateAnalysisEngineRequest: UpdateAnalysisEngineRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateAnalysisEngineResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAnalysisEngineRequest(updateAnalysisEngineRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxAnalysisEngineRestControllerApi.updateAnalysisEngineRequest']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpenCdxAnalysisEngineRestControllerApi - factory interface
 * @export
 */
export const OpenCdxAnalysisEngineRestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenCdxAnalysisEngineRestControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {OpenCdxAnalysisEngineRestControllerApiCreateAnalysisEngineRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAnalysisEngineRequest(requestParameters: OpenCdxAnalysisEngineRestControllerApiCreateAnalysisEngineRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateAnalysisEngineResponse> {
            return localVarFp.createAnalysisEngineRequest(requestParameters.createAnalysisEngineRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxAnalysisEngineRestControllerApiDeleteAnalysisEngineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAnalysisEngine(requestParameters: OpenCdxAnalysisEngineRestControllerApiDeleteAnalysisEngineRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteAnalysisEngineResponse> {
            return localVarFp.deleteAnalysisEngine(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxAnalysisEngineRestControllerApiGetAnalysisEngineRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalysisEngineRequest(requestParameters: OpenCdxAnalysisEngineRestControllerApiGetAnalysisEngineRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetAnalysisEngineResponse> {
            return localVarFp.getAnalysisEngineRequest(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxAnalysisEngineRestControllerApiListAnalysisEngineRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAnalysisEngineRequest(requestParameters: OpenCdxAnalysisEngineRestControllerApiListAnalysisEngineRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListAnalysisEnginesResponse> {
            return localVarFp.listAnalysisEngineRequest(requestParameters.listAnalysisEnginesRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxAnalysisEngineRestControllerApiUpdateAnalysisEngineRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAnalysisEngineRequest(requestParameters: OpenCdxAnalysisEngineRestControllerApiUpdateAnalysisEngineRequestRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateAnalysisEngineResponse> {
            return localVarFp.updateAnalysisEngineRequest(requestParameters.updateAnalysisEngineRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAnalysisEngineRequest operation in OpenCdxAnalysisEngineRestControllerApi.
 * @export
 * @interface OpenCdxAnalysisEngineRestControllerApiCreateAnalysisEngineRequestRequest
 */
export interface OpenCdxAnalysisEngineRestControllerApiCreateAnalysisEngineRequestRequest {
    /**
     * 
     * @type {CreateAnalysisEngineRequest}
     * @memberof OpenCdxAnalysisEngineRestControllerApiCreateAnalysisEngineRequest
     */
    readonly createAnalysisEngineRequest: CreateAnalysisEngineRequest
}

/**
 * Request parameters for deleteAnalysisEngine operation in OpenCdxAnalysisEngineRestControllerApi.
 * @export
 * @interface OpenCdxAnalysisEngineRestControllerApiDeleteAnalysisEngineRequest
 */
export interface OpenCdxAnalysisEngineRestControllerApiDeleteAnalysisEngineRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxAnalysisEngineRestControllerApiDeleteAnalysisEngine
     */
    readonly id: string
}

/**
 * Request parameters for getAnalysisEngineRequest operation in OpenCdxAnalysisEngineRestControllerApi.
 * @export
 * @interface OpenCdxAnalysisEngineRestControllerApiGetAnalysisEngineRequestRequest
 */
export interface OpenCdxAnalysisEngineRestControllerApiGetAnalysisEngineRequestRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxAnalysisEngineRestControllerApiGetAnalysisEngineRequest
     */
    readonly id: string
}

/**
 * Request parameters for listAnalysisEngineRequest operation in OpenCdxAnalysisEngineRestControllerApi.
 * @export
 * @interface OpenCdxAnalysisEngineRestControllerApiListAnalysisEngineRequestRequest
 */
export interface OpenCdxAnalysisEngineRestControllerApiListAnalysisEngineRequestRequest {
    /**
     * 
     * @type {ListAnalysisEnginesRequest}
     * @memberof OpenCdxAnalysisEngineRestControllerApiListAnalysisEngineRequest
     */
    readonly listAnalysisEnginesRequest: ListAnalysisEnginesRequest
}

/**
 * Request parameters for updateAnalysisEngineRequest operation in OpenCdxAnalysisEngineRestControllerApi.
 * @export
 * @interface OpenCdxAnalysisEngineRestControllerApiUpdateAnalysisEngineRequestRequest
 */
export interface OpenCdxAnalysisEngineRestControllerApiUpdateAnalysisEngineRequestRequest {
    /**
     * 
     * @type {UpdateAnalysisEngineRequest}
     * @memberof OpenCdxAnalysisEngineRestControllerApiUpdateAnalysisEngineRequest
     */
    readonly updateAnalysisEngineRequest: UpdateAnalysisEngineRequest
}

/**
 * OpenCdxAnalysisEngineRestControllerApi - object-oriented interface
 * @export
 * @class OpenCdxAnalysisEngineRestControllerApi
 * @extends {BaseAPI}
 */
export class OpenCdxAnalysisEngineRestControllerApi extends BaseAPI {
    /**
     * 
     * @param {OpenCdxAnalysisEngineRestControllerApiCreateAnalysisEngineRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxAnalysisEngineRestControllerApi
     */
    public createAnalysisEngineRequest(requestParameters: OpenCdxAnalysisEngineRestControllerApiCreateAnalysisEngineRequestRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxAnalysisEngineRestControllerApiFp(this.configuration).createAnalysisEngineRequest(requestParameters.createAnalysisEngineRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxAnalysisEngineRestControllerApiDeleteAnalysisEngineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxAnalysisEngineRestControllerApi
     */
    public deleteAnalysisEngine(requestParameters: OpenCdxAnalysisEngineRestControllerApiDeleteAnalysisEngineRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxAnalysisEngineRestControllerApiFp(this.configuration).deleteAnalysisEngine(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxAnalysisEngineRestControllerApiGetAnalysisEngineRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxAnalysisEngineRestControllerApi
     */
    public getAnalysisEngineRequest(requestParameters: OpenCdxAnalysisEngineRestControllerApiGetAnalysisEngineRequestRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxAnalysisEngineRestControllerApiFp(this.configuration).getAnalysisEngineRequest(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxAnalysisEngineRestControllerApiListAnalysisEngineRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxAnalysisEngineRestControllerApi
     */
    public listAnalysisEngineRequest(requestParameters: OpenCdxAnalysisEngineRestControllerApiListAnalysisEngineRequestRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxAnalysisEngineRestControllerApiFp(this.configuration).listAnalysisEngineRequest(requestParameters.listAnalysisEnginesRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxAnalysisEngineRestControllerApiUpdateAnalysisEngineRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxAnalysisEngineRestControllerApi
     */
    public updateAnalysisEngineRequest(requestParameters: OpenCdxAnalysisEngineRestControllerApiUpdateAnalysisEngineRequestRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxAnalysisEngineRestControllerApiFp(this.configuration).updateAnalysisEngineRequest(requestParameters.updateAnalysisEngineRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

