/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CancelOrderResponse } from '../model';
// @ts-ignore
import type { CreateOrderRequest } from '../model';
// @ts-ignore
import type { CreateOrderResponse } from '../model';
// @ts-ignore
import type { GetOrderResponse } from '../model';
// @ts-ignore
import type { ListOrdersRequest } from '../model';
// @ts-ignore
import type { ListOrdersResponse } from '../model';
// @ts-ignore
import type { UpdateOrderRequest } from '../model';
// @ts-ignore
import type { UpdateOrderResponse } from '../model';
/**
 * OpenCdxRestShippingControllerApi - axios parameter creator
 * @export
 */
export const OpenCdxRestShippingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('cancelOrder', 'id', id)
            const localVarPath = `/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateOrderRequest} createOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: async (createOrderRequest: CreateOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrderRequest' is not null or undefined
            assertParamExists('createOrder', 'createOrderRequest', createOrderRequest)
            const localVarPath = `/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrder', 'id', id)
            const localVarPath = `/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ListOrdersRequest} listOrdersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders: async (listOrdersRequest: ListOrdersRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listOrdersRequest' is not null or undefined
            assertParamExists('listOrders', 'listOrdersRequest', listOrdersRequest)
            const localVarPath = `/order/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listOrdersRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateOrderRequest} updateOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder: async (updateOrderRequest: UpdateOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateOrderRequest' is not null or undefined
            assertParamExists('updateOrder', 'updateOrderRequest', updateOrderRequest)
            const localVarPath = `/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenCdxRestShippingControllerApi - functional programming interface
 * @export
 */
export const OpenCdxRestShippingControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenCdxRestShippingControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestShippingControllerApi.cancelOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateOrderRequest} createOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrder(createOrderRequest: CreateOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrder(createOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestShippingControllerApi.createOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestShippingControllerApi.getOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ListOrdersRequest} listOrdersRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOrders(listOrdersRequest: ListOrdersRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOrders(listOrdersRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestShippingControllerApi.listOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateOrderRequest} updateOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrder(updateOrderRequest: UpdateOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrder(updateOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestShippingControllerApi.updateOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpenCdxRestShippingControllerApi - factory interface
 * @export
 */
export const OpenCdxRestShippingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenCdxRestShippingControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {OpenCdxRestShippingControllerApiCancelOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrder(requestParameters: OpenCdxRestShippingControllerApiCancelOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<CancelOrderResponse> {
            return localVarFp.cancelOrder(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestShippingControllerApiCreateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(requestParameters: OpenCdxRestShippingControllerApiCreateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateOrderResponse> {
            return localVarFp.createOrder(requestParameters.createOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestShippingControllerApiGetOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(requestParameters: OpenCdxRestShippingControllerApiGetOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<GetOrderResponse> {
            return localVarFp.getOrder(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestShippingControllerApiListOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOrders(requestParameters: OpenCdxRestShippingControllerApiListOrdersRequest, options?: RawAxiosRequestConfig): AxiosPromise<ListOrdersResponse> {
            return localVarFp.listOrders(requestParameters.listOrdersRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestShippingControllerApiUpdateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrder(requestParameters: OpenCdxRestShippingControllerApiUpdateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<UpdateOrderResponse> {
            return localVarFp.updateOrder(requestParameters.updateOrderRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelOrder operation in OpenCdxRestShippingControllerApi.
 * @export
 * @interface OpenCdxRestShippingControllerApiCancelOrderRequest
 */
export interface OpenCdxRestShippingControllerApiCancelOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestShippingControllerApiCancelOrder
     */
    readonly id: string
}

/**
 * Request parameters for createOrder operation in OpenCdxRestShippingControllerApi.
 * @export
 * @interface OpenCdxRestShippingControllerApiCreateOrderRequest
 */
export interface OpenCdxRestShippingControllerApiCreateOrderRequest {
    /**
     * 
     * @type {CreateOrderRequest}
     * @memberof OpenCdxRestShippingControllerApiCreateOrder
     */
    readonly createOrderRequest: CreateOrderRequest
}

/**
 * Request parameters for getOrder operation in OpenCdxRestShippingControllerApi.
 * @export
 * @interface OpenCdxRestShippingControllerApiGetOrderRequest
 */
export interface OpenCdxRestShippingControllerApiGetOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestShippingControllerApiGetOrder
     */
    readonly id: string
}

/**
 * Request parameters for listOrders operation in OpenCdxRestShippingControllerApi.
 * @export
 * @interface OpenCdxRestShippingControllerApiListOrdersRequest
 */
export interface OpenCdxRestShippingControllerApiListOrdersRequest {
    /**
     * 
     * @type {ListOrdersRequest}
     * @memberof OpenCdxRestShippingControllerApiListOrders
     */
    readonly listOrdersRequest: ListOrdersRequest
}

/**
 * Request parameters for updateOrder operation in OpenCdxRestShippingControllerApi.
 * @export
 * @interface OpenCdxRestShippingControllerApiUpdateOrderRequest
 */
export interface OpenCdxRestShippingControllerApiUpdateOrderRequest {
    /**
     * 
     * @type {UpdateOrderRequest}
     * @memberof OpenCdxRestShippingControllerApiUpdateOrder
     */
    readonly updateOrderRequest: UpdateOrderRequest
}

/**
 * OpenCdxRestShippingControllerApi - object-oriented interface
 * @export
 * @class OpenCdxRestShippingControllerApi
 * @extends {BaseAPI}
 */
export class OpenCdxRestShippingControllerApi extends BaseAPI {
    /**
     * 
     * @param {OpenCdxRestShippingControllerApiCancelOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestShippingControllerApi
     */
    public cancelOrder(requestParameters: OpenCdxRestShippingControllerApiCancelOrderRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestShippingControllerApiFp(this.configuration).cancelOrder(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestShippingControllerApiCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestShippingControllerApi
     */
    public createOrder(requestParameters: OpenCdxRestShippingControllerApiCreateOrderRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestShippingControllerApiFp(this.configuration).createOrder(requestParameters.createOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestShippingControllerApiGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestShippingControllerApi
     */
    public getOrder(requestParameters: OpenCdxRestShippingControllerApiGetOrderRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestShippingControllerApiFp(this.configuration).getOrder(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestShippingControllerApiListOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestShippingControllerApi
     */
    public listOrders(requestParameters: OpenCdxRestShippingControllerApiListOrdersRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestShippingControllerApiFp(this.configuration).listOrders(requestParameters.listOrdersRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestShippingControllerApiUpdateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestShippingControllerApi
     */
    public updateOrder(requestParameters: OpenCdxRestShippingControllerApiUpdateOrderRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestShippingControllerApiFp(this.configuration).updateOrder(requestParameters.updateOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

