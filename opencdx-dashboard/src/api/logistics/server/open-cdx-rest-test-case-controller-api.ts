/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { DeleteResponse } from '../model';
// @ts-ignore
import type { TestCase } from '../model';
// @ts-ignore
import type { TestCaseListRequest } from '../model';
// @ts-ignore
import type { TestCaseListResponse } from '../model';
/**
 * OpenCdxRestTestCaseControllerApi - axios parameter creator
 * @export
 */
export const OpenCdxRestTestCaseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TestCase} testCase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestCase: async (testCase: TestCase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testCase' is not null or undefined
            assertParamExists('addTestCase', 'testCase', testCase)
            const localVarPath = `/testcase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testCase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestCase: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTestCase', 'id', id)
            const localVarPath = `/testcase/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestCaseById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTestCaseById', 'id', id)
            const localVarPath = `/testcase/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TestCaseListRequest} testCaseListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTestCase: async (testCaseListRequest: TestCaseListRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testCaseListRequest' is not null or undefined
            assertParamExists('listTestCase', 'testCaseListRequest', testCaseListRequest)
            const localVarPath = `/testcase/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testCaseListRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TestCase} testCase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTestCase: async (testCase: TestCase, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'testCase' is not null or undefined
            assertParamExists('updateTestCase', 'testCase', testCase)
            const localVarPath = `/testcase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(testCase, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OpenCdxRestTestCaseControllerApi - functional programming interface
 * @export
 */
export const OpenCdxRestTestCaseControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OpenCdxRestTestCaseControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {TestCase} testCase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTestCase(testCase: TestCase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTestCase(testCase, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestTestCaseControllerApi.addTestCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTestCase(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTestCase(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestTestCaseControllerApi.deleteTestCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTestCaseById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTestCaseById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestTestCaseControllerApi.getTestCaseById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TestCaseListRequest} testCaseListRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTestCase(testCaseListRequest: TestCaseListRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCaseListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTestCase(testCaseListRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestTestCaseControllerApi.listTestCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TestCase} testCase 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTestCase(testCase: TestCase, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TestCase>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTestCase(testCase, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OpenCdxRestTestCaseControllerApi.updateTestCase']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OpenCdxRestTestCaseControllerApi - factory interface
 * @export
 */
export const OpenCdxRestTestCaseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OpenCdxRestTestCaseControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {OpenCdxRestTestCaseControllerApiAddTestCaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTestCase(requestParameters: OpenCdxRestTestCaseControllerApiAddTestCaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<TestCase> {
            return localVarFp.addTestCase(requestParameters.testCase, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestTestCaseControllerApiDeleteTestCaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTestCase(requestParameters: OpenCdxRestTestCaseControllerApiDeleteTestCaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeleteResponse> {
            return localVarFp.deleteTestCase(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestTestCaseControllerApiGetTestCaseByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTestCaseById(requestParameters: OpenCdxRestTestCaseControllerApiGetTestCaseByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<TestCase> {
            return localVarFp.getTestCaseById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestTestCaseControllerApiListTestCaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTestCase(requestParameters: OpenCdxRestTestCaseControllerApiListTestCaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<TestCaseListResponse> {
            return localVarFp.listTestCase(requestParameters.testCaseListRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {OpenCdxRestTestCaseControllerApiUpdateTestCaseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTestCase(requestParameters: OpenCdxRestTestCaseControllerApiUpdateTestCaseRequest, options?: RawAxiosRequestConfig): AxiosPromise<TestCase> {
            return localVarFp.updateTestCase(requestParameters.testCase, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addTestCase operation in OpenCdxRestTestCaseControllerApi.
 * @export
 * @interface OpenCdxRestTestCaseControllerApiAddTestCaseRequest
 */
export interface OpenCdxRestTestCaseControllerApiAddTestCaseRequest {
    /**
     * 
     * @type {TestCase}
     * @memberof OpenCdxRestTestCaseControllerApiAddTestCase
     */
    readonly testCase: TestCase
}

/**
 * Request parameters for deleteTestCase operation in OpenCdxRestTestCaseControllerApi.
 * @export
 * @interface OpenCdxRestTestCaseControllerApiDeleteTestCaseRequest
 */
export interface OpenCdxRestTestCaseControllerApiDeleteTestCaseRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestTestCaseControllerApiDeleteTestCase
     */
    readonly id: string
}

/**
 * Request parameters for getTestCaseById operation in OpenCdxRestTestCaseControllerApi.
 * @export
 * @interface OpenCdxRestTestCaseControllerApiGetTestCaseByIdRequest
 */
export interface OpenCdxRestTestCaseControllerApiGetTestCaseByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof OpenCdxRestTestCaseControllerApiGetTestCaseById
     */
    readonly id: string
}

/**
 * Request parameters for listTestCase operation in OpenCdxRestTestCaseControllerApi.
 * @export
 * @interface OpenCdxRestTestCaseControllerApiListTestCaseRequest
 */
export interface OpenCdxRestTestCaseControllerApiListTestCaseRequest {
    /**
     * 
     * @type {TestCaseListRequest}
     * @memberof OpenCdxRestTestCaseControllerApiListTestCase
     */
    readonly testCaseListRequest: TestCaseListRequest
}

/**
 * Request parameters for updateTestCase operation in OpenCdxRestTestCaseControllerApi.
 * @export
 * @interface OpenCdxRestTestCaseControllerApiUpdateTestCaseRequest
 */
export interface OpenCdxRestTestCaseControllerApiUpdateTestCaseRequest {
    /**
     * 
     * @type {TestCase}
     * @memberof OpenCdxRestTestCaseControllerApiUpdateTestCase
     */
    readonly testCase: TestCase
}

/**
 * OpenCdxRestTestCaseControllerApi - object-oriented interface
 * @export
 * @class OpenCdxRestTestCaseControllerApi
 * @extends {BaseAPI}
 */
export class OpenCdxRestTestCaseControllerApi extends BaseAPI {
    /**
     * 
     * @param {OpenCdxRestTestCaseControllerApiAddTestCaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestTestCaseControllerApi
     */
    public addTestCase(requestParameters: OpenCdxRestTestCaseControllerApiAddTestCaseRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestTestCaseControllerApiFp(this.configuration).addTestCase(requestParameters.testCase, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestTestCaseControllerApiDeleteTestCaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestTestCaseControllerApi
     */
    public deleteTestCase(requestParameters: OpenCdxRestTestCaseControllerApiDeleteTestCaseRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestTestCaseControllerApiFp(this.configuration).deleteTestCase(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestTestCaseControllerApiGetTestCaseByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestTestCaseControllerApi
     */
    public getTestCaseById(requestParameters: OpenCdxRestTestCaseControllerApiGetTestCaseByIdRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestTestCaseControllerApiFp(this.configuration).getTestCaseById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestTestCaseControllerApiListTestCaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestTestCaseControllerApi
     */
    public listTestCase(requestParameters: OpenCdxRestTestCaseControllerApiListTestCaseRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestTestCaseControllerApiFp(this.configuration).listTestCase(requestParameters.testCaseListRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OpenCdxRestTestCaseControllerApiUpdateTestCaseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OpenCdxRestTestCaseControllerApi
     */
    public updateTestCase(requestParameters: OpenCdxRestTestCaseControllerApiUpdateTestCaseRequest, options?: RawAxiosRequestConfig) {
        return OpenCdxRestTestCaseControllerApiFp(this.configuration).updateTestCase(requestParameters.testCase, options).then((request) => request(this.axios, this.basePath));
    }
}

