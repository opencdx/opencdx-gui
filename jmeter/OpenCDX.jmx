<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Setup Details" enabled="true">
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Properties Details" enabled="true">
          <stringProp name="BeanShellSampler.query">log.info(&quot;Users: &quot; + ${__P(noThreads,1)} + &quot; Rampup: &quot; + ${__P(rampUp,1)} + &quot; Duration: &quot; + ${__P(durationSec,1)});
System.out.println(&quot;Setup Users: &quot; + ${__P(noThreads,1)} + &quot; Rampup: &quot; + ${__P(rampUp,1)} + &quot; Duration: &quot; + ${__P(durationSec,60)} + &quot; seconds  Server: &quot; + ${__P(serverName,localhost)} + &quot; Port: &quot; + ${__P(serverPort,8080)});</stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Tests" enabled="true">
        <stringProp name="ThreadGroup.num_threads">${__P(noThreads,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampUp,1)}</stringProp>
        <stringProp name="ThreadGroup.duration">${__P(durationSec,60)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">${__P(lCount,1)}</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Run gRPC Test?" enabled="true">
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">false</boolProp>
          <stringProp name="IfController.condition">${__P(gRpcTest,true)}</stringProp>
        </IfController>
        <hashTree>
          <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Thread Setup" enabled="true">
            <stringProp name="BeanShellSampler.query">String jMUUID = &quot;${__UUID}&quot;;
vars.put(&quot;userPrefix&quot;,jMUUID.replace(&quot;-&quot;,&quot;&quot;));</stringProp>
            <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
          </BeanShellSampler>
          <hashTree/>
          <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${__P(serverName,localhost)}</stringProp>
            <stringProp name="HTTPSampler.port">${__P(serverPort,8080)}</stringProp>
            <stringProp name="HTTPSampler.protocol">https</stringProp>
            <stringProp name="HTTPSampler.connect_timeout">1000</stringProp>
            <stringProp name="HTTPSampler.response_timeout">1000</stringProp>
          </ConfigTestElement>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="IAM" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="IAM / Signup" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata"></stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.iam.IamUserService/SignUp</stringProp>
              <stringProp name="GRPCSampler.deadline">3000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;type&quot;:1,&quot;first_name&quot;:&quot;Open&quot;,&quot;last_name&quot;:&quot;Cdx&quot;,&quot;username&quot;:&quot;open_${userPrefix}_${__threadNum}_g@opencdx.com&quot;,&quot;password&quot;:&quot;password2&quot;,&quot;system&quot;:&quot;opencdx-test&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract User ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">user_id_g</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.iam_user.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/user/verify [GET]" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/iam/user/verify/${user_id_g}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="IAM / Login" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata"></stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.iam.IamUserService/Login</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;userName&quot;:&quot;open_${userPrefix}_${__threadNum}_g@opencdx.com&quot;,&quot;password&quot;:&quot;password2&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Access Token" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">token_g</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="IAM / Current User" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.iam.IamUserService/CurrentUser</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract User ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">user_id_g</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.iam_user.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="IAM / List Users" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.iam.IamUserService/ListIamUsers</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;lastname&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="IAM / Update User" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.iam.IamUserService/UpdateIamUser</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;iam_user&quot;:{
		&quot;id&quot;:&quot;${user_id_g}&quot;,
		&quot;system_name&quot;:&quot;changed&quot;,
		&quot;username&quot;:&quot;open_${userPrefix}_${__threadNum}_g@opencdx.com&quot;,
		&quot;type&quot;:1
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="IAM / Get User" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.iam.IamUserService/GetIamUser</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;id&quot;:&quot;${user_id_g}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="IAM / Change Password" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.iam.IamUserService/ChangePassword</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;id&quot;:&quot;${user_id_g}&quot;,
	&quot;old_password&quot;:&quot;password2&quot;,
	&quot;new_password&quot;:&quot;password&quot;,
	&quot;new_password_confirmation&quot;:&quot;password&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Connected Test /  Add Country" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.CountryService/add_country</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;name&quot;:&quot;US-INDIA&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Country Template ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">countryId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Connected Test /  Get Country" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.CountryService/get_country_by_id</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;country_id&quot;:&quot;${countryId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Connected Test /  Update Country" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.CountryService/update_country</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;id&quot;:&quot;${countryId}&quot;,
	&quot;name&quot;:&quot;Canada&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="IAM / Create Organization" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.organization.OrganizationService/CreateOrganization</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;organization&quot; : {
    &quot;name&quot; : &quot;OrganizationName&quot;,
    &quot;description&quot; : &quot;OrganizationDescription&quot;,
    &quot;foundingDate&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;address&quot; : {
      &quot;countryId&quot; : &quot;${countryId}&quot;,
      &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
      &quot;address1&quot; : &quot;Address Line 1&quot;,
      &quot;address2&quot; : &quot;Address Line 2&quot;,
      &quot;address3&quot; : &quot;Address Line 3&quot;,
      &quot;city&quot; : &quot;City&quot;,
      &quot;state&quot; : &quot;state&quot;,
      &quot;postalCode&quot; : &quot;Postcode&quot;
    },
    &quot;website&quot; : &quot;http://&quot;,
    &quot;industry&quot; : &quot;Medical&quot;,
    &quot;revenue&quot; : 100.0,
    &quot;logoUrl&quot; : &quot;http://&quot;,
    &quot;socialMediaLinks&quot; : [ &quot;http://&quot; ],
    &quot;missionStatement&quot; : &quot;Mission Statement&quot;,
    &quot;contacts&quot; : [ {
      &quot;name&quot; : {
        &quot;title&quot; : &quot;&quot;,
        &quot;firstName&quot; : &quot;Contact&quot;,
        &quot;middleName&quot; : &quot;&quot;,
        &quot;lastName&quot; : &quot;Name&quot;,
        &quot;suffix&quot; : &quot;&quot;
      },
      &quot;addresses&quot; : [ ],
      &quot;phoneNumbers&quot; : [ {
        &quot;number&quot; : &quot;123-456-7890&quot;,
        &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;
      } ],
      &quot;email&quot; : [ {
        &quot;email&quot; : &quot;contact@organization&quot;,
        &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;
      } ]
    } ]
  }
}
</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Organization ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">organization_g</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.organization.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="IAM / Update Organization" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.organization.OrganizationService/UpdateOrganization</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;organization&quot; : {
    &quot;id&quot; : &quot;${organization_g}&quot;,
    &quot;name&quot; : &quot;OrganizationName&quot;,
    &quot;description&quot; : &quot;OrganizationDescription&quot;,
    &quot;foundingDate&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;address&quot; : {
      &quot;countryId&quot; : &quot;${countryId}&quot;,
      &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
      &quot;address1&quot; : &quot;Address Line 1&quot;,
      &quot;address2&quot; : &quot;Address Line 2&quot;,
      &quot;address3&quot; : &quot;Address Line 3&quot;,
      &quot;city&quot; : &quot;City&quot;,
      &quot;state&quot; : &quot;state&quot;,
      &quot;postalCode&quot; : &quot;Postcode&quot;
    },
    &quot;website&quot; : &quot;http://&quot;,
    &quot;industry&quot; : &quot;Medical&quot;,
    &quot;revenue&quot; : 100.0,
    &quot;logoUrl&quot; : &quot;http://&quot;,
    &quot;socialMediaLinks&quot; : [ &quot;http://&quot; ],
    &quot;missionStatement&quot; : &quot;Mission Statement&quot;,
    &quot;contacts&quot; : [ {
      &quot;name&quot; : {
        &quot;title&quot; : &quot;&quot;,
        &quot;firstName&quot; : &quot;Contact&quot;,
        &quot;middleName&quot; : &quot;&quot;,
        &quot;lastName&quot; : &quot;Name&quot;,
        &quot;suffix&quot; : &quot;&quot;
      },
      &quot;addresses&quot; : [ ],
      &quot;phoneNumbers&quot; : [ {
        &quot;number&quot; : &quot;123-456-7890&quot;,
        &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;
      } ],
      &quot;email&quot; : [ {
        &quot;email&quot; : &quot;contact@organization&quot;,
        &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;
      } ]
    } ]
  }
}
</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="IAM / GetOrganizationDetailsById" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.organization.OrganizationService/GetOrganizationDetailsById</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;organization_id&quot;:&quot;${organization_g}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="IAM / List Organization" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.organization.OrganizationService/ListOrganizations</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson"> { }</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="IAM / Create Workspace" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.organization.WorkspaceService/CreateWorkspace</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;workspace&quot; : {
    &quot;name&quot; : &quot;Workspace Name&quot;,
    &quot;description&quot; : &quot;Workspace Description&quot;,
    &quot;organizationId&quot; : &quot;${organization_g}&quot;,
    &quot;createdDate&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;location&quot; : &quot;San Diego, California, United States&quot;,
    &quot;manager&quot; : &quot;Bob&quot;,
    &quot;capacity&quot; : 32,
    &quot;facilities&quot; : [ &quot;Facility A&quot;, &quot;Facility B&quot; ],
    &quot;workspaceType&quot; : &quot;Workspace Type&quot;,
    &quot;workspaceImageUrls&quot; : [ &quot;http://&quot;, &quot;http://&quot; ],
    &quot;usagePolicy&quot; : &quot;usage Policy&quot;,
    &quot;availabilitySchedule&quot; : &quot;Monday - Friday&quot;,
    &quot;departments&quot; : [ {
      &quot;id&quot; : &quot;656784a0f01b3b4e73b03fb4&quot;,
      &quot;name&quot; : &quot;Department Name&quot;,
      &quot;description&quot; : &quot;Department Description&quot;,
      &quot;employees&quot; : [ {
        &quot;employeeId&quot; : &quot;65849dd16d2e0708c95e4b02&quot;,
        &quot;name&quot; : {
          &quot;title&quot; : &quot;&quot;,
          &quot;firstName&quot; : &quot;Employee&quot;,
          &quot;middleName&quot; : &quot;&quot;,
          &quot;lastName&quot; : &quot;Name&quot;,
          &quot;suffix&quot; : &quot;&quot;
        },
        &quot;title&quot; : &quot;Employee Title&quot;,
        &quot;phoneNumbers&quot; : [ {
          &quot;number&quot; : &quot;123-456-7890&quot;,
          &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;
        } ],
        &quot;email&quot; : [ {
          &quot;email&quot; : &quot;employee@deparment&quot;,
          &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;
        } ]
      } ]
    } ]
  }
}
</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract User ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">workspace_g</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.workspace.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="IAM / Update Workspace" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.organization.WorkspaceService/UpdateWorkspace</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;workspace&quot; : {
    &quot;id&quot; : &quot;${workspace_g}&quot;,
    &quot;name&quot; : &quot;Workspace Name&quot;,
    &quot;description&quot; : &quot;Workspace Description&quot;,
    &quot;organizationId&quot; : &quot;${organization_g}&quot;,
    &quot;createdDate&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;location&quot; : &quot;San Diego, California, United States&quot;,
    &quot;manager&quot; : &quot;Bob&quot;,
    &quot;capacity&quot; : 32,
    &quot;facilities&quot; : [ &quot;Facility A&quot;, &quot;Facility B&quot; ],
    &quot;workspaceType&quot; : &quot;Workspace Type&quot;,
    &quot;workspaceImageUrls&quot; : [ &quot;http://&quot;, &quot;http://&quot; ],
    &quot;usagePolicy&quot; : &quot;usage Policy&quot;,
    &quot;availabilitySchedule&quot; : &quot;Monday - Friday&quot;,
    &quot;departments&quot; : [ {
      &quot;id&quot; : &quot;656784a0f01b3b4e73b03fb4&quot;,
      &quot;name&quot; : &quot;Department Name&quot;,
      &quot;description&quot; : &quot;Department Description&quot;,
      &quot;employees&quot; : [ {
        &quot;employeeId&quot; : &quot;65849dd16d2e0708c95e4b02&quot;,
        &quot;name&quot; : {
          &quot;title&quot; : &quot;&quot;,
          &quot;firstName&quot; : &quot;Employee&quot;,
          &quot;middleName&quot; : &quot;&quot;,
          &quot;lastName&quot; : &quot;Name&quot;,
          &quot;suffix&quot; : &quot;&quot;
        },
        &quot;title&quot; : &quot;Employee Title&quot;,
        &quot;phoneNumbers&quot; : [ {
          &quot;number&quot; : &quot;123-456-7890&quot;,
          &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;
        } ],
        &quot;email&quot; : [ {
          &quot;email&quot; : &quot;employee@deparment&quot;,
          &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;
        } ]
      } ]
    } ]
  }
}
</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="IAM / GetWorkspaceDetailsById" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.organization.WorkspaceService/GetWorkspaceDetailsById</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;workspace_id&quot;:&quot;${workspace_g}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="IAM / Update Workspace" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.organization.WorkspaceService/ListWorkspaces</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token_g}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="HelloWorld" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="HelloWorld / SayHello" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.helloworld.Greeter/SayHello</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;name&quot;:&quot;Hello&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Audit" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="AuditService / Event" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.audit.AuditService/Event</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;created&quot; : &quot;1970-01-01T00:00:00Z&quot;,
  &quot;eventType&quot; : &quot;AUDIT_EVENT_TYPE_USER_PII_CREATED&quot;,
  &quot;actor&quot; : {
    &quot;identity&quot; : &quot;&quot;,
    &quot;role&quot; : &quot;&quot;,
    &quot;networkAddress&quot; : &quot;192.198.0.1&quot;,
    &quot;agentType&quot; : &quot;AGENT_TYPE_HUMAN_USER&quot;
  },
  &quot;purposeOfUse&quot; : &quot;&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Logistics - Devices Vendor Manufacturers TestCases" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  Add Manufacturer" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.ManufacturerService/add_manufacturer</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;name&quot;:&quot;PFIZER&quot;,
  &quot;manufacturerAddress&quot; : {
      &quot;countryId&quot; : &quot;${countryId}&quot;,
      &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
      &quot;address1&quot; : &quot;Address Line 1&quot;,
      &quot;address2&quot; : &quot;Address Line 2&quot;,
      &quot;address3&quot; : &quot;Address Line 3&quot;,
      &quot;city&quot; : &quot;City&quot;,
      &quot;state&quot; : &quot;state&quot;,
      &quot;postalCode&quot; : &quot;Postcode&quot;
    }
 }</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Manufacturer Template ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">manufacturerId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  Get Manufacturer" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.ManufacturerService/get_manufacturer_by_id</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;manufacturer_id&quot;:&quot;${manufacturerId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  Update Manufacturer" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.ManufacturerService/update_manufacturer</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;id&quot;:&quot;${manufacturerId}&quot;,&quot;name&quot;:&quot;RANBAXY&quot;,&quot;manufacturerAddress&quot; : {
      &quot;countryId&quot; : &quot;${countryId}&quot;,
      &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
      &quot;address1&quot; : &quot;Address Line 1&quot;,
      &quot;address2&quot; : &quot;Address Line 2&quot;,
      &quot;address3&quot; : &quot;Address Line 3&quot;,
      &quot;city&quot; : &quot;City&quot;,
      &quot;state&quot; : &quot;state&quot;,
      &quot;postalCode&quot; : &quot;Postcode&quot;
    }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  Add Vendor" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.VendorService/add_vendor</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;id&quot;:&quot;${manufacturerId}&quot;,&quot;name&quot;:&quot;RANBAXY&quot;,&quot;manufacturerAddress&quot; : {
      &quot;countryId&quot; : &quot;${countryId}&quot;,
      &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
      &quot;address1&quot; : &quot;Address Line 1&quot;,
      &quot;address2&quot; : &quot;Address Line 2&quot;,
      &quot;address3&quot; : &quot;Address Line 3&quot;,
      &quot;city&quot; : &quot;City&quot;,
      &quot;state&quot; : &quot;state&quot;,
      &quot;postalCode&quot; : &quot;Postcode&quot;
    }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Vendor Template ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">vendorId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  Get Vendor" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.VendorService/get_vendor_by_id</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;vendor_id&quot;:&quot;${vendorId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  Update Vendor" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.VendorService/update_vendor</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;id&quot;:&quot;${vendorId}&quot;,&quot;vendorName&quot;:&quot;VENDOR-UPDATED&quot;,&quot;vendorAddress&quot;:{
      &quot;countryId&quot; : &quot;${countryId}&quot;,
      &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
      &quot;address1&quot; : &quot;Address Line 1&quot;,
      &quot;address2&quot; : &quot;Address Line 2&quot;,
      &quot;address3&quot; : &quot;Address Line 3&quot;,
      &quot;city&quot; : &quot;City&quot;,
      &quot;state&quot; : &quot;state&quot;,
      &quot;postalCode&quot; : &quot;Postcode&quot;
    }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  Add TestCase" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.TestCaseService/add_test_case</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;manufacturerId&quot;:&quot;${manufacturerId}&quot;,&quot;vendorId&quot;:&quot;${vendorId}&quot;,&quot;batchNumber&quot;:&quot;10&quot;,&quot;serialNumber&quot;:&quot;2&quot;,&quot;deviceIds&quot; : [ ]}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract TestCase Template ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">testcaseId_g</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  Get TestCase" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.TestCaseService/get_test_case_by_id</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;test_case_id&quot;:&quot;${testcaseId_g}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  Add Device" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.DeviceService/add_device</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;manufacturerId&quot;:&quot;${manufacturerId}&quot;,&quot;manufacturerCountryId&quot; : &quot;${countryId}&quot;,&quot;vendorId&quot;:&quot;${vendorId}&quot;,&quot;vendorCountryId&quot; : &quot;${countryId}&quot;,&quot;testTypeId&quot;:&quot;TEST-ID-001&quot;,&quot;batchNumber&quot;:&quot;10&quot;,&quot;serialNumber&quot;:&quot;2&quot;,&quot;testCaseIds&quot; : [ &quot;${testcaseId_g}&quot; ]}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract DeviceId Template ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">deviceId_g</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  Update TestCase" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.TestCaseService/update_test_case</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;id&quot;:&quot;${testcaseId_g}&quot;,&quot;manufacturerId&quot;:&quot;${manufacturerId}&quot;,&quot;vendorId&quot;:&quot;${vendorId}&quot;,&quot;batchNumber&quot;:&quot;21&quot;,&quot;deviceIds&quot; : [ &quot;${deviceId_g}&quot; ]}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  Update Device" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.DeviceService/update_device</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;manufacturerId&quot;:&quot;${manufacturerId}&quot;,&quot;manufacturerCountryId&quot; : &quot;${countryId}&quot;,&quot;vendorId&quot;:&quot;${vendorId}&quot;,&quot;vendorCountryId&quot; : &quot;${countryId}&quot;,&quot;testTypeId&quot;:&quot;TEST-ID-001&quot;,&quot;batchNumber&quot;:&quot;20&quot;,&quot;serialNumber&quot;:&quot;5&quot;,&quot;testCaseIds&quot; : [ &quot;${testcaseId_g}&quot; ]}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  Get Device" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.DeviceService/get_device_by_id</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;device_id&quot;:&quot;${deviceId_g}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  List Countries" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.CountryService/listCountries</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;name&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  List Devices" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.DeviceService/list_devices</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;name&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  List Manufacturers" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.ManufacturerService/listManufacturers</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;name&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  List Testcaes" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.TestCaseService/list_test_case</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;name&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics /  List Vendors" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.inventory.VendorService/listVendors</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;name&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Media" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Media / CreateMedia" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.media.MediaService/CreateMedia</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;description&quot;: &quot;ex consectetur velit anim&quot;,
    &quot;labels&quot;: [
        &quot;ut et nulla sint&quot;,
        &quot;labore adipisicing&quot;
    ],
    &quot;name&quot;: &quot;dolore eiusmod quis labore dolor&quot;,
    &quot;short_description&quot;: &quot;enim sit&quot;,
    &quot;type&quot;: 2
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Media  ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">mediaId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.media.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/media/upload" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="./README.md" elementType="HTTPFileArg">
                    <stringProp name="File.mimetype">text/x-web-markdown</stringProp>
                    <stringProp name="File.path">./README.md</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">/media/upload/${mediaId}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Media / GetMedia" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.media.MediaService/GetMedia</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;id&quot;: &quot;${mediaId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Media  ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">download_endpoint</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.media.endpoint</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/media/download" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="./README.md" elementType="HTTPFileArg">
                    <stringProp name="File.mimetype">text/x-web-markdown</stringProp>
                    <stringProp name="File.path">./README.md</stringProp>
                    <stringProp name="File.paramname">file</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.path">${download_endpoint}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Media / UpdateMedia" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.media.MediaService/UpdateMedia</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;description&quot;: &quot;eiusmod&quot;,
    &quot;id&quot;: &quot;${mediaId}&quot;,
    &quot;labels&quot;: [
        &quot;tempor mollit nostrud culpa&quot;
    ],
    &quot;name&quot;: &quot;id&quot;,
    &quot;short_description&quot;: &quot;anim&quot;,
    &quot;type&quot;: &quot;MEDIA_TYPE_UNSPECIFIED&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Media / ListMedia" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.media.MediaService/ListMedia</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;lastname&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Health Profile" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Health / Create User Profile" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.profile.UserProfileService/CreateUserProfile</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;userProfile&quot; : {
    &quot;userId&quot; : &quot;${user_id_g}&quot;,
    &quot;nationalHealthId&quot; : &quot;b1349628-6f28-44ae-b600-7898fd9ff292&quot;,
    &quot;fullName&quot; : {
      &quot;title&quot; : &quot;&quot;,
      &quot;firstName&quot; : &quot;First&quot;,
      &quot;middleName&quot; : &quot;Middle&quot;,
      &quot;lastName&quot; : &quot;last&quot;,
      &quot;suffix&quot; : &quot;&quot;
    },
    &quot;contacts&quot; : [ {
      &quot;addresses&quot; : [ {
        &quot;countryId&quot; : &quot;${countryId}&quot;,
        &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
        &quot;address1&quot; : &quot;101 Main Street&quot;,
        &quot;city&quot; : &quot;City&quot;,
        &quot;state&quot; : &quot;CA&quot;,
        &quot;postalCode&quot; : &quot;12345&quot;
      } ],
      &quot;phoneNumbers&quot; : [ {
        &quot;number&quot; : &quot;1234567890&quot;,
        &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;
      } ],
      &quot;email&quot; : [ {
        &quot;email&quot; : &quot;email@email.com&quot;,
        &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;
      } ]
    } ],
    &quot;gender&quot; : &quot;GENDER_MALE&quot;,
    &quot;dateOfBirth&quot; : &quot;2023-10-08T02:45:04Z&quot;,
    &quot;placeOfBirth&quot; : {
      &quot;country&quot; : &quot;${countryId}&quot;,
      &quot;state&quot; : &quot;CA&quot;,
      &quot;city&quot; : &quot;City&quot;
    },
    &quot;photo&quot; : &quot;&quot;,
    &quot;communication&quot; : {
      &quot;language&quot; : &quot;EN&quot;,
      &quot;preferred&quot; : true,
      &quot;timeZone&quot; : &quot;EST&quot;
    },
    &quot;demographics&quot; : {
      &quot;ethnicity&quot; : &quot;Ethnicity&quot;,
      &quot;race&quot; : &quot;Race&quot;,
      &quot;nationality&quot; : &quot;USA&quot;,
      &quot;gender&quot; : &quot;GENDER_MALE&quot;
    },
    &quot;education&quot; : {
      &quot;entries&quot; : [ {
        &quot;degree&quot; : &quot;BA&quot;,
        &quot;institution&quot; : &quot;University&quot;,
        &quot;startDate&quot; : &quot;1992/08/01&quot;,
        &quot;completionDate&quot; : &quot;1996/05/30&quot;
      } ]
    },
    &quot;employeeIdentity&quot; : {
      &quot;organizationId&quot; : &quot;${organization_g}&quot;,
      &quot;workspaceId&quot; : &quot;${workspace_g}&quot;,
      &quot;employeeId&quot; : &quot;employeeID&quot;,
      &quot;identityVerified&quot; : true,
      &quot;status&quot; : &quot;Full Time&quot;
    },
    &quot;primaryContactInfo&quot; : {
      &quot;addresses&quot; : [ {
        &quot;countryId&quot; : &quot;${countryId}&quot;,
        &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
        &quot;address1&quot; : &quot;101 Main Street&quot;,
        &quot;city&quot; : &quot;City&quot;,
        &quot;state&quot; : &quot;CA&quot;,
        &quot;postalCode&quot; : &quot;12345&quot;
      } ],
      &quot;phoneNumbers&quot; : [ {
        &quot;number&quot; : &quot;1234567890&quot;,
        &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;
      } ],
      &quot;email&quot; : [ {
        &quot;email&quot; : &quot;email@email.com&quot;,
        &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;
      } ]
    },
    &quot;emergencyContact&quot; : {
      &quot;relationship&quot; : &quot;Emergency Contact&quot;,
      &quot;contactInfo&quot; : {
        &quot;name&quot; : {
          &quot;title&quot; : &quot;Mr.&quot;,
          &quot;firstName&quot; : &quot;First&quot;,
          &quot;middleName&quot; : &quot;Middle&quot;,
          &quot;lastName&quot; : &quot;last&quot;,
          &quot;suffix&quot; : &quot;Jr.&quot;
        },
        &quot;addresses&quot; : [ {
          &quot;countryId&quot; : &quot;${countryId}&quot;,
          &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
          &quot;address1&quot; : &quot;101 Main Street&quot;,
          &quot;city&quot; : &quot;City&quot;,
          &quot;state&quot; : &quot;CA&quot;,
          &quot;postalCode&quot; : &quot;12345&quot;
        } ],
        &quot;phoneNumbers&quot; : [ {
          &quot;number&quot; : &quot;1234567890&quot;,
          &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;
        } ],
        &quot;email&quot; : [ {
          &quot;email&quot; : &quot;email@email.com&quot;,
          &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;
        } ]
      }
    },
    &quot;pharmacyDetails&quot; : {
      &quot;pharmacyName&quot; : &quot;Pharmacy Name&quot;,
      &quot;pharmacyAddress&quot; : {
        &quot;countryId&quot; : &quot;${countryId}&quot;,
        &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
        &quot;address1&quot; : &quot;101 Main Street&quot;,
        &quot;city&quot; : &quot;City&quot;,
        &quot;state&quot; : &quot;CA&quot;,
        &quot;postalCode&quot; : &quot;12345&quot;
      },
      &quot;pharmacyContact&quot; : {
        &quot;addresses&quot; : [ {
          &quot;countryId&quot; : &quot;${countryId}&quot;,
          &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
          &quot;address1&quot; : &quot;101 Main Street&quot;,
          &quot;city&quot; : &quot;City&quot;,
          &quot;state&quot; : &quot;CA&quot;,
          &quot;postalCode&quot; : &quot;12345&quot;
        } ],
        &quot;phoneNumbers&quot; : [ {
          &quot;number&quot; : &quot;1234567890&quot;,
          &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;
        } ],
        &quot;email&quot; : [ {
          &quot;email&quot; : &quot;email@email.com&quot;,
          &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;
        } ]
      }
    },
    &quot;vaccineAdministered&quot; : [ {
      &quot;administrationDate&quot; : &quot;2021/06/01&quot;,
      &quot;fips&quot; : &quot;12345&quot;,
      &quot;locality&quot; : &quot;CA&quot;,
      &quot;healthDistrict&quot; : &quot;District&quot;,
      &quot;facilityType&quot; : &quot;Clinic&quot;,
      &quot;manufacturer&quot; : &quot;65849f9ea4a7463cc04ee652&quot;,
      &quot;doseNumber&quot; : 20,
      &quot;vaccineType&quot; : &quot;COVID-19&quot;
    } ],
    &quot;dependentId&quot; : [ &quot;${user_id_g}&quot; ],
    &quot;knownAllergies&quot; : [ {
      &quot;allergen&quot; : &quot;Evergreen Trees&quot;,
      &quot;reaction&quot; : &quot;Respiratory Distress&quot;,
      &quot;isSevere&quot; : true,
      &quot;onsetDate&quot; : &quot;1975/12/20&quot;,
      &quot;lastOccurrence&quot; : &quot;1976/12/25&quot;,
      &quot;notes&quot; : &quot;Christmas Trees&quot;
    } ],
    &quot;currentMedications&quot; : [ {
      &quot;name&quot; : &quot;Singular&quot;,
      &quot;dosage&quot; : &quot;5mg&quot;,
      &quot;instructions&quot; : &quot;Take 1 pill at night&quot;,
      &quot;routeOfAdministration&quot; : &quot;Oral&quot;,
      &quot;frequency&quot; : &quot;Daily&quot;,
      &quot;startDate&quot; : &quot;1976/12/26&quot;,
      &quot;endDate&quot; : &quot;EOL&quot;,
      &quot;prescribingDoctor&quot; : &quot;Dr. OpenCDX&quot;,
      &quot;pharmacy&quot; : &quot;Pharmacy&quot;,
      &quot;isPrescription&quot; : true
    } ],
    &quot;isActive&quot; : false,
    &quot;email&quot; : [ ],
    &quot;phone&quot; : [ ],
    &quot;address&quot; : [ {
      &quot;countryId&quot; : &quot;${countryId}&quot;,
      &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
      &quot;address1&quot; : &quot;101 Main Street&quot;,
      &quot;city&quot; : &quot;City&quot;,
      &quot;state&quot; : &quot;CA&quot;,
      &quot;postalCode&quot; : &quot;12345&quot;
    } ]
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Profile ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">patient_id_g</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.userProfile.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Health / Update User Profile" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.profile.UserProfileService/UpdateUserProfile</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;userId&quot; : &quot;${user_id_g}&quot;,
  &quot;updatedProfile&quot; : {
    &quot;id&quot; : &quot;${patient_id_g}&quot;,
    &quot;nationalHealthId&quot; : &quot;b1349628-6f28-44ae-b600-7898fd9ff292&quot;,
    &quot;fullName&quot; : {
      &quot;title&quot; : &quot;&quot;,
      &quot;firstName&quot; : &quot;First&quot;,
      &quot;middleName&quot; : &quot;Middle&quot;,
      &quot;lastName&quot; : &quot;last&quot;,
      &quot;suffix&quot; : &quot;&quot;
    },
    &quot;contacts&quot; : [ {
      &quot;addresses&quot; : [ {
        &quot;countryId&quot; : &quot;${countryId}&quot;,
        &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
        &quot;address1&quot; : &quot;101 Main Street&quot;,
        &quot;city&quot; : &quot;City&quot;,
        &quot;state&quot; : &quot;CA&quot;,
        &quot;postalCode&quot; : &quot;12345&quot;
      } ],
      &quot;phoneNumbers&quot; : [ {
        &quot;number&quot; : &quot;1234567890&quot;,
        &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;
      } ],
      &quot;email&quot; : [ {
        &quot;email&quot; : &quot;email@email.com&quot;,
        &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;
      } ]
    } ],
    &quot;gender&quot; : &quot;GENDER_MALE&quot;,
    &quot;dateOfBirth&quot; : &quot;2023-10-08T02:45:04Z&quot;,
    &quot;placeOfBirth&quot; : {
      &quot;country&quot; : &quot;${countryId}&quot;,
      &quot;state&quot; : &quot;CA&quot;,
      &quot;city&quot; : &quot;City&quot;
    },
    &quot;photo&quot; : &quot;&quot;,
    &quot;communication&quot; : {
      &quot;language&quot; : &quot;EN&quot;,
      &quot;preferred&quot; : true,
      &quot;timeZone&quot; : &quot;EST&quot;
    },
    &quot;demographics&quot; : {
      &quot;ethnicity&quot; : &quot;Ethnicity&quot;,
      &quot;race&quot; : &quot;Race&quot;,
      &quot;nationality&quot; : &quot;USA&quot;,
      &quot;gender&quot; : &quot;GENDER_MALE&quot;
    },
    &quot;education&quot; : {
      &quot;entries&quot; : [ {
        &quot;degree&quot; : &quot;BA&quot;,
        &quot;institution&quot; : &quot;University&quot;,
        &quot;startDate&quot; : &quot;1992/08/01&quot;,
        &quot;completionDate&quot; : &quot;1996/05/30&quot;
      } ]
    },
    &quot;employeeIdentity&quot; : {
      &quot;organizationId&quot; : &quot;${organization_g}&quot;,
      &quot;workspaceId&quot; : &quot;${workspace_g}&quot;,
      &quot;employeeId&quot; : &quot;employeeID&quot;,
      &quot;identityVerified&quot; : true,
      &quot;status&quot; : &quot;Full Time&quot;
    },
    &quot;primaryContactInfo&quot; : {
      &quot;addresses&quot; : [ {
        &quot;countryId&quot; : &quot;${countryId}&quot;,
        &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
        &quot;address1&quot; : &quot;101 Main Street&quot;,
        &quot;city&quot; : &quot;City&quot;,
        &quot;state&quot; : &quot;CA&quot;,
        &quot;postalCode&quot; : &quot;12345&quot;
      } ],
      &quot;phoneNumbers&quot; : [ {
        &quot;number&quot; : &quot;1234567890&quot;,
        &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;
      } ],
      &quot;email&quot; : [ {
        &quot;email&quot; : &quot;email@email.com&quot;,
        &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;
      } ]
    },
    &quot;emergencyContact&quot; : {
      &quot;relationship&quot; : &quot;Emergency Contact&quot;,
      &quot;contactInfo&quot; : {
        &quot;name&quot; : {
          &quot;title&quot; : &quot;Mr.&quot;,
          &quot;firstName&quot; : &quot;First&quot;,
          &quot;middleName&quot; : &quot;Middle&quot;,
          &quot;lastName&quot; : &quot;last&quot;,
          &quot;suffix&quot; : &quot;Jr.&quot;
        },
        &quot;addresses&quot; : [ {
          &quot;countryId&quot; : &quot;${countryId}&quot;,
          &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
          &quot;address1&quot; : &quot;101 Main Street&quot;,
          &quot;city&quot; : &quot;City&quot;,
          &quot;state&quot; : &quot;CA&quot;,
          &quot;postalCode&quot; : &quot;12345&quot;
        } ],
        &quot;phoneNumbers&quot; : [ {
          &quot;number&quot; : &quot;1234567890&quot;,
          &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;
        } ],
        &quot;email&quot; : [ {
          &quot;email&quot; : &quot;email@email.com&quot;,
          &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;
        } ]
      }
    },
    &quot;pharmacyDetails&quot; : {
      &quot;pharmacyName&quot; : &quot;Pharmacy Name&quot;,
      &quot;pharmacyAddress&quot; : {
        &quot;countryId&quot; : &quot;${countryId}&quot;,
        &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
        &quot;address1&quot; : &quot;101 Main Street&quot;,
        &quot;city&quot; : &quot;City&quot;,
        &quot;state&quot; : &quot;CA&quot;,
        &quot;postalCode&quot; : &quot;12345&quot;
      },
      &quot;pharmacyContact&quot; : {
        &quot;addresses&quot; : [ {
          &quot;countryId&quot; : &quot;${countryId}&quot;,
          &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
          &quot;address1&quot; : &quot;101 Main Street&quot;,
          &quot;city&quot; : &quot;City&quot;,
          &quot;state&quot; : &quot;CA&quot;,
          &quot;postalCode&quot; : &quot;12345&quot;
        } ],
        &quot;phoneNumbers&quot; : [ {
          &quot;number&quot; : &quot;1234567890&quot;,
          &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;
        } ],
        &quot;email&quot; : [ {
          &quot;email&quot; : &quot;email@email.com&quot;,
          &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;
        } ]
      }
    },
    &quot;vaccineAdministered&quot; : [ {
      &quot;administrationDate&quot; : &quot;2021/06/01&quot;,
      &quot;fips&quot; : &quot;12345&quot;,
      &quot;locality&quot; : &quot;CA&quot;,
      &quot;healthDistrict&quot; : &quot;District&quot;,
      &quot;facilityType&quot; : &quot;Clinic&quot;,
      &quot;manufacturer&quot; : &quot;65849f9ea4a7463cc04ee652&quot;,
      &quot;doseNumber&quot; : 20,
      &quot;vaccineType&quot; : &quot;COVID-19&quot;
    } ],
    &quot;dependentId&quot; : [ &quot;${user_id_g}&quot; ],
    &quot;knownAllergies&quot; : [ {
      &quot;allergen&quot; : &quot;Evergreen Trees&quot;,
      &quot;reaction&quot; : &quot;Respiratory Distress&quot;,
      &quot;isSevere&quot; : true,
      &quot;onsetDate&quot; : &quot;1975/12/20&quot;,
      &quot;lastOccurrence&quot; : &quot;1976/12/25&quot;,
      &quot;notes&quot; : &quot;Christmas Trees&quot;
    } ],
    &quot;currentMedications&quot; : [ {
      &quot;name&quot; : &quot;Singular&quot;,
      &quot;dosage&quot; : &quot;5mg&quot;,
      &quot;instructions&quot; : &quot;Take 1 pill at night&quot;,
      &quot;routeOfAdministration&quot; : &quot;Oral&quot;,
      &quot;frequency&quot; : &quot;Daily&quot;,
      &quot;startDate&quot; : &quot;1976/12/26&quot;,
      &quot;endDate&quot; : &quot;EOL&quot;,
      &quot;prescribingDoctor&quot; : &quot;Dr. OpenCDX&quot;,
      &quot;pharmacy&quot; : &quot;Pharmacy&quot;,
      &quot;isPrescription&quot; : true
    } ],
    &quot;isActive&quot; : false,
    &quot;email&quot; : [ ],
    &quot;phone&quot; : [ ],
    &quot;address&quot; : [ {
      &quot;countryId&quot; : &quot;${countryId}&quot;,
      &quot;addressPurpose&quot; : &quot;LOCATION&quot;,
      &quot;address1&quot; : &quot;101 Main Street&quot;,
      &quot;city&quot; : &quot;City&quot;,
      &quot;state&quot; : &quot;CA&quot;,
      &quot;postalCode&quot; : &quot;12345&quot;
    } ]
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Health / Get User Profile" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.profile.UserProfileService/GetUserProfile</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;user_id&quot;: &quot;${patient_id_g}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Communications Immediate" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/CreateEmailTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/CreateEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;subject&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_WELCOME&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Email Template ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">emailTemplateId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.template_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetEmailTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${emailTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetEmailTemplate (Cache)" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${emailTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/UpdateEmailTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/UpdateEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;templateId&quot;:&quot;${emailTemplateId}&quot;,&quot;subject&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;NOTIFICATION&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/listEmailTemplates" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/listEmailTemplates</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;lastname&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/CreateSMSTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/CreateSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;message&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_ALERT&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SMS Template ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">smsTemplateId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.template_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetSMSTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${smsTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetSMSTemplate (Cache)" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${smsTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/UpdateSMSTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/UpdateSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;templateId&quot;:&quot;${smsTemplateId}&quot;,&quot;message&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;NOTIFICATION&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/listSMSTemplates" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/listSMSTemplates</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;lastname&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/CreateNotificationEvent" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/CreateNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;eventName&quot;:&quot;&quot;,&quot;eventDescription&quot;:&quot;&quot;,&quot;emailTemplateId&quot;:&quot;${emailTemplateId}&quot;,&quot;smsTemplateId&quot;:&quot;${smsTemplateId}&quot;,&quot;eventParameters&quot;:[],&quot;priority&quot;:&quot;NOTIFICATION_PRIORITY_IMMEDIATE&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Event Id" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">eventId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.event_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetNotificationEvent" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${eventId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetNotificationEvent (Cache)" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${eventId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/UpdateNotificationEvent" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/UpdateNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;eventId&quot;:&quot;${eventId}&quot;,&quot;eventName&quot;:&quot;&quot;,&quot;eventDescription&quot;:&quot;&quot;,&quot;emailTemplateId&quot;:&quot;${emailTemplateId}&quot;,&quot;smsTemplateId&quot;:&quot;${smsTemplateId}&quot;,&quot;eventParameters&quot;:[],&quot;priority&quot;:&quot;NOTIFICATION_PRIORITY_IMMEDIATE&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/listNotificationEvents" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/listNotificationEvents</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;lastname&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/SendNotification" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/SendNotification</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;eventId&quot;:&quot;${eventId}&quot;,&quot;customData&quot;:{},&quot;toEmail&quot;:[&quot;testuser1@opencdx.com&quot;],&quot;ccEmail&quot;:[],&quot;bccEmail&quot;:[],&quot;emailAttachments&quot;:[],&quot;toPhoneNumber&quot;:[&quot;123-456-7890&quot;],&quot;variables&quot;:{},&quot;recipientsId&quot;:[],&quot;patientId&quot; : &quot;${patient_id_g}&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/DeleteEmailTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/DeleteEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${emailTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/DeleteNotificationEvent" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/DeleteNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${eventId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/DeleteSMSTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/DeleteSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${smsTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Communications High" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/CreateEmailTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/CreateEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;subject&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_WELCOME&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Email Template ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">emailTemplateId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.template_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetEmailTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${emailTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetEmailTemplate (Cache)" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${emailTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/UpdateEmailTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/UpdateEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;templateId&quot;:&quot;${emailTemplateId}&quot;,&quot;subject&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;NOTIFICATION&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/listEmailTemplates" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/listEmailTemplates</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;lastname&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/CreateSMSTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/CreateSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;message&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_ALERT&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SMS Template ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">smsTemplateId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.template_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetSMSTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${smsTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetSMSTemplate (Cache)" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${smsTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/UpdateSMSTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/UpdateSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;templateId&quot;:&quot;${smsTemplateId}&quot;,&quot;message&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;NOTIFICATION&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/listSMSTemplates" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/listSMSTemplates</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;lastname&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/CreateNotificationEvent" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/CreateNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;eventName&quot;:&quot;&quot;,&quot;eventDescription&quot;:&quot;&quot;,&quot;emailTemplateId&quot;:&quot;${emailTemplateId}&quot;,&quot;smsTemplateId&quot;:&quot;${smsTemplateId}&quot;,&quot;eventParameters&quot;:[],&quot;priority&quot;:&quot;NOTIFICATION_PRIORITY_HIGH&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Event Id" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">eventId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.event_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetNotificationEvent" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${eventId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetNotificationEvent (Cache)" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${eventId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/UpdateNotificationEvent" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/UpdateNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;eventId&quot;:&quot;${eventId}&quot;,&quot;eventName&quot;:&quot;&quot;,&quot;eventDescription&quot;:&quot;&quot;,&quot;emailTemplateId&quot;:&quot;${emailTemplateId}&quot;,&quot;smsTemplateId&quot;:&quot;${smsTemplateId}&quot;,&quot;eventParameters&quot;:[],&quot;priority&quot;:&quot;NOTIFICATION_PRIORITY_HIGH&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/listNotificationEvents" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/listNotificationEvents</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;lastname&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/SendNotification" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/SendNotification</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;eventId&quot;:&quot;${eventId}&quot;,&quot;customData&quot;:{},&quot;toEmail&quot;:[&quot;testuser1@opencdx.com&quot;],&quot;ccEmail&quot;:[],&quot;bccEmail&quot;:[],&quot;emailAttachments&quot;:[],&quot;toPhoneNumber&quot;:[&quot;123-456-7890&quot;],&quot;variables&quot;:{},&quot;recipientsId&quot;:[],&quot;patientId&quot; :  &quot;${patient_id_g}&quot; }</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Communications Medium" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/CreateEmailTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/CreateEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;subject&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_WELCOME&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Email Template ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">emailTemplateId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.template_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetEmailTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${emailTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetEmailTemplate (Cache)" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${emailTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/UpdateEmailTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/UpdateEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;templateId&quot;:&quot;${emailTemplateId}&quot;,&quot;subject&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;NOTIFICATION&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/listEmailTemplates" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/listEmailTemplates</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;lastname&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/CreateSMSTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/CreateSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;message&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_ALERT&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SMS Template ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">smsTemplateId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.template_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetSMSTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${smsTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetSMSTemplate (Cache)" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${smsTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/UpdateSMSTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/UpdateSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;templateId&quot;:&quot;${smsTemplateId}&quot;,&quot;message&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;NOTIFICATION&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/listSMSTemplates" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/listSMSTemplates</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;lastname&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/CreateNotificationEvent" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/CreateNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;eventName&quot;:&quot;&quot;,&quot;eventDescription&quot;:&quot;&quot;,&quot;emailTemplateId&quot;:&quot;${emailTemplateId}&quot;,&quot;smsTemplateId&quot;:&quot;${smsTemplateId}&quot;,&quot;eventParameters&quot;:[],&quot;priority&quot;:&quot;NOTIFICATION_PRIORITY_MEDIUM&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Event Id" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">eventId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.event_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetNotificationEvent" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${eventId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetNotificationEvent (Cache)" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${eventId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/UpdateNotificationEvent" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/UpdateNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;eventId&quot;:&quot;${eventId}&quot;,&quot;eventName&quot;:&quot;&quot;,&quot;eventDescription&quot;:&quot;&quot;,&quot;emailTemplateId&quot;:&quot;${emailTemplateId}&quot;,&quot;smsTemplateId&quot;:&quot;${smsTemplateId}&quot;,&quot;eventParameters&quot;:[],&quot;priority&quot;:&quot;NOTIFICATION_PRIORITY_MEDIUM&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/listNotificationEvents" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/listNotificationEvents</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;lastname&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/SendNotification" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/SendNotification</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;eventId&quot;:&quot;${eventId}&quot;,&quot;customData&quot;:{},&quot;toEmail&quot;:[&quot;testuser1@opencdx.com&quot;],&quot;ccEmail&quot;:[],&quot;bccEmail&quot;:[],&quot;emailAttachments&quot;:[],&quot;toPhoneNumber&quot;:[&quot;123-456-7890&quot;],&quot;variables&quot;:{},&quot;recipientsId&quot;:[],&quot;patientId&quot; : &quot;${patient_id_g}&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Communications Low" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/CreateEmailTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/CreateEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;subject&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_WELCOME&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Email Template ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">emailTemplateId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.template_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetEmailTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${emailTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetEmailTemplate (Cache)" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${emailTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/UpdateEmailTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/UpdateEmailTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;templateId&quot;:&quot;${emailTemplateId}&quot;,&quot;subject&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;NOTIFICATION&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/listEmailTemplates" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/listEmailTemplates</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;lastname&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/CreateSMSTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/CreateSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;message&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_ALERT&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SMS Template ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">smsTemplateId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.template_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetSMSTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${smsTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetSMSTemplate (Cache)" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${smsTemplateId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/UpdateSMSTemplate" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/UpdateSMSTemplate</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;templateId&quot;:&quot;${smsTemplateId}&quot;,&quot;message&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;NOTIFICATION&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/listSMSTemplates" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/listSMSTemplates</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;lastname&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/CreateNotificationEvent" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/CreateNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;eventName&quot;:&quot;&quot;,&quot;eventDescription&quot;:&quot;&quot;,&quot;emailTemplateId&quot;:&quot;${emailTemplateId}&quot;,&quot;smsTemplateId&quot;:&quot;${smsTemplateId}&quot;,&quot;eventParameters&quot;:[],&quot;priority&quot;:&quot;NOTIFICATION_PRIORITY_LOW&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Event Id" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">eventId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.event_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetNotificationEvent" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${eventId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/GetNotificationEvent (Cache)" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;template_id&quot;: &quot;${eventId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/UpdateNotificationEvent" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/UpdateNotificationEvent</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;eventId&quot;:&quot;${eventId}&quot;,&quot;eventName&quot;:&quot;&quot;,&quot;eventDescription&quot;:&quot;&quot;,&quot;emailTemplateId&quot;:&quot;${emailTemplateId}&quot;,&quot;smsTemplateId&quot;:&quot;${smsTemplateId}&quot;,&quot;eventParameters&quot;:[],&quot;priority&quot;:&quot;NOTIFICATION_PRIORITY_LOW&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/listNotificationEvents" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/listNotificationEvents</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;lastname&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="CommunicationService/SendNotification" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/SendNotification</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{&quot;eventId&quot;:&quot;${eventId}&quot;,&quot;customData&quot;:{},&quot;toEmail&quot;:[&quot;testuser1@opencdx.com&quot;],&quot;ccEmail&quot;:[],&quot;bccEmail&quot;:[],&quot;emailAttachments&quot;:[],&quot;toPhoneNumber&quot;:[&quot;123-456-7890&quot;],&quot;variables&quot;:{},&quot;recipientsId&quot;:[],&quot;patientId&quot; : &quot;${patient_id_g}&quot;}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Connected Lab" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Connected Lab / CreateConnectedLab" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.lab.connected.ConnectedLabService/CreateConnectedLab</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;connected_lab&quot;:{
		&quot;name&quot;:&quot;Default_Lab&quot;,
		&quot;identifier&quot;:&quot;default&quot;,
		&quot;organization_id&quot;:&quot;${organization_g}&quot;,
		&quot;workspace_id&quot;:&quot;${workspace_g}&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Connected lab  ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">connected_lab_id_g</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.connected_lab.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Connected Lab / GetConnectedLab" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.lab.connected.ConnectedLabService/GetConnectedLab</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;connected_lab_id&quot;:&quot;${connected_lab_id_g}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Connected Lab / UpdateConnectedLab" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.lab.connected.ConnectedLabService/UpdateConnectedLab</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;connected_lab&quot;:{
		&quot;id&quot;:&quot;${connected_lab_id_g}&quot;,
		&quot;name&quot;:&quot;Default gRPC Lab&quot;,
		&quot;identifier&quot;:&quot;default&quot;,
		&quot;organization_id&quot;:&quot;${organization_g}&quot;,
		&quot;workspace_id&quot;:&quot;${workspace_g}&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Health- Connected Tests" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Connected Test /  SubmitTest" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.connected.HealthcareService/SubmitTest</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;basicInfo&quot;: {
        &quot;healthServiceId&quot;: &quot;amet minim culpa sed&quot;,
        &quot;nationalHealthId&quot;: 677453581,
        &quot;source&quot;: &quot;ea&quot;,
        &quot;organizationId&quot; : &quot;${organization_g}&quot;,
        &quot;workspaceId&quot; : &quot;${workspace_g}&quot;,
        &quot;type&quot;: &quot;aliqua culpa aute enim&quot;,
        &quot;patientId&quot;: &quot;${patient_id_g}&quot;,
        &quot;vendorLabTestId&quot;: &quot;ut Ut velit non&quot;
    },
    &quot;orderInfo&quot;: {
        &quot;encounterId&quot;: &quot;laboris fugiat&quot;,
        &quot;isSyncedWithEHR&quot;: true,
        &quot;orderId&quot;: &quot;cupidatat occaecat mollit sit ad&quot;,
        &quot;questionnaireId&quot;: &quot;proident sit eu dolor&quot;,
        &quot;result&quot;: &quot;officia anim sed&quot;,
        &quot;status&quot;: &quot;adipisicing&quot;,
        &quot;statusMessage&quot;: &quot;irure ut officia&quot;,
        &quot;statusMessageActions&quot;: [
            {
                &quot;id&quot;: &quot;deserunt enim qui&quot;,
                &quot;Value&quot;: &quot;ex esse&quot;,
                &quot;Description&quot;: &quot;incididunt&quot;
            },
            {
                &quot;Value&quot;: &quot;eu non occaecat elit&quot;,
                &quot;id&quot;: &quot;ipsum nisi&quot;,
                &quot;Description&quot;: &quot;officia quis&quot;
            },
            {
                &quot;id&quot;: &quot;nulla est ut fugiat&quot;,
                &quot;Description&quot;: &quot;exercitation dolore irure ipsum Excepteur&quot;,
                &quot;Value&quot;: &quot;Duis aliqua amet&quot;
            },
            {
                &quot;Value&quot;: &quot;sed est adipisicing ullamco&quot;,
                &quot;id&quot;: &quot;in aliqua minim quis consectetur&quot;,
                &quot;Description&quot;: &quot;adipisicing ipsum et esse&quot;
            }
        ]
    },
    &quot;paymentDetails&quot;: {
        &quot;insuranceInfoId&quot;: &quot;Duis Ut exercitation cillum&quot;,
        &quot;paymentDetails&quot;: &quot;in&quot;,
        &quot;paymentMode&quot;: &quot;commodo in deserunt sunt Lorem&quot;,
        &quot;paymentTransactionId&quot;: &quot;nisi eiusmod&quot;
    },
    &quot;providerInfo&quot;: {
        &quot;assignedProviderID&quot;: -44602025,
        &quot;orderingProviderId&quot;: &quot;dolore et tempor&quot;,
        &quot;orderingProviderNPI&quot;: -211209566
    },
    &quot;testDetails&quot;: {
    	   &quot;mediaId&quot;: &quot;${mediaId}&quot;,	
        &quot;deviceIdentifier&quot;: &quot;${deviceId_g}&quot;,
        &quot;deviceSerialNumber&quot;: &quot;sunt quis irure enim&quot;,
        &quot;diagnostics&quot;: &quot;consequat amet ut&quot;,
        &quot;internalTestId&quot;: &quot;ullamco in&quot;,
        &quot;isAutoGenerated&quot;: false,
        &quot;isOnsiteTest&quot;: true,
        &quot;labTestType&quot;: &quot;quis deserunt eu commodo adipisicing&quot;,
        &quot;labVendorConfirmationId&quot;: &quot;ad tempor incididunt ipsum quis&quot;,
        &quot;medicalCode&quot;: &quot;pariatur non sit exercitation&quot;,
        &quot;medications&quot;: &quot;sit sed Ut ut&quot;,
        &quot;metadata&quot;: {
            &quot;cassetteExpirationDate&quot;: &quot;sint consequat reprehenderit ut&quot;,
            &quot;cassetteLotNumber&quot;: &quot;sed est non qui&quot;,
            &quot;cassetteVerification&quot;: &quot;ad cillum&quot;,
            &quot;imageType&quot;: &quot;cupidatat&quot;,
            &quot;kitUploadID&quot;: &quot;Lorem deserunt&quot;,
            &quot;labTestOrderableId&quot;: &quot;et sit nostrud ex cupidatat&quot;,
            &quot;manufacturer&quot;: &quot;quis cillum&quot;,
            &quot;outcome&quot;: &quot;reprehenderit veniam ut Ut&quot;,
            &quot;outcomeIgG&quot;: true,
            &quot;outcomeIgM&quot;: true,
            &quot;qrData&quot;: &quot;incididunt pariatur&quot;,
            &quot;responseCode&quot;: 1699231156,
            &quot;responseMessage&quot;: &quot;commodo mollit culpa quis consectetur&quot;,
            &quot;responseTitle&quot;: &quot;Ut laboris sint nisi non&quot;,
            &quot;selfAssessmentOutcome&quot;: &quot;dolore officia&quot;,
            &quot;selfAssessmentOutcomeIgG&quot;: false,
            &quot;selfAssessmentOutcomeIgM&quot;: true,
            &quot;skuId&quot;: &quot;cupidatat anim officia&quot;,
            &quot;type&quot;: &quot;fugiat incididunt nisi dolor sunt&quot;
        },
        &quot;notificationFlag&quot;: &quot;ut nulla sint&quot;,
        &quot;orderableTestIds&quot;: [
            &quot;est enim cupidatat dolore&quot;
        ],
        &quot;orderableTestResults&quot;: [
            {
                &quot;responseMessage&quot;: &quot;ipsum reprehenderit&quot;,
                &quot;responseTitle&quot;: &quot;voluptate Duis et&quot;,
                &quot;outcome&quot;: &quot;velit sit Ut&quot;,
                &quot;orderableTestId&quot;: &quot;cillum&quot;,
                &quot;collectionDate&quot;: &quot;ut&quot;,
                &quot;testResult&quot;: &quot;aliquip tempor cillum reprehenderit officia&quot;,
                &quot;responseCode&quot;: 1582878818
            }
        ],
        &quot;orderableTests&quot;: [
            {
                &quot;orderableTestId&quot;: &quot;irure&quot;
            },
            {
                &quot;orderableTestId&quot;: &quot;aute elit aliqua ea&quot;
            },
            {
                &quot;orderableTestId&quot;: &quot;nostrud laborum Lorem eu&quot;
            },
            {
                &quot;orderableTestId&quot;: &quot;deserunt veniam voluptate&quot;
            },
            {
                &quot;orderableTestId&quot;: &quot;minim occaecat sint ut cupidatat&quot;
            }
        ],
        &quot;orderReceiptPath&quot;: &quot;deserunt&quot;,
        &quot;orderStatusFlag&quot;: &quot;ullamco et ad eu&quot;,
        &quot;referrals&quot;: &quot;id ut est elit eiusmod&quot;,
        &quot;reportingFlag&quot;: &quot;commodo in incididunt fugiat laborum&quot;,
        &quot;requisitionBase64&quot;: &quot;amet dolor&quot;,
        &quot;specimenType&quot;: &quot;sed exercitation&quot;,
        &quot;specimenId&quot;: &quot;sint eu voluptate cupidatat&quot;,
        &quot;testClassification&quot;: &quot;magna enim id qui officia&quot;,
        &quot;testName&quot;: &quot;Connected Test A&quot;
    },
    &quot;testNotes&quot;: {
        &quot;diagnosticNotes&quot;: &quot;qui ullamco&quot;,
        &quot;medicationNotes&quot;: &quot;non aute consectetur qui cupidatat&quot;,
        &quot;notes&quot;: &quot;non Duis cupidatat dolor&quot;,
        &quot;referralNotes&quot;: &quot;aliquip ullamco minim&quot;
    }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Connected Test Id" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">connectedTestId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.submission_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Connected Test /  GetTestDetailsById" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.connected.HealthcareService/GetTestDetailsById</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;test_id&quot;:&quot;${connectedTestId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Connected Test /  ListConnectedTests" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.connected.HealthcareService/ListConnectedTests</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;pagination&quot;:{
		&quot;page_number&quot;:1,
		&quot;page_size&quot;:10,
		&quot;sort_ascending&quot;:true,
		&quot;sort&quot;:&quot;lastname&quot;
	},
    &quot;patientId&quot;: &quot;${patient_id_g}&quot;
}
</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Connected Lab / SubmitLabFindings" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.lab.connected.ConnectedLabService/SubmitLabFindings</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;basicInfo&quot;:{
		&quot;id&quot;:&quot;${connectedTestId}&quot;,
		&quot;vendor_lab_test_id&quot;:&quot;41bbe3fa-babf-4e9f-bc58-8c394cf268c2&quot;,
		&quot;type&quot;:&quot;Hello&quot;,
		&quot;patient_id&quot;:&quot;${patient_id_g}&quot;,
		&quot;national_health_id&quot;:&quot;a5a21c5e-e348-4639-a123-a71a0f1975f8&quot;,
		&quot;health_service_id&quot;:&quot;e8c994f6-19c6-4d65-8f90-22bbdd01fe99&quot;,
		&quot;organization_id&quot;:&quot;${organization_g}&quot;,
		&quot;workspace_id&quot;:&quot;${workspace_g}&quot;,
		&quot;source&quot;:&quot;Hello&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Connected Tests Loops" enabled="true">
            <stringProp name="LoopController.loops">${__P(testCount,10)}</stringProp>
          </LoopController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Connected Test /  SubmitTest" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.connected.HealthcareService/SubmitTest</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;basicInfo&quot;: {
        &quot;healthServiceId&quot;: &quot;amet minim culpa sed&quot;,
        &quot;nationalHealthId&quot;: 677453581,
        &quot;source&quot;: &quot;ea&quot;,
        &quot;organizationId&quot; : &quot;${organization_g}&quot;,
        &quot;workspaceId&quot; : &quot;${workspace_g}&quot;,
        &quot;type&quot;: &quot;aliqua culpa aute enim&quot;,
        &quot;patientId&quot;: &quot;${patient_id_g}&quot;,
        &quot;vendorLabTestId&quot;: &quot;ut Ut velit non&quot;
    },
    &quot;orderInfo&quot;: {
        &quot;encounterId&quot;: &quot;laboris fugiat&quot;,
        &quot;isSyncedWithEHR&quot;: true,
        &quot;orderId&quot;: &quot;cupidatat occaecat mollit sit ad&quot;,
        &quot;questionnaireId&quot;: &quot;proident sit eu dolor&quot;,
        &quot;result&quot;: &quot;officia anim sed&quot;,
        &quot;status&quot;: &quot;adipisicing&quot;,
        &quot;statusMessage&quot;: &quot;irure ut officia&quot;,
        &quot;statusMessageActions&quot;: [
            {
                &quot;id&quot;: &quot;deserunt enim qui&quot;,
                &quot;Value&quot;: &quot;ex esse&quot;,
                &quot;Description&quot;: &quot;incididunt&quot;
            },
            {
                &quot;Value&quot;: &quot;eu non occaecat elit&quot;,
                &quot;id&quot;: &quot;ipsum nisi&quot;,
                &quot;Description&quot;: &quot;officia quis&quot;
            },
            {
                &quot;id&quot;: &quot;nulla est ut fugiat&quot;,
                &quot;Description&quot;: &quot;exercitation dolore irure ipsum Excepteur&quot;,
                &quot;Value&quot;: &quot;Duis aliqua amet&quot;
            },
            {
                &quot;Value&quot;: &quot;sed est adipisicing ullamco&quot;,
                &quot;id&quot;: &quot;in aliqua minim quis consectetur&quot;,
                &quot;Description&quot;: &quot;adipisicing ipsum et esse&quot;
            }
        ]
    },
    &quot;paymentDetails&quot;: {
        &quot;insuranceInfoId&quot;: &quot;Duis Ut exercitation cillum&quot;,
        &quot;paymentDetails&quot;: &quot;in&quot;,
        &quot;paymentMode&quot;: &quot;commodo in deserunt sunt Lorem&quot;,
        &quot;paymentTransactionId&quot;: &quot;nisi eiusmod&quot;
    },
    &quot;providerInfo&quot;: {
        &quot;assignedProviderID&quot;: -44602025,
        &quot;orderingProviderId&quot;: &quot;dolore et tempor&quot;,
        &quot;orderingProviderNPI&quot;: -211209566
    },
    &quot;testDetails&quot;: {
    	   &quot;mediaId&quot;: &quot;${mediaId}&quot;,	
        &quot;deviceIdentifier&quot;: &quot;${deviceId_g}&quot;,
        &quot;deviceSerialNumber&quot;: &quot;sunt quis irure enim&quot;,
        &quot;diagnostics&quot;: &quot;consequat amet ut&quot;,
        &quot;internalTestId&quot;: &quot;ullamco in&quot;,
        &quot;isAutoGenerated&quot;: false,
        &quot;isOnsiteTest&quot;: true,
        &quot;labTestType&quot;: &quot;quis deserunt eu commodo adipisicing&quot;,
        &quot;labVendorConfirmationId&quot;: &quot;ad tempor incididunt ipsum quis&quot;,
        &quot;medicalCode&quot;: &quot;pariatur non sit exercitation&quot;,
        &quot;medications&quot;: &quot;sit sed Ut ut&quot;,
        &quot;metadata&quot;: {
            &quot;cassetteExpirationDate&quot;: &quot;sint consequat reprehenderit ut&quot;,
            &quot;cassetteLotNumber&quot;: &quot;sed est non qui&quot;,
            &quot;cassetteVerification&quot;: &quot;ad cillum&quot;,
            &quot;imageType&quot;: &quot;cupidatat&quot;,
            &quot;kitUploadID&quot;: &quot;Lorem deserunt&quot;,
            &quot;labTestOrderableId&quot;: &quot;et sit nostrud ex cupidatat&quot;,
            &quot;manufacturer&quot;: &quot;quis cillum&quot;,
            &quot;outcome&quot;: &quot;reprehenderit veniam ut Ut&quot;,
            &quot;outcomeIgG&quot;: true,
            &quot;outcomeIgM&quot;: true,
            &quot;qrData&quot;: &quot;incididunt pariatur&quot;,
            &quot;responseCode&quot;: 1699231156,
            &quot;responseMessage&quot;: &quot;commodo mollit culpa quis consectetur&quot;,
            &quot;responseTitle&quot;: &quot;Ut laboris sint nisi non&quot;,
            &quot;selfAssessmentOutcome&quot;: &quot;dolore officia&quot;,
            &quot;selfAssessmentOutcomeIgG&quot;: false,
            &quot;selfAssessmentOutcomeIgM&quot;: true,
            &quot;skuId&quot;: &quot;cupidatat anim officia&quot;,
            &quot;type&quot;: &quot;fugiat incididunt nisi dolor sunt&quot;
        },
        &quot;notificationFlag&quot;: &quot;ut nulla sint&quot;,
        &quot;orderableTestIds&quot;: [
            &quot;est enim cupidatat dolore&quot;
        ],
        &quot;orderableTestResults&quot;: [
            {
                &quot;responseMessage&quot;: &quot;ipsum reprehenderit&quot;,
                &quot;responseTitle&quot;: &quot;voluptate Duis et&quot;,
                &quot;outcome&quot;: &quot;velit sit Ut&quot;,
                &quot;orderableTestId&quot;: &quot;cillum&quot;,
                &quot;collectionDate&quot;: &quot;ut&quot;,
                &quot;testResult&quot;: &quot;aliquip tempor cillum reprehenderit officia&quot;,
                &quot;responseCode&quot;: 1582878818
            }
        ],
        &quot;orderableTests&quot;: [
            {
                &quot;orderableTestId&quot;: &quot;irure&quot;
            },
            {
                &quot;orderableTestId&quot;: &quot;aute elit aliqua ea&quot;
            },
            {
                &quot;orderableTestId&quot;: &quot;nostrud laborum Lorem eu&quot;
            },
            {
                &quot;orderableTestId&quot;: &quot;deserunt veniam voluptate&quot;
            },
            {
                &quot;orderableTestId&quot;: &quot;minim occaecat sint ut cupidatat&quot;
            }
        ],
        &quot;orderReceiptPath&quot;: &quot;deserunt&quot;,
        &quot;orderStatusFlag&quot;: &quot;ullamco et ad eu&quot;,
        &quot;referrals&quot;: &quot;id ut est elit eiusmod&quot;,
        &quot;reportingFlag&quot;: &quot;commodo in incididunt fugiat laborum&quot;,
        &quot;requisitionBase64&quot;: &quot;amet dolor&quot;,
        &quot;specimenType&quot;: &quot;sed exercitation&quot;,
        &quot;specimenId&quot;: &quot;sint eu voluptate cupidatat&quot;,
        &quot;testClassification&quot;: &quot;magna enim id qui officia&quot;,
        &quot;testName&quot;: &quot;Connected Test B&quot;
    },
    &quot;testNotes&quot;: {
        &quot;diagnosticNotes&quot;: &quot;qui ullamco&quot;,
        &quot;medicationNotes&quot;: &quot;non aute consectetur qui cupidatat&quot;,
        &quot;notes&quot;: &quot;non Duis cupidatat dolor&quot;,
        &quot;referralNotes&quot;: &quot;aliquip ullamco minim&quot;
    }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Connected Test Id" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">connectedTestId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.submission_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ANF" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="ANF / CreateANFStatement" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.anf.ANFService/CreateANFStatement</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;time&quot; : {
    &quot;upperBound&quot; : &quot;100&quot;,
    &quot;lowerBound&quot; : &quot;0.0&quot;,
    &quot;includeUpperBound&quot; : true,
    &quot;includeLowerBound&quot; : true,
    &quot;semantic&quot; : &quot;expression&quot;,
    &quot;resolution&quot; : &quot;1.0&quot;
  },
  &quot;subjectOfRecord&quot; : {
    &quot;id&quot; : &quot;${patient_id_g}&quot;
  },
  &quot;subjectOfInformation&quot; : &quot;expression&quot;,
  &quot;associatedStatement&quot; : [ {
    &quot;semantic&quot; : &quot;Associated description&quot;
  } ],
  &quot;topic&quot; : &quot;Topic&quot;,
  &quot;type&quot; : &quot;Type&quot;,
  &quot;circumstanceChoice&quot; : {
    &quot;circumstanceType&quot; : &quot;NARRATIVE_CIRCUMSTANCE&quot;,
    &quot;status&quot; : &quot;&quot;,
    &quot;healthRisk&quot; : &quot;&quot;
  },
  &quot;status&quot; : &quot;STATUS_UNSPECIFIED&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract ANF ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">anf_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="ANF / GetANFStatement" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.anf.ANFService/GetANFStatement</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;id&quot;:&quot;${anf_id}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="ANF / UpdateANFStatement" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.anf.ANFService/UpdateANFStatement</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;id&quot; : {
    &quot;id&quot; : &quot;${anf_id}&quot;
  },
  &quot;time&quot; : {
    &quot;upperBound&quot; : &quot;100.0&quot;,
    &quot;lowerBound&quot; : &quot;0.0&quot;,
    &quot;includeUpperBound&quot; : true,
    &quot;includeLowerBound&quot; : true,
    &quot;semantic&quot; : &quot;expression&quot;,
    &quot;resolution&quot; : &quot;1.0&quot;
  },
  &quot;subjectOfRecord&quot; : {
    &quot;id&quot; : &quot;${patient_id_g}&quot;
  },
  &quot;subjectOfInformation&quot; : &quot;expression&quot;,
  &quot;associatedStatement&quot; : [ {
    &quot;semantic&quot; : &quot;Associated description&quot;
  } ],
  &quot;topic&quot; : &quot;Topic&quot;,
  &quot;type&quot; : &quot;Type&quot;,
  &quot;circumstanceChoice&quot; : {
    &quot;circumstanceType&quot; : &quot;NARRATIVE_CIRCUMSTANCE&quot;,
    &quot;status&quot; : &quot;&quot;,
    &quot;healthRisk&quot; : &quot;&quot;
  },
  &quot;status&quot; : &quot;STATUS_UNSPECIFIED&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="ANF / DeleteANFStatement" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.anf.ANFService/DeleteANFStatement</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;id&quot;:&quot;${anf_id}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Routine" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Routine / CreateRoutine" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.routine.RoutineSystemService/CreateRoutine</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;routine&quot; : {
    &quot;name&quot; : &quot;Test Routine&quot;,
    &quot;description&quot; : &quot;Test Routine Description&quot;,
    &quot;status&quot; : &quot;Routine.Status.ACTIVE&quot;,
    &quot;creationDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;lastUpdatedDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;assignedUser&quot; : &quot;6581e5157e001111d3736b48&quot;,
    &quot;associatedProtocols&quot; : [ &quot;6581e5157e001111d3736b49&quot; ]
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Routine / CreateClinicalProtocolExecution" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.routine.RoutineSystemService/CreateClinicalProtocolExecution</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;clinicalProtocolExecution&quot; : {
    &quot;executionId&quot; : &quot;6581e5157e001111d3736b4a&quot;,
    &quot;routineId&quot; : &quot;6581e5157e001111d3736b4b&quot;,
    &quot;protocolId&quot; : &quot;6581e5157e001111d3736b4c&quot;,
    &quot;status&quot; : &quot;ClinicalProtocolExecution.Status.ACTIVE&quot;,
    &quot;startDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;endDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;results&quot; : &quot;ClinicalProtocolExecution Results&quot;,
    &quot;assignedMedicalStaff&quot; : &quot;6581e5157e001111d3736b4d&quot;,
    &quot;steps&quot; : [ &quot;Step 1&quot;, &quot;Step 2&quot;, &quot;Step 3&quot; ]
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Routine / CreateLabOrder" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.routine.RoutineSystemService/CreateLabOrder</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;labOrder&quot; : {
    &quot;labOrderId&quot; : &quot;6581e5157e001111d3736b53&quot;,
    &quot;testName&quot; : &quot;Test Name&quot;,
    &quot;orderDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;matchedValueSet&quot; : &quot;Matched Value Set&quot;,
    &quot;relatedEntities&quot; : [ &quot;${deviceId_g}&quot;, &quot;${testcaseId_g}&quot; ]
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Routine / CreateDiagnosis" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.routine.RoutineSystemService/CreateDiagnosis</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;diagnosis&quot; : {
    &quot;diagnosisId&quot; : &quot;6581e5157e001111d3736b44&quot;,
    &quot;diagnosisCode&quot; : &quot;Diagnosis Code&quot;,
    &quot;diagnosisDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;matchedValueSet&quot; : &quot;Matched Value Set&quot;,
    &quot;relatedEntities&quot; : [ &quot;${deviceId_g}&quot;, &quot;${testcaseId_g}&quot; ]
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Routine / CreateSuspectedDiagnosis" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.routine.RoutineSystemService/CreateSuspectedDiagnosis</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;suspectedDiagnosis&quot; : {
    &quot;suspectedDiagnosisId&quot; : &quot;6581e5157e001111d3736b56&quot;,
    &quot;diagnosisCode&quot; : &quot;Diagnosis Code&quot;,
    &quot;diagnosisDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;matchedValueSet&quot; : &quot;Matched Value Set&quot;,
    &quot;relatedEntities&quot; : [ &quot;${deviceId_g}&quot;, &quot;${testcaseId_g}&quot; ]
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Routine / CreateLabResult" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.routine.RoutineSystemService/CreateLabResult</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;labResult&quot; : {
    &quot;resultId&quot; : &quot;6581e5147e001111d3736b3e&quot;,
    &quot;resultValue&quot; : &quot;Result Value&quot;,
    &quot;resultDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;matchedValueSet&quot; : &quot;Matched Value Set&quot;,
    &quot;relatedEntities&quot; : [ &quot;${deviceId_g}&quot;, &quot;${testcaseId_g}&quot; ]
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Routine / CreateMedication" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.routine.RoutineSystemService/CreateMedication</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;medication&quot; : {
    &quot;medicationId&quot; : &quot;6581e5147e001111d3736b41&quot;,
    &quot;medicationName&quot; : &quot;Medication name&quot;,
    &quot;administrationDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;matchedValueSet&quot; : &quot;Matched Value Set&quot;,
    &quot;relatedEntities&quot; : [ &quot;${deviceId_g}&quot;, &quot;${testcaseId_g}&quot; ]
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Predictor" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Predictor / Predict" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.neural.predictor.NeuralPredictorService/Predict</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;predictorInput&quot; : {
    &quot;encounterId&quot; : &quot;6581edfb798629124c427e75&quot;,
    &quot;testId&quot; : &quot;${connectedTestId}&quot;,
    &quot;testFeatures&quot; : [ &quot;Feature 1&quot;, &quot;Feature 2&quot;, &quot;Feature 3&quot; ]
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract ANF ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">anf_id</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Protector" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Protector / DetectAnomalies" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.neural.protector.NeuralProtectorService/DetectAnomalies</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;anomalyDetectionData&quot; : {
    &quot;encounterId&quot; : &quot;6582f9d06f3402218745d81b&quot;,
    &quot;userId&quot; : &quot;${user_id_g}&quot;,
    &quot;dataAccessPattern&quot; : &quot;dataAccessPattern&quot;,
    &quot;timeStamp&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;anomaliesDetected&quot; : [ &quot;anomaly1&quot;, &quot;anomaly2&quot; ],
    &quot;sourceIp&quot; : &quot;sourceIp&quot;,
    &quot;location&quot; : &quot;location&quot;,
    &quot;affectedSystems&quot; : [ &quot;affectedSystem1&quot;, &quot;affectedSystem2&quot; ],
    &quot;severityLevel&quot; : &quot;severityLevel&quot;
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Protector / EnforceAuthorizationControl" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.neural.protector.NeuralProtectorService/EnforceAuthorizationControl</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;authorizationControlData&quot; : {
    &quot;encounterId&quot; : &quot;6582f9d06f3402218745d815&quot;,
    &quot;userId&quot; : &quot;${user_id_g}&quot;,
    &quot;dataAccessLevel&quot; : &quot;dataAccessLevel&quot;,
    &quot;accessGrantedBy&quot; : &quot;6582f9d06f3402218745d817&quot;,
    &quot;accessScopes&quot; : [ &quot;accessScope1&quot;, &quot;accessScope2&quot; ],
    &quot;accessValidityPeriod&quot; : &quot;accessValidityPeriod&quot;,
    &quot;isTemporaryAccess&quot; : true,
    &quot;conditionalAccessParams&quot; : [ &quot;conditionalAccessParam1&quot;, &quot;conditionalAccessParam2&quot; ]
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Protector / ProtectPrivacy" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.neural.protector.NeuralProtectorService/ProtectPrivacy</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;privacyProtectionData&quot; : {
    &quot;encounterId&quot; : &quot;6582f9d06f3402218745d818&quot;,
    &quot;dataType&quot; : &quot;dataType&quot;,
    &quot;anonymizedData&quot; : &quot;anonymizedData&quot;,
    &quot;isDataEncrypted&quot; : true,
    &quot;encryptionMethod&quot; : &quot;encryptionMethod&quot;,
    &quot;dataRetentionPolicy&quot; : &quot;dataRetentionPolicy&quot;,
    &quot;hasDataSharingAgreement&quot; : true,
    &quot;dataPurpose&quot; : &quot;dataPurpose&quot;
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Protector / MonitorRealTimeActivity" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.neural.protector.NeuralProtectorService/MonitorRealTimeActivity</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;realTimeMonitoringData&quot; : {
    &quot;encounterId&quot; : &quot;6582f9d06f3402218745d813&quot;,
    &quot;monitoredEntity&quot; : &quot;${user_id_g}&quot;,
    &quot;monitoringDetails&quot; : &quot;monitoringDetails&quot;,
    &quot;monitoringStartTime&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;monitoringEndTime&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;triggeredAlerts&quot; : [ &quot;triggeredAlert1&quot;, &quot;triggeredAlert2&quot; ],
    &quot;monitoringFrequency&quot; : &quot;monitoringFrequency&quot;,
    &quot;isContinuousMonitoring&quot; : true,
    &quot;responsibleMonitoringTeam&quot; : &quot;responsibleMonitoringTeam&quot;
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Protector / AnalyzeUserBehavior" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.neural.protector.NeuralProtectorService/AnalyzeUserBehavior</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;userBehaviorAnalysisData&quot; : {
    &quot;encounterId&quot; : &quot;6582f9d06f3402218745d819&quot;,
    &quot;userId&quot; : &quot;${user_id_g}&quot;,
    &quot;behaviorPattern&quot; : &quot;behaviorPattern&quot;,
    &quot;associatedActivities&quot; : [ &quot;associatedActivity1&quot;, &quot;associatedActivity2&quot; ],
    &quot;analysisTimeFrame&quot; : &quot;analysisTimeFrame&quot;,
    &quot;historicalBehaviorData&quot; : [ &quot;historicalBehaviorData1&quot;, &quot;historicalBehaviorData2&quot; ],
    &quot;riskAssessment&quot; : &quot;riskAssessment&quot;,
    &quot;isBehaviorOutlier&quot; : true,
    &quot;behaviorConsequence&quot; : &quot;behaviorConsequence&quot;
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Questionnaire" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Questionnaire / CreateQuerstionnaire" enabled="false">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.neural.classification.ClassificationService/Classify</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;user_answer&quot;: {
    	   &quot;user_id&quot;: &quot;${user_id_g}&quot;,	
        &quot;age&quot;: 66609670,
        &quot;gender&quot;: 4,
        &quot;language_preference&quot;: &quot;Ut fugiat ullamco et Excepteur&quot;,
        &quot;medical_conditions&quot;: &quot;Duis aliquip ut&quot;,
        &quot;pregnancy_status&quot;: false,
        &quot;symptoms&quot;: [
            {
                &quot;duration&quot;: {
                    &quot;duration&quot;: &quot;14424702&quot;,
                    &quot;type&quot;: 5
                },
                &quot;additional_details&quot;: &quot;nisi occaecat elit&quot;,
                &quot;onset_date&quot;: &quot;2023-10-04T15:58:24Z&quot;,
                &quot;severity&quot;: &quot;MEDIUM&quot;,
                &quot;name&quot;: &quot;eu eiusmod deserunt&quot;
            }
        ],
        &quot;connected_test_id&quot;: &quot;${connectedTestId}&quot;,
        &quot;text_result&quot;: &quot;dolor exercitation ea Duis sunt&quot;,
        &quot;user_location&quot;: {
            &quot;latitude&quot;: &quot;Infinity&quot;,
            &quot;longitude&quot;: &quot;-Infinity&quot;
        }
    }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Questionnaire / CreateRuleSet" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.questionnaire.QuestionnaireService/CreateRuleSet</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;rule_set&quot;:{
    &quot;type&quot;: &quot;User Rule&quot;,
    &quot;category&quot;: &quot;Process user response&quot;,
    &quot;description&quot;: &quot;Categorize blood pressure&quot;,
    &quot;rule&quot;: &quot;package cdx.opencdx.evrete.rules;\n\nimport org.evrete.dsl.annotation.Fact;\nimport org.evrete.dsl.annotation.Rule;\nimport org.evrete.dsl.annotation.Where;\n\nimport cdx.opencdx.evrete.domain.BloodPressure;\n\npublic class BloodPressureRules {\n\n    @Rule\n    @Where(\&quot;$s \u003c 120\&quot;)\n    public void normalBloodPressure(@Fact(\&quot;$s\&quot;) int systolic, BloodPressure bp) {\n        bp.setStatus(\&quot;Normal\&quot;);\n    }\n\n    @Rule\n    @Where(\&quot;$s \u003e\u003d 120 \u0026\u0026 $s \u003c\u003d 129\&quot;)\n    public void elevatedBloodPressure(@Fact(\&quot;$s\&quot;) int systolic, BloodPressure bp) {\n        bp.setStatus(\&quot;Elevated\&quot;);\n    }\n\n    @Rule\n    @Where(\&quot;$s \u003e 129\&quot;)\n    public void highBloodPressure(@Fact(\&quot;$s\&quot;) int systolic, BloodPressure bp) {\n        bp.setStatus(\&quot;High\&quot;);\n    }\n\n}\n&quot;,
    &quot;status&quot;: &quot;draft&quot;
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract RuleSet  ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">rulesetId_g</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.rule_set.rule_id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Questionnaire / UpdateRuleSet" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.questionnaire.QuestionnaireService/UpdateRuleSet</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
  &quot;rule_set&quot;: {
    &quot;rule_id&quot;: &quot;${rulesetId_g}&quot;,
    &quot;type&quot;: &quot;User Rule&quot;,
    &quot;category&quot;: &quot;Process user response&quot;,
    &quot;description&quot;: &quot;Monitor blood pressure&quot;,
    &quot;rule&quot;: &quot;package cdx.opencdx.evrete.rules;\n\nimport org.evrete.dsl.annotation.Fact;\nimport org.evrete.dsl.annotation.Rule;\nimport org.evrete.dsl.annotation.Where;\n\nimport cdx.opencdx.evrete.domain.BloodPressure;\n\npublic class BloodPressureRules {\n\n    @Rule\n    @Where(\&quot;$s \u003c 120\&quot;)\n    public void normalBloodPressure(@Fact(\&quot;$s\&quot;) int systolic, BloodPressure bp) {\n        bp.setStatus(\&quot;Normal\&quot;);\n    }\n\n    @Rule\n    @Where(\&quot;$s \u003e\u003d 120 \u0026\u0026 $s \u003c\u003d 129\&quot;)\n    public void elevatedBloodPressure(@Fact(\&quot;$s\&quot;) int systolic, BloodPressure bp) {\n        bp.setStatus(\&quot;Elevated\&quot;);\n    }\n\n    @Rule\n    @Where(\&quot;$s \u003e 129\&quot;)\n    public void highBloodPressure(@Fact(\&quot;$s\&quot;) int systolic, BloodPressure bp) {\n        bp.setStatus(\&quot;High\&quot;);\n    }\n\n}\n&quot;,
    &quot;status&quot;: &quot;draft&quot;
  }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Questionnaire / GetRuleSet" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.questionnaire.QuestionnaireService/GetRuleSet</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;id&quot;:&quot;${rulesetId_g}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Questionnaire / GetRuleSets" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.questionnaire.QuestionnaireService/GetRuleSets</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/questionnaire [POST]" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;questionnaire&quot;: {&#xd;
        &quot;resourceType&quot;: &quot;Questionnaire&quot;,&#xd;
        &quot;title&quot;: &quot;BP-POC&quot;,&#xd;
        &quot;status&quot;: &quot;draft&quot;,&#xd;
        &quot;item&quot;: [&#xd;
            {&#xd;
                &quot;type&quot;: &quot;integer&quot;,&#xd;
                &quot;extension&quot;: [&#xd;
                    {&#xd;
                        &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-unit&quot;,&#xd;
                        &quot;valueCoding&quot;: {&#xd;
                            &quot;code&quot;: &quot;millimeter of mercury&quot;,&#xd;
                            &quot;display&quot;: &quot;millimeter of mercury&quot;&#xd;
                        }&#xd;
                    }&#xd;
                ],&#xd;
                &quot;linkId&quot;: &quot;3079919224534&quot;,&#xd;
                &quot;text&quot;: &quot;Upper Range (SYSTOLIC)&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;text&quot;: &quot;ANF Main Statement&quot;,&#xd;
                        &quot;type&quot;: &quot;display&quot;,&#xd;
                        &quot;linkId&quot;: &quot;3079919224534_helpText&quot;,&#xd;
                        &quot;extension&quot;: [&#xd;
                            {&#xd;
                                &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl&quot;,&#xd;
                                &quot;valueCodeableConcept&quot;: {&#xd;
                                    &quot;text&quot;: &quot;Help-Button&quot;,&#xd;
                                    &quot;coding&quot;: [&#xd;
                                        {&#xd;
                                            &quot;code&quot;: &quot;help&quot;,&#xd;
                                            &quot;display&quot;: &quot;Help-Button&quot;,&#xd;
                                            &quot;system&quot;: &quot;http://hl7.org/fhir/questionnaire-item-control&quot;&#xd;
                                        }&#xd;
                                    ]&#xd;
                                }&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;${{system.util.epoc(\\&quot;${{application.statement.documented.start.time}}\&quot;)}}&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;Seconds | ${{upperbound - lowerbound}}&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;1 second&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;${{system.util.epoc(\\&quot;${{application.statement.documented.end.time}}\&quot;)}}&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    },&#xd;
                                    &quot;subjectOfRecord&quot;: {&#xd;
                                        &quot;id&quot;: &quot;&quot;,&#xd;
                                        &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                        &quot;code&quot;: &quot;&quot;&#xd;
                                    },&#xd;
                                    &quot;authors&quot;: [&#xd;
                                        {&#xd;
                                            &quot;id&quot;: &quot;&quot;,&#xd;
                                            &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                            &quot;code&quot;: &quot;&quot;&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;id&quot;: &quot;&quot;,&#xd;
                                            &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                            &quot;code&quot;: &quot;&quot;&#xd;
                                        }&#xd;
                                    ],&#xd;
                                    &quot;subjectOfInformation&quot;: &quot;${{participant.id}}&quot;,&#xd;
                                    &quot;topic&quot;: &quot;OBSERVATION_PROCEDURE&quot;,&#xd;
                                    &quot;type&quot;: &quot;PERFORMANCE&quot;,&#xd;
                                    &quot;circumstanceChoice&quot;: {&#xd;
                                        &quot;status&quot;: &quot;{\&quot;expressionType\&quot;:\&quot;simple\&quot;,\&quot;expressionLanguage\&quot;:\&quot;local\&quot;,\&quot;expressionValue\&quot;:\&quot;performed\&quot;,\&quot;expressionDescription\&quot;:\&quot;Measurement action has been performed.\&quot;}&quot;,&#xd;
                                        &quot;healthRisk&quot;: &quot; ${{rules.engine.calculated[circumstanceChoice.result]}}&quot;,&#xd;
                                        &quot;circumstanceType&quot;: &quot;PERFORMANCE_CIRCUMSTANCE&quot;,&#xd;
                                        &quot;result&quot;: {&#xd;
                                            &quot;lowerBound&quot;: &quot;90&quot;,&#xd;
                                            &quot;includeLowerBound&quot;: false,&#xd;
                                            &quot;semantic&quot;: &quot;&quot;,&#xd;
                                            &quot;resolution&quot;: &quot;{{REPLACE_3079919224534}}&quot;,&#xd;
                                            &quot;upperBound&quot;: &quot;120&quot;,&#xd;
                                            &quot;includeUpperBound&quot;: false&#xd;
                                        },&#xd;
                                        &quot;normalRange&quot;: {&#xd;
                                            &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                            &quot;includeLowerBound&quot;: false,&#xd;
                                            &quot;semantic&quot;: &quot;&quot;,&#xd;
                                            &quot;resolution&quot;: &quot;&quot;,&#xd;
                                            &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                            &quot;includeUpperBound&quot;: false&#xd;
                                        },&#xd;
                                        &quot;circumstance&quot;: {&#xd;
                                            &quot;id&quot;: &quot;&quot;,&#xd;
                                            &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                            &quot;code&quot;: &quot;&quot;&#xd;
                                        },&#xd;
                                        &quot;timing&quot;: {&#xd;
                                            &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                            &quot;includeLowerBound&quot;: false,&#xd;
                                            &quot;semantic&quot;: &quot;&quot;,&#xd;
                                            &quot;resolution&quot;: &quot;&quot;,&#xd;
                                            &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                            &quot;includeUpperBound&quot;: false&#xd;
                                        },&#xd;
                                        &quot;participant&quot;: {&#xd;
                                            &quot;id&quot;: &quot;&quot;,&#xd;
                                            &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                            &quot;code&quot;: &quot;&quot;&#xd;
                                        }&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfStatementType&quot;: &quot;ANF_STATEMENT_TYPE_MAIN&quot;,&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;type&quot;: &quot;boolean&quot;,&#xd;
                &quot;linkId&quot;: &quot;7048556169730&quot;,&#xd;
                &quot;text&quot;: &quot;Measurement taken using cuff&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;initial&quot;: [&#xd;
                    {&#xd;
                        &quot;valueBoolean&quot;: true&#xd;
                    }&#xd;
                ],&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;type&quot;: &quot;choice&quot;,&#xd;
                &quot;extension&quot;: [&#xd;
                    {&#xd;
                        &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl&quot;,&#xd;
                        &quot;valueCodeableConcept&quot;: {&#xd;
                            &quot;coding&quot;: [&#xd;
                                {&#xd;
                                    &quot;system&quot;: &quot;http://hl7.org/fhir/questionnaire-item-control&quot;,&#xd;
                                    &quot;code&quot;: &quot;drop-down&quot;,&#xd;
                                    &quot;display&quot;: &quot;Drop down&quot;&#xd;
                                }&#xd;
                            ]&#xd;
                        }&#xd;
                    }&#xd;
                ],&#xd;
                &quot;linkId&quot;: &quot;8501933950742&quot;,&#xd;
                &quot;text&quot;: &quot;Cuff Size&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;answerOption&quot;: [&#xd;
                    {&#xd;
                        &quot;valueCoding&quot;: {&#xd;
                            &quot;display&quot;: &quot;Adult&quot;&#xd;
                        },&#xd;
                        &quot;initialSelected&quot;: true&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;valueCoding&quot;: {&#xd;
                            &quot;display&quot;: &quot;Pediatric&quot;&#xd;
                        }&#xd;
                    }&#xd;
                ],&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;type&quot;: &quot;choice&quot;,&#xd;
                &quot;extension&quot;: [&#xd;
                    {&#xd;
                        &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl&quot;,&#xd;
                        &quot;valueCodeableConcept&quot;: {&#xd;
                            &quot;coding&quot;: [&#xd;
                                {&#xd;
                                    &quot;system&quot;: &quot;http://hl7.org/fhir/questionnaire-item-control&quot;,&#xd;
                                    &quot;code&quot;: &quot;drop-down&quot;,&#xd;
                                    &quot;display&quot;: &quot;Drop down&quot;&#xd;
                                }&#xd;
                            ]&#xd;
                        }&#xd;
                    }&#xd;
                ],&#xd;
                &quot;linkId&quot;: &quot;1451784149570&quot;,&#xd;
                &quot;text&quot;: &quot;Arm Used&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;answerOption&quot;: [&#xd;
                    {&#xd;
                        &quot;valueCoding&quot;: {&#xd;
                            &quot;display&quot;: &quot;Right&quot;&#xd;
                        },&#xd;
                        &quot;initialSelected&quot;: true&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;valueCoding&quot;: {&#xd;
                            &quot;display&quot;: &quot;Left&quot;&#xd;
                        }&#xd;
                    }&#xd;
                ],&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;type&quot;: &quot;boolean&quot;,&#xd;
                &quot;linkId&quot;: &quot;4051866307723&quot;,&#xd;
                &quot;text&quot;: &quot;Please confirm you have not urinated more than 30 minutes prior to taking the measurement.&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;initial&quot;: [&#xd;
                    {&#xd;
                        &quot;valueBoolean&quot;: true&#xd;
                    }&#xd;
                ],&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;type&quot;: &quot;boolean&quot;,&#xd;
                &quot;linkId&quot;: &quot;2602220218173&quot;,&#xd;
                &quot;text&quot;: &quot;Please confirm you have been in sitting position before taking the measurement for at least 5 minutes.&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;initial&quot;: [&#xd;
                    {&#xd;
                        &quot;valueBoolean&quot;: true&#xd;
                    }&#xd;
                ],&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            }&#xd;
        ],&#xd;
        &quot;ruleId&quot;: &quot;${rulesetId_g}&quot;,&#xd;
        &quot;ruleQuestionId&quot;: [&#xd;
            &quot;3079919224534&quot;&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/questionnaire/questionnaire</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Questionnaire ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">questionnaireId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/user/questionnaire [POST]" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;userQuestionnaireData&quot;: {&#xd;
        &quot;patientId&quot;: &quot;${patient_id_g}&quot;,&#xd;
        &quot;questionnaireData&quot;: [&#xd;
            {&#xd;
                &quot;id&quot;: &quot;${questionnaireId}&quot;,&#xd;
                &quot;resourceType&quot;: &quot;Questionnaire&quot;,&#xd;
                &quot;title&quot;: &quot;BP-POC&quot;,&#xd;
                &quot;status&quot;: &quot;active&quot;,&#xd;
                &quot;description&quot;: &quot;&quot;,&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;type&quot;: &quot;integer&quot;,&#xd;
                        &quot;linkId&quot;: &quot;3079919224534&quot;,&#xd;
                        &quot;text&quot;: &quot;Upper Range (SYSTOLIC)&quot;,&#xd;
                        &quot;enableWhen&quot;: [],&#xd;
                        &quot;required&quot;: false,&#xd;
                        &quot;repeats&quot;: false,&#xd;
                        &quot;readOnly&quot;: false,&#xd;
                        &quot;code&quot;: [],&#xd;
                        &quot;item&quot;: [&#xd;
                            {&#xd;
                                &quot;type&quot;: &quot;display&quot;,&#xd;
                                &quot;linkId&quot;: &quot;3079919224534_helpText&quot;,&#xd;
                                &quot;text&quot;: &quot;ANF Main Statement&quot;,&#xd;
                                &quot;enableWhen&quot;: [],&#xd;
                                &quot;code&quot;: [],&#xd;
                                &quot;item&quot;: [],&#xd;
                                &quot;extension&quot;: [&#xd;
                                    {&#xd;
                                        &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl&quot;,&#xd;
                                        &quot;valueCodeableConcept&quot;: {&#xd;
                                            &quot;text&quot;: &quot;Help-Button&quot;,&#xd;
                                            &quot;coding&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;system&quot;: &quot;http://hl7.org/fhir/questionnaire-item-control&quot;,&#xd;
                                                    &quot;code&quot;: &quot;help&quot;,&#xd;
                                                    &quot;display&quot;: &quot;Help-Button&quot;&#xd;
                                                }&#xd;
                                            ]&#xd;
                                        }&#xd;
                                    }&#xd;
                                ],&#xd;
                                &quot;answerOption&quot;: [],&#xd;
                                &quot;initial&quot;: [],&#xd;
                                &quot;anfStatementConnector&quot;: [&#xd;
                                    {&#xd;
                                        &quot;anfStatement&quot;: {&#xd;
                                            &quot;time&quot;: {&#xd;
                                                &quot;upperBound&quot;: &quot;${{system.util.epoc(\\&quot;${{application.statement.documented.end.time}}\&quot;)}}&quot;,&#xd;
                                                &quot;lowerBound&quot;: &quot;${{system.util.epoc(\\&quot;${{application.statement.documented.start.time}}\&quot;)}}&quot;,&#xd;
                                                &quot;includeUpperBound&quot;: false,&#xd;
                                                &quot;includeLowerBound&quot;: false,&#xd;
                                                &quot;semantic&quot;: &quot;Seconds | ${{upperbound - lowerbound}}&quot;,&#xd;
                                                &quot;resolution&quot;: &quot;1 second&quot;&#xd;
                                            },&#xd;
                                            &quot;subjectOfRecord&quot;: {&#xd;
                                                &quot;id&quot;: &quot;&quot;,&#xd;
                                                &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                                &quot;code&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;authors&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;id&quot;: &quot;&quot;,&#xd;
                                                    &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                                    &quot;code&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                {&#xd;
                                                    &quot;id&quot;: &quot;&quot;,&#xd;
                                                    &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                                    &quot;code&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;subjectOfInformation&quot;: &quot;${{participant.id}}&quot;,&#xd;
                                            &quot;associatedStatement&quot;: [],&#xd;
                                            &quot;topic&quot;: &quot;OBSERVATION_PROCEDURE&quot;,&#xd;
                                            &quot;type&quot;: &quot;PERFORMANCE&quot;,&#xd;
                                            &quot;circumstanceChoice&quot;: {&#xd;
                                                &quot;circumstanceType&quot;: &quot;PERFORMANCE_CIRCUMSTANCE&quot;,&#xd;
                                                &quot;status&quot;: &quot;{\&quot;expressionType\&quot;:\&quot;simple\&quot;,\&quot;expressionLanguage\&quot;:\&quot;local\&quot;,\&quot;expressionValue\&quot;:\&quot;performed\&quot;,\&quot;expressionDescription\&quot;:\&quot;Measurement action has been performed.\&quot;}&quot;,&#xd;
                                                &quot;result&quot;: {&#xd;
                                                    &quot;upperBound&quot;: &quot;120&quot;,&#xd;
                                                    &quot;lowerBound&quot;: &quot;90&quot;,&#xd;
                                                    &quot;includeUpperBound&quot;: false,&#xd;
                                                    &quot;includeLowerBound&quot;: false,&#xd;
                                                    &quot;semantic&quot;: &quot;&quot;,&#xd;
                                                    &quot;resolution&quot;: &quot;87&quot;&#xd;
                                                },&#xd;
                                                &quot;healthRisk&quot;: &quot; ${{rules.engine.calculated[circumstanceChoice.result]}}&quot;,&#xd;
                                                &quot;normalRange&quot;: {&#xd;
                                                    &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                                    &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                                    &quot;includeUpperBound&quot;: false,&#xd;
                                                    &quot;includeLowerBound&quot;: false,&#xd;
                                                    &quot;semantic&quot;: &quot;&quot;,&#xd;
                                                    &quot;resolution&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                &quot;circumstance&quot;: {&#xd;
                                                    &quot;id&quot;: &quot;&quot;,&#xd;
                                                    &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                                    &quot;code&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                &quot;timing&quot;: {&#xd;
                                                    &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                                    &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                                    &quot;includeUpperBound&quot;: false,&#xd;
                                                    &quot;includeLowerBound&quot;: false,&#xd;
                                                    &quot;semantic&quot;: &quot;&quot;,&#xd;
                                                    &quot;resolution&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                &quot;participant&quot;: {&#xd;
                                                    &quot;id&quot;: &quot;&quot;,&#xd;
                                                    &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                                    &quot;code&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            },&#xd;
                                            &quot;status&quot;: &quot;STATUS_UNSPECIFIED&quot;&#xd;
                                        },&#xd;
                                        &quot;anfStatementType&quot;: &quot;ANF_STATEMENT_TYPE_MAIN&quot;,&#xd;
                                        &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_EQUAL&quot;,&#xd;
                                        &quot;operatorValue&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;extension&quot;: [&#xd;
                            {&#xd;
                                &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-unit&quot;,&#xd;
                                &quot;valueCoding&quot;: {&#xd;
                                    &quot;code&quot;: &quot;millimeter of mercury&quot;,&#xd;
                                    &quot;display&quot;: &quot;millimeter of mercury&quot;&#xd;
                                }&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;answerOption&quot;: [],&#xd;
                        &quot;initial&quot;: [],&#xd;
                        &quot;anfStatementConnector&quot;: [],&#xd;
                        &quot;answerInteger&quot;: &quot;87&quot;&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;type&quot;: &quot;boolean&quot;,&#xd;
                        &quot;linkId&quot;: &quot;7048556169730&quot;,&#xd;
                        &quot;text&quot;: &quot;Measurement taken using cuff&quot;,&#xd;
                        &quot;enableWhen&quot;: [],&#xd;
                        &quot;required&quot;: false,&#xd;
                        &quot;repeats&quot;: false,&#xd;
                        &quot;readOnly&quot;: false,&#xd;
                        &quot;code&quot;: [],&#xd;
                        &quot;item&quot;: [&#xd;
                            {&#xd;
                                &quot;enableWhen&quot;: [],&#xd;
                                &quot;code&quot;: [],&#xd;
                                &quot;item&quot;: [],&#xd;
                                &quot;extension&quot;: [],&#xd;
                                &quot;answerOption&quot;: [],&#xd;
                                &quot;initial&quot;: [],&#xd;
                                &quot;anfStatementConnector&quot;: [&#xd;
                                    {&#xd;
                                        &quot;anfStatement&quot;: {&#xd;
                                            &quot;time&quot;: {&#xd;
                                                &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                                &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                                &quot;includeUpperBound&quot;: false,&#xd;
                                                &quot;includeLowerBound&quot;: false,&#xd;
                                                &quot;semantic&quot;: &quot;&quot;,&#xd;
                                                &quot;resolution&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;authors&quot;: [],&#xd;
                                            &quot;subjectOfInformation&quot;: &quot;&quot;,&#xd;
                                            &quot;associatedStatement&quot;: [],&#xd;
                                            &quot;topic&quot;: &quot;&quot;,&#xd;
                                            &quot;type&quot;: &quot;&quot;,&#xd;
                                            &quot;status&quot;: &quot;STATUS_UNSPECIFIED&quot;&#xd;
                                        },&#xd;
                                        &quot;anfStatementType&quot;: &quot;ANF_STATEMENT_TYPE_UNSPECIFIED&quot;,&#xd;
                                        &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;,&#xd;
                                        &quot;operatorValue&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;extension&quot;: [],&#xd;
                        &quot;answerOption&quot;: [],&#xd;
                        &quot;initial&quot;: [&#xd;
                            {&#xd;
                                &quot;valueBoolean&quot;: true&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;anfStatementConnector&quot;: [],&#xd;
                        &quot;answerBoolean&quot;: true&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;type&quot;: &quot;choice&quot;,&#xd;
                        &quot;linkId&quot;: &quot;8501933950742&quot;,&#xd;
                        &quot;text&quot;: &quot;Cuff Size&quot;,&#xd;
                        &quot;enableWhen&quot;: [],&#xd;
                        &quot;required&quot;: false,&#xd;
                        &quot;repeats&quot;: false,&#xd;
                        &quot;readOnly&quot;: false,&#xd;
                        &quot;code&quot;: [],&#xd;
                        &quot;item&quot;: [&#xd;
                            {&#xd;
                                &quot;enableWhen&quot;: [],&#xd;
                                &quot;code&quot;: [],&#xd;
                                &quot;item&quot;: [],&#xd;
                                &quot;extension&quot;: [],&#xd;
                                &quot;answerOption&quot;: [],&#xd;
                                &quot;initial&quot;: [],&#xd;
                                &quot;anfStatementConnector&quot;: [&#xd;
                                    {&#xd;
                                        &quot;anfStatement&quot;: {&#xd;
                                            &quot;time&quot;: {&#xd;
                                                &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                                &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                                &quot;includeUpperBound&quot;: false,&#xd;
                                                &quot;includeLowerBound&quot;: false,&#xd;
                                                &quot;semantic&quot;: &quot;&quot;,&#xd;
                                                &quot;resolution&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;authors&quot;: [],&#xd;
                                            &quot;subjectOfInformation&quot;: &quot;&quot;,&#xd;
                                            &quot;associatedStatement&quot;: [],&#xd;
                                            &quot;topic&quot;: &quot;&quot;,&#xd;
                                            &quot;type&quot;: &quot;&quot;,&#xd;
                                            &quot;status&quot;: &quot;STATUS_UNSPECIFIED&quot;&#xd;
                                        },&#xd;
                                        &quot;anfStatementType&quot;: &quot;ANF_STATEMENT_TYPE_UNSPECIFIED&quot;,&#xd;
                                        &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;,&#xd;
                                        &quot;operatorValue&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;extension&quot;: [&#xd;
                            {&#xd;
                                &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl&quot;,&#xd;
                                &quot;valueCodeableConcept&quot;: {&#xd;
                                    &quot;coding&quot;: [&#xd;
                                        {&#xd;
                                            &quot;system&quot;: &quot;http://hl7.org/fhir/questionnaire-item-control&quot;,&#xd;
                                            &quot;code&quot;: &quot;drop-down&quot;,&#xd;
                                            &quot;display&quot;: &quot;Drop down&quot;&#xd;
                                        }&#xd;
                                    ]&#xd;
                                }&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;answerOption&quot;: [&#xd;
                            {&#xd;
                                &quot;valueCoding&quot;: {&#xd;
                                    &quot;display&quot;: &quot;Adult&quot;&#xd;
                                },&#xd;
                                &quot;initialSelected&quot;: true,&#xd;
                                &quot;extension&quot;: []&#xd;
                            },&#xd;
                            {&#xd;
                                &quot;valueCoding&quot;: {&#xd;
                                    &quot;display&quot;: &quot;Pediatric&quot;&#xd;
                                },&#xd;
                                &quot;extension&quot;: []&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;initial&quot;: [],&#xd;
                        &quot;anfStatementConnector&quot;: [],&#xd;
                        &quot;answerString&quot;: &quot;Adult&quot;&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;type&quot;: &quot;choice&quot;,&#xd;
                        &quot;linkId&quot;: &quot;1451784149570&quot;,&#xd;
                        &quot;text&quot;: &quot;Arm Used&quot;,&#xd;
                        &quot;enableWhen&quot;: [],&#xd;
                        &quot;required&quot;: false,&#xd;
                        &quot;repeats&quot;: false,&#xd;
                        &quot;readOnly&quot;: false,&#xd;
                        &quot;code&quot;: [],&#xd;
                        &quot;item&quot;: [&#xd;
                            {&#xd;
                                &quot;enableWhen&quot;: [],&#xd;
                                &quot;code&quot;: [],&#xd;
                                &quot;item&quot;: [],&#xd;
                                &quot;extension&quot;: [],&#xd;
                                &quot;answerOption&quot;: [],&#xd;
                                &quot;initial&quot;: [],&#xd;
                                &quot;anfStatementConnector&quot;: [&#xd;
                                    {&#xd;
                                        &quot;anfStatement&quot;: {&#xd;
                                            &quot;time&quot;: {&#xd;
                                                &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                                &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                                &quot;includeUpperBound&quot;: false,&#xd;
                                                &quot;includeLowerBound&quot;: false,&#xd;
                                                &quot;semantic&quot;: &quot;&quot;,&#xd;
                                                &quot;resolution&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;authors&quot;: [],&#xd;
                                            &quot;subjectOfInformation&quot;: &quot;&quot;,&#xd;
                                            &quot;associatedStatement&quot;: [],&#xd;
                                            &quot;topic&quot;: &quot;&quot;,&#xd;
                                            &quot;type&quot;: &quot;&quot;,&#xd;
                                            &quot;status&quot;: &quot;STATUS_UNSPECIFIED&quot;&#xd;
                                        },&#xd;
                                        &quot;anfStatementType&quot;: &quot;ANF_STATEMENT_TYPE_UNSPECIFIED&quot;,&#xd;
                                        &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;,&#xd;
                                        &quot;operatorValue&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;extension&quot;: [&#xd;
                            {&#xd;
                                &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl&quot;,&#xd;
                                &quot;valueCodeableConcept&quot;: {&#xd;
                                    &quot;coding&quot;: [&#xd;
                                        {&#xd;
                                            &quot;system&quot;: &quot;http://hl7.org/fhir/questionnaire-item-control&quot;,&#xd;
                                            &quot;code&quot;: &quot;drop-down&quot;,&#xd;
                                            &quot;display&quot;: &quot;Drop down&quot;&#xd;
                                        }&#xd;
                                    ]&#xd;
                                }&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;answerOption&quot;: [&#xd;
                            {&#xd;
                                &quot;valueCoding&quot;: {&#xd;
                                    &quot;display&quot;: &quot;Right&quot;&#xd;
                                },&#xd;
                                &quot;initialSelected&quot;: true,&#xd;
                                &quot;extension&quot;: []&#xd;
                            },&#xd;
                            {&#xd;
                                &quot;valueCoding&quot;: {&#xd;
                                    &quot;display&quot;: &quot;Left&quot;&#xd;
                                },&#xd;
                                &quot;extension&quot;: []&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;initial&quot;: [],&#xd;
                        &quot;anfStatementConnector&quot;: [],&#xd;
                        &quot;answerString&quot;: &quot;Right&quot;&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;type&quot;: &quot;boolean&quot;,&#xd;
                        &quot;linkId&quot;: &quot;4051866307723&quot;,&#xd;
                        &quot;text&quot;: &quot;Please confirm you have not urinated more than 30 minutes prior to taking the measurement.&quot;,&#xd;
                        &quot;enableWhen&quot;: [],&#xd;
                        &quot;required&quot;: false,&#xd;
                        &quot;repeats&quot;: false,&#xd;
                        &quot;readOnly&quot;: false,&#xd;
                        &quot;code&quot;: [],&#xd;
                        &quot;item&quot;: [&#xd;
                            {&#xd;
                                &quot;enableWhen&quot;: [],&#xd;
                                &quot;code&quot;: [],&#xd;
                                &quot;item&quot;: [],&#xd;
                                &quot;extension&quot;: [],&#xd;
                                &quot;answerOption&quot;: [],&#xd;
                                &quot;initial&quot;: [],&#xd;
                                &quot;anfStatementConnector&quot;: [&#xd;
                                    {&#xd;
                                        &quot;anfStatement&quot;: {&#xd;
                                            &quot;time&quot;: {&#xd;
                                                &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                                &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                                &quot;includeUpperBound&quot;: false,&#xd;
                                                &quot;includeLowerBound&quot;: false,&#xd;
                                                &quot;semantic&quot;: &quot;&quot;,&#xd;
                                                &quot;resolution&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;authors&quot;: [],&#xd;
                                            &quot;subjectOfInformation&quot;: &quot;&quot;,&#xd;
                                            &quot;associatedStatement&quot;: [],&#xd;
                                            &quot;topic&quot;: &quot;&quot;,&#xd;
                                            &quot;type&quot;: &quot;&quot;,&#xd;
                                            &quot;status&quot;: &quot;STATUS_UNSPECIFIED&quot;&#xd;
                                        },&#xd;
                                        &quot;anfStatementType&quot;: &quot;ANF_STATEMENT_TYPE_UNSPECIFIED&quot;,&#xd;
                                        &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;,&#xd;
                                        &quot;operatorValue&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;extension&quot;: [],&#xd;
                        &quot;answerOption&quot;: [],&#xd;
                        &quot;initial&quot;: [&#xd;
                            {&#xd;
                                &quot;valueBoolean&quot;: true&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;anfStatementConnector&quot;: [],&#xd;
                        &quot;answerBoolean&quot;: true&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;type&quot;: &quot;boolean&quot;,&#xd;
                        &quot;linkId&quot;: &quot;2602220218173&quot;,&#xd;
                        &quot;text&quot;: &quot;Please confirm you have been in sitting position before taking the measurement for at least 5 minutes.&quot;,&#xd;
                        &quot;enableWhen&quot;: [],&#xd;
                        &quot;required&quot;: false,&#xd;
                        &quot;repeats&quot;: false,&#xd;
                        &quot;readOnly&quot;: false,&#xd;
                        &quot;code&quot;: [],&#xd;
                        &quot;item&quot;: [&#xd;
                            {&#xd;
                                &quot;enableWhen&quot;: [],&#xd;
                                &quot;code&quot;: [],&#xd;
                                &quot;item&quot;: [],&#xd;
                                &quot;extension&quot;: [],&#xd;
                                &quot;answerOption&quot;: [],&#xd;
                                &quot;initial&quot;: [],&#xd;
                                &quot;anfStatementConnector&quot;: [&#xd;
                                    {&#xd;
                                        &quot;anfStatement&quot;: {&#xd;
                                            &quot;time&quot;: {&#xd;
                                                &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                                &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                                &quot;includeUpperBound&quot;: false,&#xd;
                                                &quot;includeLowerBound&quot;: false,&#xd;
                                                &quot;semantic&quot;: &quot;&quot;,&#xd;
                                                &quot;resolution&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;authors&quot;: [],&#xd;
                                            &quot;subjectOfInformation&quot;: &quot;&quot;,&#xd;
                                            &quot;associatedStatement&quot;: [],&#xd;
                                            &quot;topic&quot;: &quot;&quot;,&#xd;
                                            &quot;type&quot;: &quot;&quot;,&#xd;
                                            &quot;status&quot;: &quot;STATUS_UNSPECIFIED&quot;&#xd;
                                        },&#xd;
                                        &quot;anfStatementType&quot;: &quot;ANF_STATEMENT_TYPE_UNSPECIFIED&quot;,&#xd;
                                        &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;,&#xd;
                                        &quot;operatorValue&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;extension&quot;: [],&#xd;
                        &quot;answerOption&quot;: [],&#xd;
                        &quot;initial&quot;: [&#xd;
                            {&#xd;
                                &quot;valueBoolean&quot;: true&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;anfStatementConnector&quot;: [],&#xd;
                        &quot;answerBoolean&quot;: true&#xd;
                    }&#xd;
                ],&#xd;
                &quot;ruleId&quot;: &quot;${rulesetId_g}&quot;,&#xd;
                &quot;ruleQuestionId&quot;: [&#xd;
                    &quot;3079919224534&quot;&#xd;
                ]&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.path">/questionnaire/user/questionnaire</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
              <boolProp name="HTTPSampler.image_parser">false</boolProp>
              <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
              <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
              <boolProp name="HTTPSampler.md5">false</boolProp>
              <intProp name="HTTPSampler.ipSourceType">0</intProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract User Questionnaire ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">userQuestionnaireId</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Classification" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Classification / Classify" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.neural.classification.ClassificationService/Classify</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;user_answer&quot;: {
    	   &quot;patient_id&quot;: &quot;${patient_id_g}&quot;,	
        &quot;age&quot;: 66609670,
        &quot;gender&quot;: 4,
        &quot;language_preference&quot;: &quot;Ut fugiat ullamco et Excepteur&quot;,
        &quot;medical_conditions&quot;: &quot;Duis aliquip ut&quot;,
        &quot;pregnancy_status&quot;: false,
        &quot;symptoms&quot;: [
            {
                &quot;duration&quot;: {
                    &quot;duration&quot;: &quot;14424702&quot;,
                    &quot;type&quot;: 5
                },
                &quot;additional_details&quot;: &quot;nisi occaecat elit&quot;,
                &quot;onset_date&quot;: &quot;2023-10-04T15:58:24Z&quot;,
                &quot;severity&quot;: &quot;MEDIUM&quot;,
                &quot;name&quot;: &quot;eu eiusmod deserunt&quot;
            }
        ],
        &quot;connected_test_id&quot;: &quot;${connectedTestId}&quot;,
        &quot;text_result&quot;: &quot;dolor exercitation ea Duis sunt&quot;,
        &quot;user_location&quot;: {
            &quot;latitude&quot;: &quot;Infinity&quot;,
            &quot;longitude&quot;: &quot;-Infinity&quot;
        }
    }
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Logistics" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics / CreateOrder" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.shipping.OrderService/CreateOrder</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;order&quot;:{
		&quot;patient_id&quot;:&quot;${patient_id_g}&quot;,
		&quot;shipping_address&quot;:{
			&quot;country_id&quot;:&quot;${countryId}&quot;,
			&quot;address_purpose&quot;:null,
			&quot;address_1&quot;:&quot;Hello&quot;,
			&quot;address_2&quot;:&quot;Hello&quot;,
			&quot;address_3&quot;:&quot;Hello&quot;,
			&quot;city&quot;:&quot;Hello&quot;,
			&quot;state&quot;:&quot;Hello&quot;,
			&quot;postal_code&quot;:&quot;Hello&quot;
		},
		&quot;test_case_id&quot;:&quot;${testcaseId_g}&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract User ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">order_id_g</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.order.id</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics / GetOrder" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.shipping.OrderService/GetOrder</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;id&quot;:&quot;${order_id_g}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics / UpdateOrder" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.shipping.OrderService/UpdateOrder</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;order&quot;:{
		&quot;id&quot;:&quot;${order_id_g}&quot;,
		&quot;patient_id&quot;:&quot;${patient_id_g}&quot;,
		&quot;shipping_address&quot;:{
			&quot;country_id&quot;:&quot;${countryId}&quot;,
			&quot;address_purpose&quot;:null,
			&quot;address_1&quot;:&quot;Hello&quot;,
			&quot;address_2&quot;:&quot;Hello&quot;,
			&quot;address_3&quot;:&quot;Hello&quot;,
			&quot;city&quot;:&quot;Hello&quot;,
			&quot;state&quot;:&quot;CA&quot;,
			&quot;postal_code&quot;:&quot;Hello&quot;
		},
		&quot;test_case_id&quot;:&quot;${testcaseId_g}&quot;
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics / GetShippingVendors" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.shipping.ShippingService/GetShippingVendors</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;sender_address&quot;:{
		&quot;country_id&quot;:&quot;${countryId}&quot;,
			&quot;address_purpose&quot;:null,
			&quot;address_1&quot;:&quot;Hello&quot;,
			&quot;address_2&quot;:&quot;Hello&quot;,
			&quot;address_3&quot;:&quot;Hello&quot;,
			&quot;city&quot;:&quot;Hello&quot;,
			&quot;state&quot;:&quot;Hello&quot;,
			&quot;postal_code&quot;:&quot;Hello&quot;
	},
	&quot;recipient_address&quot;:{
		&quot;country_id&quot;:&quot;${countryId}&quot;,
			&quot;address_purpose&quot;:null,
			&quot;address_1&quot;:&quot;Hello&quot;,
			&quot;address_2&quot;:&quot;Hello&quot;,
			&quot;address_3&quot;:&quot;Hello&quot;,
			&quot;city&quot;:&quot;Hello&quot;,
			&quot;state&quot;:&quot;Hello&quot;,
			&quot;postal_code&quot;:&quot;Hello&quot;
	},
	&quot;package_details&quot;:{
		&quot;id&quot;:&quot;${order_id_g}&quot;,
		&quot;patient_id&quot;:&quot;${patient_id_g}&quot;,
		&quot;shipping_address&quot;:{
			&quot;country_id&quot;:&quot;${countryId}&quot;,
			&quot;address_purpose&quot;:null,
			&quot;address_1&quot;:&quot;Hello&quot;,
			&quot;address_2&quot;:&quot;Hello&quot;,
			&quot;address_3&quot;:&quot;Hello&quot;,
			&quot;city&quot;:&quot;Hello&quot;,
			&quot;state&quot;:&quot;Hello&quot;,
			&quot;postal_code&quot;:&quot;Hello&quot;
		},
		&quot;test_case_id&quot;:&quot;${testcaseId_g}&quot;
	},
	&quot;require_signature&quot;:true,
	&quot;declared_value&quot;:1.4
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Ship" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">ship_g</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.options.[0]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics / ShipPackage" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.shipping.ShippingService/ShipPackage</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">${ship_g}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract User ID" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">tracking_number_g</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.tracking_number</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Logistics / CreateDeliveryTracking" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.shipping.ShippingService/CreateDeliveryTracking</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;delivery_tracking&quot;:{
		&quot;tracking_id&quot;:&quot;${tracking_number_g}&quot;,
		&quot;order_id&quot;:&quot;${order_id_g}&quot;,
		&quot;status&quot;:&quot;DeliveryTracking.Status.ACTIVE&quot;,
		 &quot;startDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;endDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,
    &quot;currentLocation&quot; : &quot;Current Location&quot;,
    &quot;recipient&quot; : &quot;6581e5157e001111d3736b50&quot;,
    &quot;deliveryItems&quot; : [ &quot;6581e5157e001111d3736b51&quot; ],
    &quot;assignedCourier&quot; : &quot;6581e5157e001111d3736b52&quot;
	}
}
</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Tinkar" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="TinkarQueryService / SearchTinkar (Blood Preasure)" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.tinkar.TinkarQueryService/searchTinkar</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;query&quot;: &quot;blood preasure&quot;,
    &quot;max_results&quot;: 10
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="TinkarQueryService / SearchTinkar (chronic disease of respiratory system)" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.tinkar.TinkarQueryService/searchTinkar</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;query&quot;: &quot;chronic disease of respiratory system&quot;,
    &quot;max_results&quot;: 10
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="TinkarQueryService / GetEntity" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.tinkar.TinkarQueryService/getTinkarEntity</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;nid&quot;:-2144684618
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Media - Delete" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Media / DeleteMedia" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.media.MediaService/DeleteMedia</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
    &quot;id&quot;: &quot;${mediaId}&quot;
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Communications - Messages" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">false</boolProp>
          </TransactionController>
          <hashTree>
            <vn.zalopay.benchmark.GRPCSampler guiclass="vn.zalopay.benchmark.GRPCSamplerGui" testclass="vn.zalopay.benchmark.GRPCSampler" testname="Communications / GetMessages" enabled="true">
              <stringProp name="GRPCSampler.protoFolder">/tmp/opencdx/proto</stringProp>
              <stringProp name="GRPCSampler.libFolder"></stringProp>
              <stringProp name="GRPCSampler.metadata">{&quot;Authorization&quot;:&quot;Bearer ${token_g}&quot;}</stringProp>
              <stringProp name="GRPCSampler.host">localhost</stringProp>
              <stringProp name="GRPCSampler.port">8080</stringProp>
              <stringProp name="GRPCSampler.fullMethod">cdx.opencdx.grpc.communication.CommunicationService/GetMessages</stringProp>
              <stringProp name="GRPCSampler.deadline">1000</stringProp>
              <boolProp name="GRPCSampler.tls">true</boolProp>
              <boolProp name="GRPCSampler.tlsDisableVerification">true</boolProp>
              <stringProp name="GRPCSampler.channelAwaitTermination">1000</stringProp>
              <stringProp name="GRPCSampler.maxInboundMessageSize">4194304</stringProp>
              <stringProp name="GRPCSampler.maxInboundMetadataSize">8192</stringProp>
              <stringProp name="GRPCSampler.requestJson">{
	&quot;patient_id&quot;:&quot;${patient_id_g}&quot;,
	&quot;pagination&quot;:{
		&quot;page_number&quot;:0,
		&quot;page_size&quot;:100,
		&quot;sort_ascending&quot;:false
	}
}</stringProp>
            </vn.zalopay.benchmark.GRPCSampler>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Thread Setup" enabled="true">
          <stringProp name="BeanShellSampler.query">String jMUUID = &quot;${__UUID}&quot;;
vars.put(&quot;userPrefix&quot;,jMUUID.replace(&quot;-&quot;,&quot;&quot;));</stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${__P(serverName,localhost)}</stringProp>
          <stringProp name="HTTPSampler.port">${__P(serverPort,8080)}</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">1000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">1000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="IAM" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/user/signup {POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;type&quot;:&quot;IAM_USER_TYPE_SYSTEM&quot;,&quot;firstName&quot;:&quot;Open&quot;,&quot;lastName&quot;:&quot;Cdx&quot;,&quot;username&quot;:&quot;open_${userPrefix}_${__threadNum}_r@opencdx.com&quot;,&quot;password&quot;:&quot;password2&quot;,&quot;systemName&quot;:&quot;OpenCDX Test System&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/iam/user/signup</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract User ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">user_id_r</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iamUser.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/user/verify [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/iam/user/verify/${user_id_r}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/user/login {POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;userName&quot;:&quot;open_${userPrefix}_${__threadNum}_r@opencdx.com&quot;,&quot;password&quot;:&quot;password2&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/iam/user/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Access Token" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">token_r</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.token</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${token_r}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/user/current [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/iam/user/current</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract User ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">user_id_r</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.iamUser.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/user/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;lastname&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/iam/user/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/user [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;iamUser&quot;:{&quot;id&quot;:&quot;${user_id_r}&quot;,&quot;systemName&quot;:&quot;changed&quot;,&quot;username&quot;:&quot;open_${userPrefix}_${__threadNum}_r@opencdx.com&quot;,&quot;type&quot;:&quot;IAM_USER_TYPE_REGULAR&quot;}}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/iam/user</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/user [GET]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/iam/user/${user_id_r}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/user/password [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;id&quot;:&quot;${user_id_r}&quot;,&#xd;
	&quot;oldPassword&quot;:&quot;password2&quot;,&#xd;
	&quot;newPassword&quot;:&quot;password&quot;,&#xd;
	&quot;newPasswordConfirmation&quot;:&quot;password&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/iam/user/password</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/country [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;name&quot;:&quot;US-INDIA&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/country</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Country Template ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">countryId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/country [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/country/${countryId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/country [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${countryId}&quot;,&quot;name&quot;:&quot;INDIA&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/country</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/organization [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;organization&quot; : {&#xd;
    &quot;name&quot; : &quot;OrganizationName&quot;,&#xd;
    &quot;description&quot; : &quot;OrganizationDescription&quot;,&#xd;
    &quot;foundingDate&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;address&quot; : {&#xd;
      &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
      &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
      &quot;address1&quot; : &quot;Address Line 1&quot;,&#xd;
      &quot;address2&quot; : &quot;Address Line 2&quot;,&#xd;
      &quot;address3&quot; : &quot;Address Line 3&quot;,&#xd;
      &quot;city&quot; : &quot;City&quot;,&#xd;
      &quot;state&quot; : &quot;state&quot;,&#xd;
      &quot;postalCode&quot; : &quot;Postcode&quot;&#xd;
    },&#xd;
    &quot;website&quot; : &quot;http://&quot;,&#xd;
    &quot;industry&quot; : &quot;Medical&quot;,&#xd;
    &quot;revenue&quot; : 100.0,&#xd;
    &quot;logoUrl&quot; : &quot;http://&quot;,&#xd;
    &quot;socialMediaLinks&quot; : [ &quot;http://&quot; ],&#xd;
    &quot;missionStatement&quot; : &quot;Mission Statement&quot;,&#xd;
    &quot;contacts&quot; : [ {&#xd;
      &quot;name&quot; : {&#xd;
        &quot;title&quot; : &quot;&quot;,&#xd;
        &quot;firstName&quot; : &quot;Contact&quot;,&#xd;
        &quot;middleName&quot; : &quot;&quot;,&#xd;
        &quot;lastName&quot; : &quot;Name&quot;,&#xd;
        &quot;suffix&quot; : &quot;&quot;&#xd;
      },&#xd;
      &quot;addresses&quot; : [ ],&#xd;
      &quot;phoneNumbers&quot; : [ {&#xd;
        &quot;number&quot; : &quot;123-456-7890&quot;,&#xd;
        &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;&#xd;
      } ],&#xd;
      &quot;emails&quot; : [ {&#xd;
        &quot;email&quot; : &quot;contact@organization&quot;,&#xd;
        &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;&#xd;
      } ]&#xd;
    } ]&#xd;
  }&#xd;
}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/iam/organization</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract User ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">organization_r</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.organization.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/organization [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;organization&quot; : {&#xd;
    &quot;id&quot; : &quot;${organization_r}&quot;,&#xd;
    &quot;name&quot; : &quot;OrganizationName&quot;,&#xd;
    &quot;description&quot; : &quot;OrganizationDescription&quot;,&#xd;
    &quot;foundingDate&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;address&quot; : {&#xd;
      &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
      &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
      &quot;address1&quot; : &quot;Address Line 1&quot;,&#xd;
      &quot;address2&quot; : &quot;Address Line 2&quot;,&#xd;
      &quot;address3&quot; : &quot;Address Line 3&quot;,&#xd;
      &quot;city&quot; : &quot;City&quot;,&#xd;
      &quot;state&quot; : &quot;state&quot;,&#xd;
      &quot;postalCode&quot; : &quot;Postcode&quot;&#xd;
    },&#xd;
    &quot;website&quot; : &quot;http://&quot;,&#xd;
    &quot;industry&quot; : &quot;Medical&quot;,&#xd;
    &quot;revenue&quot; : 100.0,&#xd;
    &quot;logoUrl&quot; : &quot;http://&quot;,&#xd;
    &quot;socialMediaLinks&quot; : [ &quot;http://&quot; ],&#xd;
    &quot;missionStatement&quot; : &quot;Mission Statement&quot;,&#xd;
    &quot;contacts&quot; : [ {&#xd;
      &quot;name&quot; : {&#xd;
        &quot;title&quot; : &quot;&quot;,&#xd;
        &quot;firstName&quot; : &quot;Contact&quot;,&#xd;
        &quot;middleName&quot; : &quot;&quot;,&#xd;
        &quot;lastName&quot; : &quot;Name&quot;,&#xd;
        &quot;suffix&quot; : &quot;&quot;&#xd;
      },&#xd;
      &quot;addresses&quot; : [ ],&#xd;
      &quot;phoneNumbers&quot; : [ {&#xd;
        &quot;number&quot; : &quot;123-456-7890&quot;,&#xd;
        &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;&#xd;
      } ],&#xd;
      &quot;emails&quot; : [ {&#xd;
        &quot;email&quot; : &quot;contact@organization&quot;,&#xd;
        &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;&#xd;
      } ]&#xd;
    } ]&#xd;
  }&#xd;
}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/iam/organization</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/organization/{id} [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/iam/organization/${organization_r}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/organization/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"> { }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/iam/organization/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/workspace [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;workspace&quot; : {&#xd;
    &quot;name&quot; : &quot;Workspace Name&quot;,&#xd;
    &quot;description&quot; : &quot;Workspace Description&quot;,&#xd;
    &quot;createdDate&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;location&quot; : &quot;San Diego, California, United States&quot;,&#xd;
    &quot;organizationId&quot; : &quot;${organization_r}&quot;,&#xd;
    &quot;manager&quot; : &quot;Bob&quot;,&#xd;
    &quot;capacity&quot; : 32,&#xd;
    &quot;facilities&quot; : [ &quot;Facility A&quot;, &quot;Facility B&quot; ],&#xd;
    &quot;workspaceType&quot; : &quot;Workspace Type&quot;,&#xd;
    &quot;workspaceImageUrls&quot; : [ &quot;http://&quot;, &quot;http://&quot; ],&#xd;
    &quot;usagePolicy&quot; : &quot;usage Policy&quot;,&#xd;
    &quot;availabilitySchedule&quot; : &quot;Monday - Friday&quot;,&#xd;
    &quot;departments&quot; : [ {&#xd;
      &quot;id&quot; : &quot;656784a0f01b3b4e73b03fb4&quot;,&#xd;
      &quot;name&quot; : &quot;Department Name&quot;,&#xd;
      &quot;description&quot; : &quot;Department Description&quot;,&#xd;
      &quot;employees&quot; : [ {&#xd;
        &quot;employeeId&quot; : &quot;65849dd16d2e0708c95e4b02&quot;,&#xd;
        &quot;name&quot; : {&#xd;
          &quot;title&quot; : &quot;&quot;,&#xd;
          &quot;firstName&quot; : &quot;Employee&quot;,&#xd;
          &quot;middleName&quot; : &quot;&quot;,&#xd;
          &quot;lastName&quot; : &quot;Name&quot;,&#xd;
          &quot;suffix&quot; : &quot;&quot;&#xd;
        },&#xd;
        &quot;title&quot; : &quot;Employee Title&quot;,&#xd;
        &quot;phoneNumbers&quot; : [ {&#xd;
          &quot;number&quot; : &quot;123-456-7890&quot;,&#xd;
          &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;&#xd;
        } ],&#xd;
        &quot;email&quot; : [ {&#xd;
          &quot;email&quot; : &quot;employee@deparment&quot;,&#xd;
          &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;&#xd;
        } ]&#xd;
      } ]&#xd;
    } ]&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/iam/workspace</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract User ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">workspace_r</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.workspace.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/workspace [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;workspace&quot; : {&#xd;
    &quot;id&quot; : &quot;${workspace_r}&quot;,&#xd;
    &quot;name&quot; : &quot;Workspace Name2&quot;,&#xd;
    &quot;description&quot; : &quot;Workspace Description&quot;,&#xd;
    &quot;createdDate&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;location&quot; : &quot;San Diego, California, United States&quot;,&#xd;
    &quot;organizationId&quot; : &quot;${organization_r}&quot;,&#xd;
    &quot;manager&quot; : &quot;Bob&quot;,&#xd;
    &quot;capacity&quot; : 32,&#xd;
    &quot;facilities&quot; : [ &quot;Facility A&quot;, &quot;Facility B&quot; ],&#xd;
    &quot;workspaceType&quot; : &quot;Workspace Type&quot;,&#xd;
    &quot;workspaceImageUrls&quot; : [ &quot;http://&quot;, &quot;http://&quot; ],&#xd;
    &quot;usagePolicy&quot; : &quot;usage Policy&quot;,&#xd;
    &quot;availabilitySchedule&quot; : &quot;Monday - Friday&quot;,&#xd;
    &quot;departments&quot; : [ {&#xd;
      &quot;id&quot; : &quot;656784a0f01b3b4e73b03fb4&quot;,&#xd;
      &quot;name&quot; : &quot;Department Name&quot;,&#xd;
      &quot;description&quot; : &quot;Department Description&quot;,&#xd;
      &quot;employees&quot; : [ {&#xd;
        &quot;employeeId&quot; : &quot;65849dd16d2e0708c95e4b02&quot;,&#xd;
        &quot;name&quot; : {&#xd;
          &quot;title&quot; : &quot;&quot;,&#xd;
          &quot;firstName&quot; : &quot;Employee&quot;,&#xd;
          &quot;middleName&quot; : &quot;&quot;,&#xd;
          &quot;lastName&quot; : &quot;Name&quot;,&#xd;
          &quot;suffix&quot; : &quot;&quot;&#xd;
        },&#xd;
        &quot;title&quot; : &quot;Employee Title&quot;,&#xd;
        &quot;phoneNumbers&quot; : [ {&#xd;
          &quot;number&quot; : &quot;123-456-7890&quot;,&#xd;
          &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;&#xd;
        } ],&#xd;
        &quot;email&quot; : [ {&#xd;
          &quot;email&quot; : &quot;employee@deparment&quot;,&#xd;
          &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;&#xd;
        } ]&#xd;
      } ]&#xd;
    } ]&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/iam/workspace</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/workspace/{id} [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/iam/workspace/${workspace_r}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/iam/workspace/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/iam/workspace/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Authorization</stringProp>
              <stringProp name="Header.value">Bearer ${token_r}</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="HelloWorld" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/helloworld/hello" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;name&quot;: &quot;jeff&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/helloworld/hello</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Audit" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/event/audit" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;created&quot; : &quot;1970-01-01T00:00:00Z&quot;,&#xd;
  &quot;eventType&quot; : &quot;AUDIT_EVENT_TYPE_USER_PII_CREATED&quot;,&#xd;
  &quot;actor&quot; : {&#xd;
    &quot;identity&quot; : &quot;&quot;,&#xd;
    &quot;role&quot; : &quot;&quot;,&#xd;
    &quot;networkAddress&quot; : &quot;192.198.0.1&quot;,&#xd;
    &quot;agentType&quot; : &quot;AGENT_TYPE_HUMAN_USER&quot;&#xd;
  },&#xd;
  &quot;purposeOfUse&quot; : &quot;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/audit/event</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Logistics - Devices Vendor Manufacturers TestCases" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/manufacturer [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;name&quot;:&quot;PFIZER&quot;,&#xd;
  &quot;manufacturerAddress&quot; : {&#xd;
      &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
      &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
      &quot;address1&quot; : &quot;Address Line 1&quot;,&#xd;
      &quot;address2&quot; : &quot;Address Line 2&quot;,&#xd;
      &quot;address3&quot; : &quot;Address Line 3&quot;,&#xd;
      &quot;city&quot; : &quot;City&quot;,&#xd;
      &quot;state&quot; : &quot;state&quot;,&#xd;
      &quot;postalCode&quot; : &quot;Postcode&quot;&#xd;
    }&#xd;
 }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/manufacturer</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Manufacturer Template ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">manufacturerId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/manufacturer [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/manufacturer/${manufacturerId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/manufacturer [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${manufacturerId}&quot;,&quot;name&quot;:&quot;RANBAXY&quot;,&quot;manufacturerAddress&quot; : {&#xd;
      &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
      &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
      &quot;address1&quot; : &quot;Address Line 1&quot;,&#xd;
      &quot;address2&quot; : &quot;Address Line 2&quot;,&#xd;
      &quot;address3&quot; : &quot;Address Line 3&quot;,&#xd;
      &quot;city&quot; : &quot;City&quot;,&#xd;
      &quot;state&quot; : &quot;state&quot;,&#xd;
      &quot;postalCode&quot; : &quot;Postcode&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/manufacturer</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/manufacturer/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;name&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/manufacturer/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/vendor [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;vendorName&quot;:&quot;VENDOR-FIRST&quot;,&quot;vendorAddress&quot; : {&#xd;
      &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
      &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
      &quot;address1&quot; : &quot;Address Line 1&quot;,&#xd;
      &quot;address2&quot; : &quot;Address Line 2&quot;,&#xd;
      &quot;address3&quot; : &quot;Address Line 3&quot;,&#xd;
      &quot;city&quot; : &quot;City&quot;,&#xd;
      &quot;state&quot; : &quot;state&quot;,&#xd;
      &quot;postalCode&quot; : &quot;Postcode&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/vendor</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Vendor Template ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">vendorId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/vendor [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/vendor/${vendorId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/vendor [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${vendorId}&quot;,&quot;vendorName&quot;:&quot;VENDOR-UPDATED&quot;,&quot;vendorAddress&quot;:{&#xd;
      &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
      &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
      &quot;address1&quot; : &quot;Address Line 1&quot;,&#xd;
      &quot;address2&quot; : &quot;Address Line 2&quot;,&#xd;
      &quot;address3&quot; : &quot;Address Line 3&quot;,&#xd;
      &quot;city&quot; : &quot;City&quot;,&#xd;
      &quot;state&quot; : &quot;state&quot;,&#xd;
      &quot;postalCode&quot; : &quot;Postcode&quot;&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/vendor</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/vendor/list [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;name&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/vendor/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/testcase [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;manufacturerId&quot;:&quot;${manufacturerId}&quot;,&quot;vendorId&quot;:&quot;${vendorId}&quot;,&quot;batchNumber&quot;:&quot;10&quot;,&quot;serialNumber&quot;:&quot;2&quot;,&quot;deviceIds&quot; : [  ]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/testcase</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract TestCase Template ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">testcaseId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/testcase [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/testcase/${testcaseId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/device [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;manufacturerId&quot;:&quot;${manufacturerId}&quot;,&quot;manufacturerCountryId&quot; : &quot;${countryId}&quot;,&quot;vendorId&quot;:&quot;${vendorId}&quot;,&quot;vendorCountryId&quot; : &quot;${countryId}&quot;,&quot;testTypeId&quot;:&quot;TEST-ID-001&quot;,&quot;batchNumber&quot;:&quot;10&quot;,&quot;serialNumber&quot;:&quot;2&quot;,&quot;testCaseIds&quot; : [ &quot;${testcaseId}&quot; ]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/device</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract DeviceId Template ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">deviceId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/testcase [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${testcaseId}&quot;,&quot;manufacturerId&quot;:&quot;${manufacturerId}&quot;,&quot;vendorId&quot;:&quot;${vendorId}&quot;,&quot;batchNumber&quot;:&quot;21&quot;,&quot;deviceIds&quot; : [ &quot;${deviceId}&quot; ]}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/testcase</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/device [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/device/${deviceId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/device/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;name&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/device/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/logistics/testcase/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;name&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/testcase/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Media" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/media [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;description&quot;: &quot;ex consectetur velit anim&quot;,&#xd;
    &quot;labels&quot;: [&#xd;
        &quot;ut et nulla sint&quot;,&#xd;
        &quot;labore adipisicing&quot;&#xd;
    ],&#xd;
    &quot;name&quot;: &quot;dolore eiusmod quis labore dolor&quot;,&#xd;
    &quot;shortDescription&quot;: &quot;enim sit&quot;,&#xd;
    &quot;type&quot;: 2&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/media</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Media  ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">mediaId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.media.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/media/upload" enabled="true">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="./README.md" elementType="HTTPFileArg">
                  <stringProp name="File.mimetype">text/x-web-markdown</stringProp>
                  <stringProp name="File.path">./README.md</stringProp>
                  <stringProp name="File.paramname">file</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/media/upload/${mediaId}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/media [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/media/${mediaId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Media  ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">download_endpoint</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.media.endpoint</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/media/download" enabled="true">
            <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
              <collectionProp name="HTTPFileArgs.files">
                <elementProp name="./README.md" elementType="HTTPFileArg">
                  <stringProp name="File.mimetype">text/x-web-markdown</stringProp>
                  <stringProp name="File.path">./README.md</stringProp>
                  <stringProp name="File.paramname">file</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">${download_endpoint}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/media [PUT]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;id&quot;:&quot;${mediaId}&quot;,&quot;name&quot;:&quot;name&quot;,&quot;shortDescription&quot;:&quot;shortDescription&quot;,&quot;description&quot;:&quot;description&quot;,&quot;labels&quot;:[&quot;labels&quot;],&quot;type&quot;:&quot;MEDIA_TYPE_IMAGE&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/media</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/media/list  [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;lastname&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/media/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Health Profile" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/health/profile [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;userprofile&quot; : {&#xd;
    &quot;userId&quot; : &quot;${user_id_r}&quot;,&#xd;
    &quot;nationalHealthId&quot; : &quot;b1349628-6f28-44ae-b600-7898fd9ff292&quot;,&#xd;
    &quot;fullName&quot; : {&#xd;
      &quot;title&quot; : &quot;&quot;,&#xd;
      &quot;firstName&quot; : &quot;First&quot;,&#xd;
      &quot;middleName&quot; : &quot;Middle&quot;,&#xd;
      &quot;lastName&quot; : &quot;last&quot;,&#xd;
      &quot;suffix&quot; : &quot;&quot;&#xd;
    },&#xd;
    &quot;contacts&quot; : [ {&#xd;
      &quot;addresses&quot; : [ {&#xd;
        &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
        &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
        &quot;address1&quot; : &quot;101 Main Street&quot;,&#xd;
        &quot;city&quot; : &quot;City&quot;,&#xd;
        &quot;state&quot; : &quot;CA&quot;,&#xd;
        &quot;postalCode&quot; : &quot;12345&quot;&#xd;
      } ],&#xd;
      &quot;phoneNumbers&quot; : [ {&#xd;
        &quot;number&quot; : &quot;1234567890&quot;,&#xd;
        &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;&#xd;
      } ],&#xd;
      &quot;emails&quot; : [ {&#xd;
        &quot;email&quot; : &quot;email@email.com&quot;,&#xd;
        &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;&#xd;
      } ]&#xd;
    } ],&#xd;
    &quot;gender&quot; : &quot;GENDER_MALE&quot;,&#xd;
    &quot;dateOfBirth&quot; : &quot;2023-10-08T02:45:04Z&quot;,&#xd;
    &quot;placeOfBirth&quot; : {&#xd;
      &quot;country&quot; : &quot;${countryId}&quot;,&#xd;
      &quot;state&quot; : &quot;CA&quot;,&#xd;
      &quot;city&quot; : &quot;City&quot;&#xd;
    },&#xd;
    &quot;photo&quot; : &quot;&quot;,&#xd;
    &quot;communication&quot; : {&#xd;
      &quot;language&quot; : &quot;EN&quot;,&#xd;
      &quot;preferred&quot; : true,&#xd;
      &quot;timeZone&quot; : &quot;EST&quot;&#xd;
    },&#xd;
    &quot;demographics&quot; : {&#xd;
      &quot;ethnicity&quot; : &quot;Ethnicity&quot;,&#xd;
      &quot;race&quot; : &quot;Race&quot;,&#xd;
      &quot;nationality&quot; : &quot;USA&quot;,&#xd;
      &quot;gender&quot; : &quot;GENDER_MALE&quot;&#xd;
    },&#xd;
    &quot;education&quot; : {&#xd;
      &quot;entries&quot; : [ {&#xd;
        &quot;degree&quot; : &quot;BA&quot;,&#xd;
        &quot;institution&quot; : &quot;University&quot;,&#xd;
        &quot;startDate&quot; : &quot;1992/08/01&quot;,&#xd;
        &quot;completionDate&quot; : &quot;1996/05/30&quot;&#xd;
      } ]&#xd;
    },&#xd;
    &quot;employeeIdentity&quot; : {&#xd;
      &quot;organizationId&quot; : &quot;${organization_r}&quot;,&#xd;
      &quot;workspaceId&quot; : &quot;${workspace_r}&quot;,&#xd;
      &quot;employeeId&quot; : &quot;employeeID&quot;,&#xd;
      &quot;identityVerified&quot; : true,&#xd;
      &quot;status&quot; : &quot;Full Time&quot;&#xd;
    },&#xd;
    &quot;primaryContactInfo&quot; : {&#xd;
      &quot;addresses&quot; : [ {&#xd;
        &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
        &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
        &quot;address1&quot; : &quot;101 Main Street&quot;,&#xd;
        &quot;city&quot; : &quot;City&quot;,&#xd;
        &quot;state&quot; : &quot;CA&quot;,&#xd;
        &quot;postalCode&quot; : &quot;12345&quot;&#xd;
      } ],&#xd;
      &quot;phoneNumbers&quot; : [ {&#xd;
        &quot;number&quot; : &quot;1234567890&quot;,&#xd;
        &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;&#xd;
      } ],&#xd;
      &quot;emails&quot; : [ {&#xd;
        &quot;email&quot; : &quot;email@email.com&quot;,&#xd;
        &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;&#xd;
      } ]&#xd;
    },&#xd;
    &quot;emergencyContact&quot; : {&#xd;
      &quot;relationship&quot; : &quot;Emergency Contact&quot;,&#xd;
      &quot;contactInfo&quot; : {&#xd;
        &quot;name&quot; : {&#xd;
          &quot;title&quot; : &quot;Mr.&quot;,&#xd;
          &quot;firstName&quot; : &quot;First&quot;,&#xd;
          &quot;middleName&quot; : &quot;Middle&quot;,&#xd;
          &quot;lastName&quot; : &quot;last&quot;,&#xd;
          &quot;suffix&quot; : &quot;Jr.&quot;&#xd;
        },&#xd;
        &quot;addresses&quot; : [ {&#xd;
          &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
          &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
          &quot;address1&quot; : &quot;101 Main Street&quot;,&#xd;
          &quot;city&quot; : &quot;City&quot;,&#xd;
          &quot;state&quot; : &quot;CA&quot;,&#xd;
          &quot;postalCode&quot; : &quot;12345&quot;&#xd;
        } ],&#xd;
        &quot;phoneNumbers&quot; : [ {&#xd;
          &quot;number&quot; : &quot;1234567890&quot;,&#xd;
          &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;&#xd;
        } ],&#xd;
        &quot;emails&quot; : [ {&#xd;
          &quot;email&quot; : &quot;email@email.com&quot;,&#xd;
          &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;&#xd;
        } ]&#xd;
      }&#xd;
    },&#xd;
    &quot;pharmacyDetails&quot; : {&#xd;
      &quot;pharmacyName&quot; : &quot;Pharmacy Name&quot;,&#xd;
      &quot;pharmacyAddress&quot; : {&#xd;
        &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
        &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
        &quot;address1&quot; : &quot;101 Main Street&quot;,&#xd;
        &quot;city&quot; : &quot;City&quot;,&#xd;
        &quot;state&quot; : &quot;CA&quot;,&#xd;
        &quot;postalCode&quot; : &quot;12345&quot;&#xd;
      },&#xd;
      &quot;pharmacyContact&quot; : {&#xd;
        &quot;addresses&quot; : [ {&#xd;
          &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
          &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
          &quot;address1&quot; : &quot;101 Main Street&quot;,&#xd;
          &quot;city&quot; : &quot;City&quot;,&#xd;
          &quot;state&quot; : &quot;CA&quot;,&#xd;
          &quot;postalCode&quot; : &quot;12345&quot;&#xd;
        } ],&#xd;
        &quot;phoneNumbers&quot; : [ {&#xd;
          &quot;number&quot; : &quot;1234567890&quot;,&#xd;
          &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;&#xd;
        } ],&#xd;
        &quot;emails&quot; : [ {&#xd;
          &quot;email&quot; : &quot;email@email.com&quot;,&#xd;
          &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;&#xd;
        } ]&#xd;
      }&#xd;
    },&#xd;
    &quot;vaccineAdministered&quot; : [ {&#xd;
      &quot;administrationDate&quot; : &quot;2021/06/01&quot;,&#xd;
      &quot;fips&quot; : &quot;12345&quot;,&#xd;
      &quot;locality&quot; : &quot;CA&quot;,&#xd;
      &quot;healthDistrict&quot; : &quot;District&quot;,&#xd;
      &quot;facilityType&quot; : &quot;Clinic&quot;,&#xd;
      &quot;manufacturer&quot; : &quot;65849f9ea4a7463cc04ee652&quot;,&#xd;
      &quot;doseNumber&quot; : 20,&#xd;
      &quot;vaccineType&quot; : &quot;COVID-19&quot;&#xd;
    } ],&#xd;
    &quot;dependentId&quot; : [ &quot;${user_id_r}&quot; ],&#xd;
    &quot;knownAllergies&quot; : [ {&#xd;
      &quot;allergen&quot; : &quot;Evergreen Trees&quot;,&#xd;
      &quot;reaction&quot; : &quot;Respiratory Distress&quot;,&#xd;
      &quot;isSevere&quot; : true,&#xd;
      &quot;onsetDate&quot; : &quot;1975/12/20&quot;,&#xd;
      &quot;lastOccurrence&quot; : &quot;1976/12/25&quot;,&#xd;
      &quot;notes&quot; : &quot;Christmas Trees&quot;&#xd;
    } ],&#xd;
    &quot;currentMedications&quot; : [ {&#xd;
      &quot;name&quot; : &quot;Singular&quot;,&#xd;
      &quot;dosage&quot; : &quot;5mg&quot;,&#xd;
      &quot;instructions&quot; : &quot;Take 1 pill at night&quot;,&#xd;
      &quot;routeOfAdministration&quot; : &quot;Oral&quot;,&#xd;
      &quot;frequency&quot; : &quot;Daily&quot;,&#xd;
      &quot;startDate&quot; : &quot;1976/12/26&quot;,&#xd;
      &quot;endDate&quot; : &quot;EOL&quot;,&#xd;
      &quot;prescribingDoctor&quot; : &quot;Dr. OpenCDX&quot;,&#xd;
      &quot;pharmacy&quot; : &quot;Pharmacy&quot;,&#xd;
      &quot;isPrescription&quot; : true&#xd;
    } ],&#xd;
    &quot;isActive&quot; : false,&#xd;
    &quot;email&quot; : [ ],&#xd;
    &quot;phone&quot; : [ ],&#xd;
    &quot;address&quot; : [ {&#xd;
      &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
      &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
      &quot;address1&quot; : &quot;101 Main Street&quot;,&#xd;
      &quot;city&quot; : &quot;City&quot;,&#xd;
      &quot;state&quot; : &quot;CA&quot;,&#xd;
      &quot;postalCode&quot; : &quot;12345&quot;&#xd;
    } ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/health/profile</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract User ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">patient_id_r</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.userprofile.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/health/profile [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;userId&quot; : &quot;${user_id_r}&quot;,&#xd;
  &quot;updatedProfile&quot; : {&#xd;
    &quot;id&quot; : &quot;${patient_id_r}&quot;,&#xd;
    &quot;nationalHealthId&quot; : &quot;b1349628-6f28-44ae-b600-7898fd9ff292&quot;,&#xd;
    &quot;fullName&quot; : {&#xd;
      &quot;title&quot; : &quot;&quot;,&#xd;
      &quot;firstName&quot; : &quot;First&quot;,&#xd;
      &quot;middleName&quot; : &quot;Middle&quot;,&#xd;
      &quot;lastName&quot; : &quot;last&quot;,&#xd;
      &quot;suffix&quot; : &quot;&quot;&#xd;
    },&#xd;
    &quot;contacts&quot; : [ {&#xd;
      &quot;addresses&quot; : [ {&#xd;
        &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
        &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
        &quot;address1&quot; : &quot;101 Main Street&quot;,&#xd;
        &quot;city&quot; : &quot;City&quot;,&#xd;
        &quot;state&quot; : &quot;CA&quot;,&#xd;
        &quot;postalCode&quot; : &quot;12345&quot;&#xd;
      } ],&#xd;
      &quot;phoneNumbers&quot; : [ {&#xd;
        &quot;number&quot; : &quot;1234567890&quot;,&#xd;
        &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;&#xd;
      } ],&#xd;
      &quot;emails&quot; : [ {&#xd;
        &quot;email&quot; : &quot;email@email.com&quot;,&#xd;
        &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;&#xd;
      } ]&#xd;
    } ],&#xd;
    &quot;gender&quot; : &quot;GENDER_MALE&quot;,&#xd;
    &quot;dateOfBirth&quot; : &quot;2023-10-08T02:45:04Z&quot;,&#xd;
    &quot;placeOfBirth&quot; : {&#xd;
      &quot;country&quot; : &quot;${countryId}&quot;,&#xd;
      &quot;state&quot; : &quot;CA&quot;,&#xd;
      &quot;city&quot; : &quot;City&quot;&#xd;
    },&#xd;
    &quot;photo&quot; : &quot;&quot;,&#xd;
    &quot;communication&quot; : {&#xd;
      &quot;language&quot; : &quot;EN&quot;,&#xd;
      &quot;preferred&quot; : true,&#xd;
      &quot;timeZone&quot; : &quot;EST&quot;&#xd;
    },&#xd;
    &quot;demographics&quot; : {&#xd;
      &quot;ethnicity&quot; : &quot;Ethnicity&quot;,&#xd;
      &quot;race&quot; : &quot;Race&quot;,&#xd;
      &quot;nationality&quot; : &quot;USA&quot;,&#xd;
      &quot;gender&quot; : &quot;GENDER_MALE&quot;&#xd;
    },&#xd;
    &quot;education&quot; : {&#xd;
      &quot;entries&quot; : [ {&#xd;
        &quot;degree&quot; : &quot;BA&quot;,&#xd;
        &quot;institution&quot; : &quot;University&quot;,&#xd;
        &quot;startDate&quot; : &quot;1992/08/01&quot;,&#xd;
        &quot;completionDate&quot; : &quot;1996/05/30&quot;&#xd;
      } ]&#xd;
    },&#xd;
    &quot;employeeIdentity&quot; : {&#xd;
      &quot;organizationId&quot; : &quot;${organization_r}&quot;,&#xd;
      &quot;workspaceId&quot; : &quot;${workspace_r}&quot;,&#xd;
      &quot;employeeId&quot; : &quot;employeeID&quot;,&#xd;
      &quot;identityVerified&quot; : true,&#xd;
      &quot;status&quot; : &quot;Full Time&quot;&#xd;
    },&#xd;
    &quot;primaryContactInfo&quot; : {&#xd;
      &quot;addresses&quot; : [ {&#xd;
        &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
        &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
        &quot;address1&quot; : &quot;101 Main Street&quot;,&#xd;
        &quot;city&quot; : &quot;City&quot;,&#xd;
        &quot;state&quot; : &quot;CA&quot;,&#xd;
        &quot;postalCode&quot; : &quot;12345&quot;&#xd;
      } ],&#xd;
      &quot;phoneNumbers&quot; : [ {&#xd;
        &quot;number&quot; : &quot;1234567890&quot;,&#xd;
        &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;&#xd;
      } ],&#xd;
      &quot;emails&quot; : [ {&#xd;
        &quot;email&quot; : &quot;email@email.com&quot;,&#xd;
        &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;&#xd;
      } ]&#xd;
    },&#xd;
    &quot;emergencyContact&quot; : {&#xd;
      &quot;relationship&quot; : &quot;Emergency Contact&quot;,&#xd;
      &quot;contactInfo&quot; : {&#xd;
        &quot;name&quot; : {&#xd;
          &quot;title&quot; : &quot;Mr.&quot;,&#xd;
          &quot;firstName&quot; : &quot;First&quot;,&#xd;
          &quot;middleName&quot; : &quot;Middle&quot;,&#xd;
          &quot;lastName&quot; : &quot;last&quot;,&#xd;
          &quot;suffix&quot; : &quot;Jr.&quot;&#xd;
        },&#xd;
        &quot;addresses&quot; : [ {&#xd;
          &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
          &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
          &quot;address1&quot; : &quot;101 Main Street&quot;,&#xd;
          &quot;city&quot; : &quot;City&quot;,&#xd;
          &quot;state&quot; : &quot;CA&quot;,&#xd;
          &quot;postalCode&quot; : &quot;12345&quot;&#xd;
        } ],&#xd;
        &quot;phoneNumbers&quot; : [ {&#xd;
          &quot;number&quot; : &quot;1234567890&quot;,&#xd;
          &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;&#xd;
        } ],&#xd;
        &quot;emails&quot; : [ {&#xd;
          &quot;email&quot; : &quot;email@email.com&quot;,&#xd;
          &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;&#xd;
        } ]&#xd;
      }&#xd;
    },&#xd;
    &quot;pharmacyDetails&quot; : {&#xd;
      &quot;pharmacyName&quot; : &quot;Pharmacy Name&quot;,&#xd;
      &quot;pharmacyAddress&quot; : {&#xd;
        &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
        &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
        &quot;address1&quot; : &quot;101 Main Street&quot;,&#xd;
        &quot;city&quot; : &quot;City&quot;,&#xd;
        &quot;state&quot; : &quot;CA&quot;,&#xd;
        &quot;postalCode&quot; : &quot;12345&quot;&#xd;
      },&#xd;
      &quot;pharmacyContact&quot; : {&#xd;
        &quot;addresses&quot; : [ {&#xd;
          &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
          &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
          &quot;address1&quot; : &quot;101 Main Street&quot;,&#xd;
          &quot;city&quot; : &quot;City&quot;,&#xd;
          &quot;state&quot; : &quot;CA&quot;,&#xd;
          &quot;postalCode&quot; : &quot;12345&quot;&#xd;
        } ],&#xd;
        &quot;phoneNumbers&quot; : [ {&#xd;
          &quot;number&quot; : &quot;1234567890&quot;,&#xd;
          &quot;type&quot; : &quot;PHONE_TYPE_MOBILE&quot;&#xd;
        } ],&#xd;
        &quot;emails&quot; : [ {&#xd;
          &quot;email&quot; : &quot;email@email.com&quot;,&#xd;
          &quot;type&quot; : &quot;EMAIL_TYPE_WORK&quot;&#xd;
        } ]&#xd;
      }&#xd;
    },&#xd;
    &quot;vaccineAdministered&quot; : [ {&#xd;
      &quot;administrationDate&quot; : &quot;2021/06/01&quot;,&#xd;
      &quot;fips&quot; : &quot;12345&quot;,&#xd;
      &quot;locality&quot; : &quot;CA&quot;,&#xd;
      &quot;healthDistrict&quot; : &quot;District&quot;,&#xd;
      &quot;facilityType&quot; : &quot;Clinic&quot;,&#xd;
      &quot;manufacturer&quot; : &quot;65849f9ea4a7463cc04ee652&quot;,&#xd;
      &quot;doseNumber&quot; : 20,&#xd;
      &quot;vaccineType&quot; : &quot;COVID-19&quot;&#xd;
    } ],&#xd;
    &quot;dependentId&quot; : [  &quot;${user_id_r}&quot; ],&#xd;
    &quot;knownAllergies&quot; : [ {&#xd;
      &quot;allergen&quot; : &quot;Evergreen Trees&quot;,&#xd;
      &quot;reaction&quot; : &quot;Respiratory Distress&quot;,&#xd;
      &quot;isSevere&quot; : true,&#xd;
      &quot;onsetDate&quot; : &quot;1975/12/20&quot;,&#xd;
      &quot;lastOccurrence&quot; : &quot;1976/12/25&quot;,&#xd;
      &quot;notes&quot; : &quot;Christmas Trees&quot;&#xd;
    } ],&#xd;
    &quot;currentMedications&quot; : [ {&#xd;
      &quot;name&quot; : &quot;Singular&quot;,&#xd;
      &quot;dosage&quot; : &quot;5mg&quot;,&#xd;
      &quot;instructions&quot; : &quot;Take 1 pill at night&quot;,&#xd;
      &quot;routeOfAdministration&quot; : &quot;Oral&quot;,&#xd;
      &quot;frequency&quot; : &quot;Daily&quot;,&#xd;
      &quot;startDate&quot; : &quot;1976/12/26&quot;,&#xd;
      &quot;endDate&quot; : &quot;EOL&quot;,&#xd;
      &quot;prescribingDoctor&quot; : &quot;Dr. OpenCDX&quot;,&#xd;
      &quot;pharmacy&quot; : &quot;Pharmacy&quot;,&#xd;
      &quot;isPrescription&quot; : true&#xd;
    } ],&#xd;
    &quot;isActive&quot; : false,&#xd;
    &quot;email&quot; : [ ],&#xd;
    &quot;phone&quot; : [ ],&#xd;
    &quot;address&quot; : [ {&#xd;
      &quot;countryId&quot; : &quot;${countryId}&quot;,&#xd;
      &quot;addressPurpose&quot; : &quot;LOCATION&quot;,&#xd;
      &quot;address1&quot; : &quot;101 Main Street&quot;,&#xd;
      &quot;city&quot; : &quot;City&quot;,&#xd;
      &quot;state&quot; : &quot;CA&quot;,&#xd;
      &quot;postalCode&quot; : &quot;12345&quot;&#xd;
    } ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/health/profile</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/health/profile [GET]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/health/profile/${patient_id_r}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Communications Immediate" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;subject&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_NEWSLETTER&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Email Template ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">emailTemplateId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.templateId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email/${emailTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [GET] (Cache)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email/${emailTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;templateId&quot;:&quot;${emailTemplateId}&quot;,&quot;subject&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_CONFIRMATION&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;lastname&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;message&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_REMINDER&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SMS Template ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">smsTemplateId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.templateId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [GET}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms/${smsTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [GET} (Cache)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms/${smsTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;templateId&quot;:&quot;${smsTemplateId}&quot;,&quot;message&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_CONFIRMATION&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;lastname&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eventName&quot;:&quot;&quot;,&quot;eventDescription&quot;:&quot;&quot;,&quot;emailTemplateId&quot;:&quot;${emailTemplateId}&quot;,&quot;smsTemplateId&quot;:&quot;${smsTemplateId}&quot;,&quot;eventParameters&quot;:[],&quot;priority&quot;:&quot;NOTIFICATION_PRIORITY_IMMEDIATE&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Event Id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">eventId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.eventId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event/${eventId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [GET] (Cache)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event/${eventId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [PUT]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eventId&quot;:&quot;${eventId}&quot;,&quot;eventName&quot;:&quot;&quot;,&quot;eventDescription&quot;:&quot;&quot;,&quot;emailTemplateId&quot;:&quot;${emailTemplateId}&quot;,&quot;smsTemplateId&quot;:&quot;${smsTemplateId}&quot;,&quot;eventParameters&quot;:[],&quot;priority&quot;:&quot;NOTIFICATION_PRIORITY_IMMEDIATE&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;lastname&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/notification [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eventId&quot;:&quot;${eventId}&quot;,&quot;customData&quot;:{},&quot;toEmail&quot;:[&quot;testuser1@opencdx.com&quot;],&quot;ccEmail&quot;:[],&quot;bccEmail&quot;:[],&quot;emailAttachments&quot;:[],&quot;toPhoneNumber&quot;:[&quot;123-456-7890&quot;],&quot;variables&quot;:{},&quot;recipientsId&quot;:[],&quot;patientId&quot; :  &quot;${patient_id_r}&quot; }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/notification</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [DELETE]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event/${eventId}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [DELETE}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms/${smsTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [DELETE]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email/${emailTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Communications High" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;subject&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_NEWSLETTER&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Email Template ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">emailTemplateId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.templateId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email/${emailTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [GET] (Cache)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email/${emailTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;templateId&quot;:&quot;${emailTemplateId}&quot;,&quot;subject&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_CONFIRMATION&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;lastname&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;message&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_REMINDER&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SMS Template ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">smsTemplateId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.templateId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [GET}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms/${smsTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [GET} (Cache)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms/${smsTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;templateId&quot;:&quot;${smsTemplateId}&quot;,&quot;message&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_CONFIRMATION&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;lastname&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eventName&quot;:&quot;&quot;,&quot;eventDescription&quot;:&quot;&quot;,&quot;emailTemplateId&quot;:&quot;${emailTemplateId}&quot;,&quot;smsTemplateId&quot;:&quot;${smsTemplateId}&quot;,&quot;eventParameters&quot;:[],&quot;priority&quot;:&quot;NOTIFICATION_PRIORITY_HIGH&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Event Id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">eventId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.eventId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event/${eventId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [GET] (Cache)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event/${eventId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [PUT]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eventId&quot;:&quot;${eventId}&quot;,&quot;eventName&quot;:&quot;&quot;,&quot;eventDescription&quot;:&quot;&quot;,&quot;emailTemplateId&quot;:&quot;${emailTemplateId}&quot;,&quot;smsTemplateId&quot;:&quot;${smsTemplateId}&quot;,&quot;eventParameters&quot;:[],&quot;priority&quot;:&quot;NOTIFICATION_PRIORITY_HIGH&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;lastname&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/notification [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eventId&quot;:&quot;${eventId}&quot;,&quot;customData&quot;:{},&quot;toEmail&quot;:[&quot;testuser1@opencdx.com&quot;],&quot;ccEmail&quot;:[],&quot;bccEmail&quot;:[],&quot;emailAttachments&quot;:[],&quot;toPhoneNumber&quot;:[&quot;123-456-7890&quot;],&quot;variables&quot;:{},&quot;recipientsId&quot;:[],&quot;patientId&quot; :  &quot;${patient_id_r}&quot; }</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/notification</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Communications Medium" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;subject&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_NEWSLETTER&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Email Template ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">emailTemplateId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.templateId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email/${emailTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [GET] (Cache)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email/${emailTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;templateId&quot;:&quot;${emailTemplateId}&quot;,&quot;subject&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_CONFIRMATION&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;lastname&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;message&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_REMINDER&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SMS Template ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">smsTemplateId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.templateId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [GET}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms/${smsTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [GET} (Cache)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms/${smsTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;templateId&quot;:&quot;${smsTemplateId}&quot;,&quot;message&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_CONFIRMATION&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;lastname&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eventName&quot;:&quot;&quot;,&quot;eventDescription&quot;:&quot;&quot;,&quot;emailTemplateId&quot;:&quot;${emailTemplateId}&quot;,&quot;smsTemplateId&quot;:&quot;${smsTemplateId}&quot;,&quot;eventParameters&quot;:[],&quot;priority&quot;:&quot;NOTIFICATION_PRIORITY_MEDIUM&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Event Id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">eventId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.eventId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event/${eventId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [GET] (Cache)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event/${eventId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [PUT]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eventId&quot;:&quot;${eventId}&quot;,&quot;eventName&quot;:&quot;&quot;,&quot;eventDescription&quot;:&quot;&quot;,&quot;emailTemplateId&quot;:&quot;${emailTemplateId}&quot;,&quot;smsTemplateId&quot;:&quot;${smsTemplateId}&quot;,&quot;eventParameters&quot;:[],&quot;priority&quot;:&quot;NOTIFICATION_PRIORITY_MEDIUM&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;lastname&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/notification [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eventId&quot;:&quot;${eventId}&quot;,&quot;customData&quot;:{},&quot;toEmail&quot;:[&quot;testuser1@opencdx.com&quot;],&quot;ccEmail&quot;:[],&quot;bccEmail&quot;:[],&quot;emailAttachments&quot;:[],&quot;toPhoneNumber&quot;:[&quot;123-456-7890&quot;],&quot;variables&quot;:{},&quot;recipientsId&quot;:[],&quot;patientId&quot; :  &quot;${patient_id_r}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/notification</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Communications Low" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;subject&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_NEWSLETTER&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Email Template ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">emailTemplateId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.templateId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email/${emailTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [GET] (Cache)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email/${emailTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;templateId&quot;:&quot;${emailTemplateId}&quot;,&quot;subject&quot;:&quot;&quot;,&quot;content&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_CONFIRMATION&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;lastname&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;message&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_REMINDER&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract SMS Template ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">smsTemplateId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.templateId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [GET}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms/${smsTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [GET} (Cache)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms/${smsTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;templateId&quot;:&quot;${smsTemplateId}&quot;,&quot;message&quot;:&quot;&quot;,&quot;variables&quot;:[],&quot;templateType&quot;:&quot;TEMPLATE_TYPE_CONFIRMATION&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;lastname&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eventName&quot;:&quot;&quot;,&quot;eventDescription&quot;:&quot;&quot;,&quot;emailTemplateId&quot;:&quot;${emailTemplateId}&quot;,&quot;smsTemplateId&quot;:&quot;${smsTemplateId}&quot;,&quot;eventParameters&quot;:[],&quot;priority&quot;:&quot;NOTIFICATION_PRIORITY_LOW&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Event Id" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">eventId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.eventId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event/${eventId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [GET] (Cache)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event/${eventId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [PUT]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eventId&quot;:&quot;${eventId}&quot;,&quot;eventName&quot;:&quot;&quot;,&quot;eventDescription&quot;:&quot;&quot;,&quot;emailTemplateId&quot;:&quot;${emailTemplateId}&quot;,&quot;smsTemplateId&quot;:&quot;${smsTemplateId}&quot;,&quot;eventParameters&quot;:[],&quot;priority&quot;:&quot;NOTIFICATION_PRIORITY_LOW&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event/list [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;lastname&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/notification [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;eventId&quot;:&quot;${eventId}&quot;,&quot;customData&quot;:{},&quot;toEmail&quot;:[&quot;testuser1@opencdx.com&quot;],&quot;ccEmail&quot;:[],&quot;bccEmail&quot;:[],&quot;emailAttachments&quot;:[],&quot;toPhoneNumber&quot;:[&quot;123-456-7890&quot;],&quot;variables&quot;:{},&quot;recipientsId&quot;:[],&quot;patientId&quot; :  &quot;${patient_id_r}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/notification</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/event [DELETE]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/event/${eventId}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/sms [DELETE}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/sms/${smsTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/communications/email [DELETE]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/email/${emailTemplateId}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Connected Lab" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/connected-lab [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;connectedLab&quot;:{&#xd;
		&quot;name&quot;:&quot;Default_Lab&quot;,&#xd;
		&quot;identifier&quot;:&quot;default&quot;,&#xd;
		&quot;organizationId&quot;:&quot;${organization_r}&quot;,&#xd;
		&quot;workspaceId&quot;:&quot;${workspace_r}&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/connected-lab</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Connected Lab ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">connected_lab_id_r</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.connectedLab.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/connected-lab [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;connectedLab&quot;:{&#xd;
		&quot;id&quot;:&quot;${connected_lab_id_r}&quot;,&#xd;
		&quot;name&quot;:&quot;Default Rest Lab&quot;,&#xd;
		&quot;identifier&quot;:&quot;default&quot;,&#xd;
		&quot;organizationId&quot;:&quot;${organization_r}&quot;,&#xd;
		&quot;workspaceId&quot;:&quot;${workspace_r}&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/connected-lab</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/connected-lab [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/connected-lab/${connected_lab_id_r}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Health - Connected Tests" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/health [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;basicInfo&quot;: {&#xd;
    &quot;patientId&quot;: &quot;${patient_id_r}&quot;,&#xd;
    &quot;vendorLabTestId&quot;: &quot;vendorLabTestId&quot;,&#xd;
    &quot;type&quot;: &quot;type&quot;,&#xd;
    &quot;nationalHealthId&quot;: 1,&#xd;
    &quot;healthServiceId&quot;: &quot;hea;thServiceId&quot;,&#xd;
    &quot;organizationId&quot;: &quot;${organization_r}&quot;,&#xd;
    &quot;workspaceId&quot;: &quot;${workspace_r}&quot;,&#xd;
    &quot;source&quot;: &quot;source&quot;&#xd;
  },&#xd;
  &quot;orderInfo&quot;: {&#xd;
    &quot;orderId&quot;: &quot;orderId&quot;,&#xd;
    &quot;status&quot;: &quot;statusId&quot;,&#xd;
    &quot;statusMessage&quot;: &quot;statusMessage&quot;,&#xd;
    &quot;statusMessageActions&quot;: [&#xd;
      {&#xd;
        &quot;id&quot;: &quot;id&quot;,&#xd;
        &quot;value&quot;: &quot;value&quot;,&#xd;
        &quot;description&quot;: &quot;description&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;encounterId&quot;: &quot;encounterId&quot;,&#xd;
    &quot;isSyncedWithEhr&quot;: true,&#xd;
    &quot;result&quot;: &quot;result&quot;,&#xd;
    &quot;questionnaireId&quot;: &quot;questionnaireId&quot;&#xd;
  },&#xd;
  &quot;testNotes&quot;: {&#xd;
    &quot;notes&quot;: &quot;notes&quot;,&#xd;
    &quot;medicationNotes&quot;: &quot;medicationNotes&quot;,&#xd;
    &quot;referralNotes&quot;: &quot;referralNotes&quot;,&#xd;
    &quot;diagnosticNotes&quot;: &quot;diagnosticNotes&quot;&#xd;
  },&#xd;
  &quot;paymentDetails&quot;: {&#xd;
    &quot;paymentMode&quot;: &quot;paymentMode&quot;,&#xd;
    &quot;insuranceInfoId&quot;: &quot;insuranceInfoId&quot;,&#xd;
    &quot;paymentTransactionId&quot;: &quot;paymentTransactionId&quot;,&#xd;
    &quot;paymentDetails&quot;: &quot;paymentDetails&quot;&#xd;
  },&#xd;
  &quot;providerInfo&quot;: {&#xd;
    &quot;orderingProviderId&quot;: &quot;orderingProviderId&quot;,&#xd;
    &quot;assignedProviderId&quot;: 1,&#xd;
    &quot;orderingProviderNpi&quot;: 1&#xd;
  },&#xd;
  &quot;testDetails&quot;: {&#xd;
    &quot;mediaId&quot;: &quot;${mediaId}&quot;,	&#xd;
    &quot;metadata&quot;: {&#xd;
      &quot;qrData&quot;: &quot;qrdata&quot;,&#xd;
      &quot;kitUploadId&quot;: &quot;kitUploadID&quot;,&#xd;
      &quot;responseMessage&quot;: &quot;responseMessage&quot;,&#xd;
      &quot;responseTitle&quot;: &quot;responseTitle&quot;,&#xd;
      &quot;responseCode&quot;: 200,&#xd;
      &quot;imageType&quot;: &quot;imageType&quot;,&#xd;
      &quot;type&quot;: &quot;type&quot;,&#xd;
      &quot;manufacturer&quot;: &quot;manufacturer&quot;,&#xd;
      &quot;cassetteLotNumber&quot;: &quot;cassetteLotNumber&quot;,&#xd;
      &quot;outcomeIgm&quot;: true,&#xd;
      &quot;outcomeIgg&quot;: true,&#xd;
      &quot;outcome&quot;: &quot;outcome&quot;,&#xd;
      &quot;selfAssessmentOutcomeIgm&quot;: true,&#xd;
      &quot;selfAssessmentOutcomeIgg&quot;: true,&#xd;
      &quot;selfAssessmentOutcome&quot;: &quot;selfAssessmentOutcome&quot;,&#xd;
      &quot;cassetteExpirationDate&quot;: &quot;expDate&quot;,&#xd;
      &quot;labTestOrderableId&quot;: &quot;labTestOrderableId&quot;,&#xd;
      &quot;skuId&quot;: &quot;skuID&quot;,&#xd;
      &quot;cassetteVerification&quot;: &quot;verification&quot;&#xd;
    },&#xd;
    &quot;requisitionBase64&quot;: &quot;requisitionBase64&quot;,&#xd;
    &quot;internalTestId&quot;: &quot;internalTestId&quot;,&#xd;
    &quot;medications&quot;: &quot;medications&quot;,&#xd;
    &quot;referrals&quot;: &quot;referrals&quot;,&#xd;
    &quot;diagnostics&quot;: &quot;diagnostics&quot;,&#xd;
    &quot;orderableTestIds&quot;: [&#xd;
      &quot;orderableTestIds&quot;&#xd;
    ],&#xd;
    &quot;orderableTests&quot;: [&#xd;
      {&#xd;
        &quot;orderableTestId&quot;: &quot;orderableTestId&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;orderableTestResults&quot;: [&#xd;
      {&#xd;
        &quot;orderableTestId&quot;: &quot;orderableTestId&quot;,&#xd;
        &quot;collectionDate&quot;: &quot;collectionDate&quot;,&#xd;
        &quot;testResult&quot;: &quot;testResult&quot;,&#xd;
        &quot;outcome&quot;: &quot;outcome&quot;,&#xd;
        &quot;responseMessage&quot;: &quot;responseMessage&quot;,&#xd;
        &quot;responseTitle&quot;: &quot;responseTitle&quot;,&#xd;
        &quot;responseCode&quot;: 200&#xd;
      }&#xd;
    ],&#xd;
    &quot;testClassification&quot;: &quot;TEST_CLASSIFICATION_GENERAL&quot;,&#xd;
    &quot;isOnsiteTest&quot;: true,&#xd;
    &quot;specimenId&quot;: &quot;specimenId&quot;,&#xd;
    &quot;labVendorConfirmationId&quot;: &quot;labVendorConfirmationId&quot;,&#xd;
    &quot;deviceIdentifier&quot;: &quot;${deviceId}&quot;,&#xd;
    &quot;deviceSerialNumber&quot;: &quot;deviceSerialNumber&quot;,&#xd;
    &quot;isAutoGenerated&quot;: true,&#xd;
    &quot;reportingFlag&quot;: &quot;reportingFlag&quot;,&#xd;
    &quot;notificationFlag&quot;: &quot;notificationFlag&quot;,&#xd;
    &quot;orderStatusFlag&quot;: &quot;orderStatusFlag&quot;,&#xd;
    &quot;orderReceiptPath&quot;: &quot;orderReceiptPath&quot;,&#xd;
    &quot;labTestType&quot;: &quot;labTestType&quot;,&#xd;
    &quot;specimenType&quot;: &quot;specimanType&quot;,&#xd;
    &quot;medicalCode&quot;: &quot;medicalCode&quot;,&#xd;
    &quot;testName&quot;: &quot;Connected Test C&quot;,&#xd;
    &quot;testFormat&quot;: &quot;TEST_FORMAT_UNSPECIFIED&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/health</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Email Template ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">connectedTestId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.submissionId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/health [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/health/${connectedTestId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/health/list [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:1,&#xd;
		&quot;pageSize&quot;:10,&#xd;
		&quot;sortAscending&quot;:true,&#xd;
		&quot;sort&quot;:&quot;lastname&quot;&#xd;
	},&#xd;
	&quot;patientId&quot;:&quot;${patient_id_r}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/health/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/connected-lab/lab [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;basicinfo&quot; : {&#xd;
    &quot;id&quot;:&quot;${connectedTestId}&quot;,&#xd;
    &quot;vendorLabTestId&quot; : &quot;50fa1fc7-9ca0-4339-bf34-1288a0d582cb&quot;,&#xd;
    &quot;type&quot; : &quot;lab&quot;,&#xd;
    &quot;patientId&quot; : &quot;${patient_id_r}&quot;,&#xd;
    &quot;nationalHealthId&quot; : &quot;2b04895a-66f1-4e13-a013-d404d6691533&quot;,&#xd;
    &quot;healthServiceId&quot; : &quot;6f187ba8-3170-49de-91c0-68b952c98ab6&quot;,&#xd;
    &quot;organizationId&quot; : &quot;${organization_r}&quot;,&#xd;
    &quot;workspaceId&quot; : &quot;${workspace_r}&quot;,&#xd;
    &quot;source&quot; : &quot;lab&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/connected-lab/lab</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Health Loops" enabled="true">
          <stringProp name="LoopController.loops">${__P(testCount,10)}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/health [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;basicInfo&quot;: {&#xd;
    &quot;patientId&quot;: &quot;${patient_id_r}&quot;,&#xd;
    &quot;vendorLabTestId&quot;: &quot;vendorLabTestId&quot;,&#xd;
    &quot;type&quot;: &quot;type&quot;,&#xd;
    &quot;nationalHealthId&quot;: 1,&#xd;
    &quot;healthServiceId&quot;: &quot;hea;thServiceId&quot;,&#xd;
    &quot;organizationId&quot;: &quot;${organization_r}&quot;,&#xd;
    &quot;workspaceId&quot;: &quot;${workspace_r}&quot;,&#xd;
    &quot;source&quot;: &quot;source&quot;&#xd;
  },&#xd;
  &quot;orderInfo&quot;: {&#xd;
    &quot;orderId&quot;: &quot;orderId&quot;,&#xd;
    &quot;status&quot;: &quot;statusId&quot;,&#xd;
    &quot;statusMessage&quot;: &quot;statusMessage&quot;,&#xd;
    &quot;statusMessageActions&quot;: [&#xd;
      {&#xd;
        &quot;id&quot;: &quot;id&quot;,&#xd;
        &quot;value&quot;: &quot;value&quot;,&#xd;
        &quot;description&quot;: &quot;description&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;encounterId&quot;: &quot;encounterId&quot;,&#xd;
    &quot;isSyncedWithEhr&quot;: true,&#xd;
    &quot;result&quot;: &quot;result&quot;,&#xd;
    &quot;questionnaireId&quot;: &quot;questionnaireId&quot;&#xd;
  },&#xd;
  &quot;testNotes&quot;: {&#xd;
    &quot;notes&quot;: &quot;notes&quot;,&#xd;
    &quot;medicationNotes&quot;: &quot;medicationNotes&quot;,&#xd;
    &quot;referralNotes&quot;: &quot;referralNotes&quot;,&#xd;
    &quot;diagnosticNotes&quot;: &quot;diagnosticNotes&quot;&#xd;
  },&#xd;
  &quot;paymentDetails&quot;: {&#xd;
    &quot;paymentMode&quot;: &quot;paymentMode&quot;,&#xd;
    &quot;insuranceInfoId&quot;: &quot;insuranceInfoId&quot;,&#xd;
    &quot;paymentTransactionId&quot;: &quot;paymentTransactionId&quot;,&#xd;
    &quot;paymentDetails&quot;: &quot;paymentDetails&quot;&#xd;
  },&#xd;
  &quot;providerInfo&quot;: {&#xd;
    &quot;orderingProviderId&quot;: &quot;orderingProviderId&quot;,&#xd;
    &quot;assignedProviderId&quot;: 1,&#xd;
    &quot;orderingProviderNpi&quot;: 1&#xd;
  },&#xd;
  &quot;testDetails&quot;: {&#xd;
    &quot;mediaId&quot;: &quot;${mediaId}&quot;,	&#xd;
    &quot;metadata&quot;: {&#xd;
      &quot;qrData&quot;: &quot;qrdata&quot;,&#xd;
      &quot;kitUploadId&quot;: &quot;kitUploadID&quot;,&#xd;
      &quot;responseMessage&quot;: &quot;responseMessage&quot;,&#xd;
      &quot;responseTitle&quot;: &quot;responseTitle&quot;,&#xd;
      &quot;responseCode&quot;: 200,&#xd;
      &quot;imageType&quot;: &quot;imageType&quot;,&#xd;
      &quot;type&quot;: &quot;type&quot;,&#xd;
      &quot;manufacturer&quot;: &quot;manufacturer&quot;,&#xd;
      &quot;cassetteLotNumber&quot;: &quot;cassetteLotNumber&quot;,&#xd;
      &quot;outcomeIgm&quot;: true,&#xd;
      &quot;outcomeIgg&quot;: true,&#xd;
      &quot;outcome&quot;: &quot;outcome&quot;,&#xd;
      &quot;selfAssessmentOutcomeIgm&quot;: true,&#xd;
      &quot;selfAssessmentOutcomeIgg&quot;: true,&#xd;
      &quot;selfAssessmentOutcome&quot;: &quot;selfAssessmentOutcome&quot;,&#xd;
      &quot;cassetteExpirationDate&quot;: &quot;expDate&quot;,&#xd;
      &quot;labTestOrderableId&quot;: &quot;labTestOrderableId&quot;,&#xd;
      &quot;skuId&quot;: &quot;skuID&quot;,&#xd;
      &quot;cassetteVerification&quot;: &quot;verification&quot;&#xd;
    },&#xd;
    &quot;requisitionBase64&quot;: &quot;requisitionBase64&quot;,&#xd;
    &quot;internalTestId&quot;: &quot;internalTestId&quot;,&#xd;
    &quot;medications&quot;: &quot;medications&quot;,&#xd;
    &quot;referrals&quot;: &quot;referrals&quot;,&#xd;
    &quot;diagnostics&quot;: &quot;diagnostics&quot;,&#xd;
    &quot;orderableTestIds&quot;: [&#xd;
      &quot;orderableTestIds&quot;&#xd;
    ],&#xd;
    &quot;orderableTests&quot;: [&#xd;
      {&#xd;
        &quot;orderableTestId&quot;: &quot;orderableTestId&quot;&#xd;
      }&#xd;
    ],&#xd;
    &quot;orderableTestResults&quot;: [&#xd;
      {&#xd;
        &quot;orderableTestId&quot;: &quot;orderableTestId&quot;,&#xd;
        &quot;collectionDate&quot;: &quot;collectionDate&quot;,&#xd;
        &quot;testResult&quot;: &quot;testResult&quot;,&#xd;
        &quot;outcome&quot;: &quot;outcome&quot;,&#xd;
        &quot;responseMessage&quot;: &quot;responseMessage&quot;,&#xd;
        &quot;responseTitle&quot;: &quot;responseTitle&quot;,&#xd;
        &quot;responseCode&quot;: 200&#xd;
      }&#xd;
    ],&#xd;
    &quot;testClassification&quot;: &quot;TEST_CLASSIFICATION_GENERAL&quot;,&#xd;
    &quot;isOnsiteTest&quot;: true,&#xd;
    &quot;specimenId&quot;: &quot;specimenId&quot;,&#xd;
    &quot;labVendorConfirmationId&quot;: &quot;labVendorConfirmationId&quot;,&#xd;
    &quot;deviceIdentifier&quot;: &quot;${deviceId}&quot;,&#xd;
    &quot;deviceSerialNumber&quot;: &quot;deviceSerialNumber&quot;,&#xd;
    &quot;isAutoGenerated&quot;: true,&#xd;
    &quot;reportingFlag&quot;: &quot;reportingFlag&quot;,&#xd;
    &quot;notificationFlag&quot;: &quot;notificationFlag&quot;,&#xd;
    &quot;orderStatusFlag&quot;: &quot;orderStatusFlag&quot;,&#xd;
    &quot;orderReceiptPath&quot;: &quot;orderReceiptPath&quot;,&#xd;
    &quot;labTestType&quot;: &quot;labTestType&quot;,&#xd;
    &quot;specimenType&quot;: &quot;specimanType&quot;,&#xd;
    &quot;medicalCode&quot;: &quot;medicalCode&quot;,&#xd;
    &quot;testName&quot;: &quot;Connected Test D&quot;,&#xd;
    &quot;testFormat&quot;: &quot;TEST_FORMAT_UNSPECIFIED&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/health</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Email Template ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">connectedTestId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.submissionId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ANF" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/anf [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;time&quot; : {&#xd;
    &quot;upperBound&quot; : &quot;100&quot;,&#xd;
    &quot;lowerBound&quot; : &quot;0.0&quot;,&#xd;
    &quot;includeUpperBound&quot; : true,&#xd;
    &quot;includeLowerBound&quot; : true,&#xd;
    &quot;semantic&quot; : &quot;expression&quot;,&#xd;
    &quot;resolution&quot; : &quot;1.0&quot;&#xd;
  },&#xd;
  &quot;subjectOfRecord&quot; : {&#xd;
    &quot;id&quot; : &quot;${patient_id_r}&quot;&#xd;
  },&#xd;
  &quot;subjectOfInformation&quot; : &quot;expression&quot;,&#xd;
  &quot;associatedStatement&quot; : [ {&#xd;
    &quot;semantic&quot; : &quot;Associated description&quot;&#xd;
  } ],&#xd;
  &quot;topic&quot; : &quot;Topic&quot;,&#xd;
  &quot;type&quot; : &quot;Type&quot;,&#xd;
  &quot;circumstanceChoice&quot; : {&#xd;
    &quot;circumstanceType&quot; : &quot;NARRATIVE_CIRCUMSTANCE&quot;,&#xd;
    &quot;status&quot; : &quot;&quot;,&#xd;
    &quot;healthRisk&quot; : &quot;&quot;&#xd;
  },&#xd;
  &quot;status&quot; : &quot;STATUS_UNSPECIFIED&quot;&#xd;
}&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/anf</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract ANF ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">anf_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/anf [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/anf/${anf_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/anf [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;id&quot; : {&#xd;
    &quot;id&quot; : &quot;${anf_id}&quot;&#xd;
  },&#xd;
  &quot;time&quot; : {&#xd;
    &quot;upperBound&quot; : &quot;100&quot;,&#xd;
    &quot;lowerBound&quot; : &quot;0.0&quot;,&#xd;
    &quot;includeUpperBound&quot; : true,&#xd;
    &quot;includeLowerBound&quot; : true,&#xd;
    &quot;semantic&quot; : &quot;expression&quot;,&#xd;
    &quot;resolution&quot; : &quot;1.0&quot;&#xd;
  },&#xd;
  &quot;subjectOfRecord&quot; : {&#xd;
    &quot;id&quot; : &quot;${patient_id_r}&quot;&#xd;
  },&#xd;
  &quot;subjectOfInformation&quot; : &quot;expression&quot;,&#xd;
  &quot;associatedStatement&quot; : [ {&#xd;
    &quot;semantic&quot; : &quot;Associated description&quot;&#xd;
  } ],&#xd;
  &quot;topic&quot; : &quot;Topic&quot;,&#xd;
  &quot;type&quot; : &quot;Type&quot;,&#xd;
  &quot;circumstanceChoice&quot; : {&#xd;
    &quot;circumstanceType&quot; : &quot;NARRATIVE_CIRCUMSTANCE&quot;,&#xd;
    &quot;status&quot; : &quot;&quot;,&#xd;
    &quot;healthRisk&quot; : &quot;&quot;&#xd;
  },&#xd;
  &quot;status&quot; : &quot;STATUS_UNSPECIFIED&quot;&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/anf</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/anf [DELETE]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/anf/${anf_id}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Routine" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/routine [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;routine&quot; : {&#xd;
    &quot;name&quot; : &quot;Test Routine&quot;,&#xd;
    &quot;description&quot; : &quot;Test Routine Description&quot;,&#xd;
    &quot;status&quot; : &quot;COMPLETED&quot;,&#xd;
    &quot;creationDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;lastUpdatedDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;assignedUser&quot; : &quot;6581e5157e001111d3736b48&quot;,&#xd;
    &quot;associatedProtocols&quot; : [ &quot;6581e5157e001111d3736b49&quot; ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/routine</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/routine/clinicalProtocolExecution [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;clinicalProtocolExecution&quot; : {&#xd;
    &quot;executionId&quot; : &quot;6581e5157e001111d3736b4a&quot;,&#xd;
    &quot;routineId&quot; : &quot;6581e5157e001111d3736b4b&quot;,&#xd;
    &quot;protocolId&quot; : &quot;6581e5157e001111d3736b4c&quot;,&#xd;
    &quot;status&quot; : &quot;COMPLETED&quot;,&#xd;
    &quot;startDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;endDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;results&quot; : &quot;ClinicalProtocolExecution Results&quot;,&#xd;
    &quot;assignedMedicalStaff&quot; : &quot;6581e5157e001111d3736b4d&quot;,&#xd;
    &quot;steps&quot; : [ &quot;Step 1&quot;, &quot;Step 2&quot;, &quot;Step 3&quot; ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/routine/clinicalProtocolExecution</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/routine/labOrder [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;labOrder&quot; : {&#xd;
    &quot;labOrderId&quot; : &quot;6581e5157e001111d3736b53&quot;,&#xd;
    &quot;testName&quot; : &quot;Test Name&quot;,&#xd;
    &quot;orderDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;matchedValueSet&quot; : &quot;Matched Value Set&quot;,&#xd;
    &quot;relatedEntities&quot; : [ &quot;${deviceId}&quot;, &quot;${testcaseId}&quot; ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/routine/labOrder</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/routine/diagnosis [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;diagnosis&quot; : {&#xd;
    &quot;diagnosisId&quot; : &quot;6581e5157e001111d3736b44&quot;,&#xd;
    &quot;diagnosisCode&quot; : &quot;Diagnosis Code&quot;,&#xd;
    &quot;diagnosisDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;matchedValueSet&quot; : &quot;Matched Value Set&quot;,&#xd;
    &quot;relatedEntities&quot; : [ &quot;${deviceId}&quot;, &quot;${testcaseId}&quot; ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/routine/diagnosis</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/routine/suspectedDiagnosis [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;suspectedDiagnosis&quot; : {&#xd;
    &quot;suspectedDiagnosisId&quot; : &quot;6581e5157e001111d3736b56&quot;,&#xd;
    &quot;diagnosisCode&quot; : &quot;Diagnosis Code&quot;,&#xd;
    &quot;diagnosisDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;matchedValueSet&quot; : &quot;Matched Value Set&quot;,&#xd;
    &quot;relatedEntities&quot; : [ &quot;${deviceId}&quot;, &quot;${testcaseId}&quot; ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/routine/suspectedDiagnosis</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/routine/labResult [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;labResult&quot; : {&#xd;
    &quot;resultId&quot; : &quot;6581e5147e001111d3736b3e&quot;,&#xd;
    &quot;resultValue&quot; : &quot;Result Value&quot;,&#xd;
    &quot;resultDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;matchedValueSet&quot; : &quot;Matched Value Set&quot;,&#xd;
    &quot;relatedEntities&quot; : [ &quot;${deviceId}&quot;, &quot;${testcaseId}&quot; ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/routine/labResult</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/routine/medication [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;medication&quot; : {&#xd;
    &quot;medicationId&quot; : &quot;6581e5147e001111d3736b41&quot;,&#xd;
    &quot;medicationName&quot; : &quot;Medication name&quot;,&#xd;
    &quot;administrationDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;matchedValueSet&quot; : &quot;Matched Value Set&quot;,&#xd;
    &quot;relatedEntities&quot; : [ &quot;${deviceId}&quot;, &quot;${testcaseId}&quot; ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/routine/medication</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Predictor" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/predictor [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;predictorInput&quot; : {&#xd;
    &quot;encounterId&quot; : &quot;6581edfb798629124c427e75&quot;,&#xd;
    &quot;testId&quot; : &quot;${connectedTestId}&quot;,&#xd;
    &quot;testFeatures&quot; : [ &quot;Feature 1&quot;, &quot;Feature 2&quot;, &quot;Feature 3&quot; ]&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/predictor</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract ANF ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">anf_id</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Protector" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/protector/detectAnomalies [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;anomalyDetectionData&quot; : {&#xd;
    &quot;encounterId&quot; : &quot;6582f9d06f3402218745d81b&quot;,&#xd;
    &quot;userId&quot; : &quot;${user_id_r}&quot;,&#xd;
    &quot;dataAccessPattern&quot; : &quot;dataAccessPattern&quot;,&#xd;
    &quot;timeStamp&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;anomaliesDetected&quot; : [ &quot;anomaly1&quot;, &quot;anomaly2&quot; ],&#xd;
    &quot;sourceIp&quot; : &quot;sourceIp&quot;,&#xd;
    &quot;location&quot; : &quot;location&quot;,&#xd;
    &quot;affectedSystems&quot; : [ &quot;affectedSystem1&quot;, &quot;affectedSystem2&quot; ],&#xd;
    &quot;severityLevel&quot; : &quot;severityLevel&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/protector/detectAnomalies</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/protector/authorize [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;authorizationControlData&quot; : {&#xd;
    &quot;encounterId&quot; : &quot;6582f9d06f3402218745d815&quot;,&#xd;
    &quot;userId&quot; : &quot;${user_id_r}&quot;,&#xd;
    &quot;dataAccessLevel&quot; : &quot;dataAccessLevel&quot;,&#xd;
    &quot;accessGrantedBy&quot; : &quot;6582f9d06f3402218745d817&quot;,&#xd;
    &quot;accessScopes&quot; : [ &quot;accessScope1&quot;, &quot;accessScope2&quot; ],&#xd;
    &quot;accessValidityPeriod&quot; : &quot;accessValidityPeriod&quot;,&#xd;
    &quot;isTemporaryAccess&quot; : true,&#xd;
    &quot;conditionalAccessParams&quot; : [ &quot;conditionalAccessParam1&quot;, &quot;conditionalAccessParam2&quot; ]&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/protector/authorize</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/protector/protectPrivacy [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;privacyProtectionData&quot; : {&#xd;
    &quot;encounterId&quot; : &quot;6582f9d06f3402218745d818&quot;,&#xd;
    &quot;dataType&quot; : &quot;dataType&quot;,&#xd;
    &quot;anonymizedData&quot; : &quot;anonymizedData&quot;,&#xd;
    &quot;isDataEncrypted&quot; : true,&#xd;
    &quot;encryptionMethod&quot; : &quot;encryptionMethod&quot;,&#xd;
    &quot;dataRetentionPolicy&quot; : &quot;dataRetentionPolicy&quot;,&#xd;
    &quot;hasDataSharingAgreement&quot; : true,&#xd;
    &quot;dataPurpose&quot; : &quot;dataPurpose&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/protector/protectPrivacy</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/protector/monitorRealTime [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;realTimeMonitoringData&quot; : {&#xd;
    &quot;encounterId&quot; : &quot;6582f9d06f3402218745d813&quot;,&#xd;
    &quot;monitoredEntity&quot; : &quot;${user_id_r}&quot;,&#xd;
    &quot;monitoringDetails&quot; : &quot;monitoringDetails&quot;,&#xd;
    &quot;monitoringStartTime&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;monitoringEndTime&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;triggeredAlerts&quot; : [ &quot;triggeredAlert1&quot;, &quot;triggeredAlert2&quot; ],&#xd;
    &quot;monitoringFrequency&quot; : &quot;monitoringFrequency&quot;,&#xd;
    &quot;isContinuousMonitoring&quot; : true,&#xd;
    &quot;responsibleMonitoringTeam&quot; : &quot;responsibleMonitoringTeam&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/protector/monitorRealTime</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/protector/analyzeUserBehavior [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;userBehaviorAnalysisData&quot; : {&#xd;
    &quot;encounterId&quot; : &quot;6582f9d06f3402218745d819&quot;,&#xd;
    &quot;userId&quot; : &quot;${user_id_r}&quot;,&#xd;
    &quot;behaviorPattern&quot; : &quot;behaviorPattern&quot;,&#xd;
    &quot;associatedActivities&quot; : [ &quot;associatedActivity1&quot;, &quot;associatedActivity2&quot; ],&#xd;
    &quot;analysisTimeFrame&quot; : &quot;analysisTimeFrame&quot;,&#xd;
    &quot;historicalBehaviorData&quot; : [ &quot;historicalBehaviorData1&quot;, &quot;historicalBehaviorData2&quot; ],&#xd;
    &quot;riskAssessment&quot; : &quot;riskAssessment&quot;,&#xd;
    &quot;isBehaviorOutlier&quot; : true,&#xd;
    &quot;behaviorConsequence&quot; : &quot;behaviorConsequence&quot;&#xd;
  }&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/protector/analyzeUserBehavior</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Questionnaire" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ruleset [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;ruleSet&quot; : {&#xd;
    &quot;type&quot; : &quot;User Rule&quot;,&#xd;
    &quot;category&quot; : &quot;Process user response&quot;,&#xd;
    &quot;description&quot; : &quot;Categorize blood pressure&quot;,&#xd;
    &quot;rule&quot;: &quot;package cdx.opencdx.evrete.rules;\n\nimport org.evrete.dsl.annotation.Fact;\nimport org.evrete.dsl.annotation.Rule;\nimport org.evrete.dsl.annotation.Where;\n\nimport cdx.opencdx.evrete.domain.BloodPressure;\n\npublic class BloodPressureRules {\n\n    @Rule\n    @Where(\&quot;$s \u003c 120\&quot;)\n    public void normalBloodPressure(@Fact(\&quot;$s\&quot;) int systolic, BloodPressure bp) {\n        bp.setStatus(\&quot;Normal\&quot;);\n    }\n\n    @Rule\n    @Where(\&quot;$s \u003e\u003d 120 \u0026\u0026 $s \u003c\u003d 129\&quot;)\n    public void elevatedBloodPressure(@Fact(\&quot;$s\&quot;) int systolic, BloodPressure bp) {\n        bp.setStatus(\&quot;Elevated\&quot;);\n    }\n\n    @Rule\n    @Where(\&quot;$s \u003e 129\&quot;)\n    public void highBloodPressure(@Fact(\&quot;$s\&quot;) int systolic, BloodPressure bp) {\n        bp.setStatus(\&quot;High\&quot;);\n    }\n\n}\n&quot;,&#xd;
    &quot;status&quot;: &quot;draft&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/questionnaire/ruleset</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract RuleSet ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">rulesetId_r</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.ruleSet.ruleId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ruleset [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;ruleSet&quot; : {&#xd;
    &quot;ruleId&quot; : &quot;${rulesetId_r}&quot;,&#xd;
    &quot;type&quot; : &quot;User Rule&quot;,&#xd;
    &quot;category&quot; : &quot;Process user response&quot;,&#xd;
    &quot;description&quot; : &quot;Categorize blood pressure&quot;,&#xd;
    &quot;rule&quot;: &quot;package cdx.opencdx.evrete.rules;\n\nimport org.evrete.dsl.annotation.Fact;\nimport org.evrete.dsl.annotation.Rule;\nimport org.evrete.dsl.annotation.Where;\n\nimport cdx.opencdx.evrete.domain.BloodPressure;\n\npublic class BloodPressureRules {\n\n    @Rule\n    @Where(\&quot;$s \u003c 120\&quot;)\n    public void normalBloodPressure(@Fact(\&quot;$s\&quot;) int systolic, BloodPressure bp) {\n        bp.setStatus(\&quot;Normal\&quot;);\n    }\n\n    @Rule\n    @Where(\&quot;$s \u003e\u003d 120 \u0026\u0026 $s \u003c\u003d 129\&quot;)\n    public void elevatedBloodPressure(@Fact(\&quot;$s\&quot;) int systolic, BloodPressure bp) {\n        bp.setStatus(\&quot;Elevated\&quot;);\n    }\n\n    @Rule\n    @Where(\&quot;$s \u003e 129\&quot;)\n    public void highBloodPressure(@Fact(\&quot;$s\&quot;) int systolic, BloodPressure bp) {\n        bp.setStatus(\&quot;High\&quot;);\n    }\n\n}\n&quot;,&#xd;
    &quot;status&quot;: &quot;draft&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/questionnaire/ruleset</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ruleset [GET]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/questionnaire/ruleset/${rulesetId_r}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ruleset/list[GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/questionnaire/ruleset/list</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/questionnaire [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;questionnaire&quot;: {&#xd;
        &quot;resourceType&quot;: &quot;Questionnaire&quot;,&#xd;
        &quot;title&quot;: &quot;BP-POC&quot;,&#xd;
        &quot;status&quot;: &quot;draft&quot;,&#xd;
        &quot;item&quot;: [&#xd;
            {&#xd;
                &quot;type&quot;: &quot;integer&quot;,&#xd;
                &quot;extension&quot;: [&#xd;
                    {&#xd;
                        &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-unit&quot;,&#xd;
                        &quot;valueCoding&quot;: {&#xd;
                            &quot;code&quot;: &quot;millimeter of mercury&quot;,&#xd;
                            &quot;display&quot;: &quot;millimeter of mercury&quot;&#xd;
                        }&#xd;
                    }&#xd;
                ],&#xd;
                &quot;linkId&quot;: &quot;3079919224534&quot;,&#xd;
                &quot;text&quot;: &quot;Upper Range (SYSTOLIC)&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;text&quot;: &quot;ANF Main Statement&quot;,&#xd;
                        &quot;type&quot;: &quot;display&quot;,&#xd;
                        &quot;linkId&quot;: &quot;3079919224534_helpText&quot;,&#xd;
                        &quot;extension&quot;: [&#xd;
                            {&#xd;
                                &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl&quot;,&#xd;
                                &quot;valueCodeableConcept&quot;: {&#xd;
                                    &quot;text&quot;: &quot;Help-Button&quot;,&#xd;
                                    &quot;coding&quot;: [&#xd;
                                        {&#xd;
                                            &quot;code&quot;: &quot;help&quot;,&#xd;
                                            &quot;display&quot;: &quot;Help-Button&quot;,&#xd;
                                            &quot;system&quot;: &quot;http://hl7.org/fhir/questionnaire-item-control&quot;&#xd;
                                        }&#xd;
                                    ]&#xd;
                                }&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;${{system.util.epoc(\\&quot;${{application.statement.documented.start.time}}\&quot;)}}&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;Seconds | ${{upperbound - lowerbound}}&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;1 second&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;${{system.util.epoc(\\&quot;${{application.statement.documented.end.time}}\&quot;)}}&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    },&#xd;
                                    &quot;subjectOfRecord&quot;: {&#xd;
                                        &quot;id&quot;: &quot;&quot;,&#xd;
                                        &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                        &quot;code&quot;: &quot;&quot;&#xd;
                                    },&#xd;
                                    &quot;authors&quot;: [&#xd;
                                        {&#xd;
                                            &quot;id&quot;: &quot;&quot;,&#xd;
                                            &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                            &quot;code&quot;: &quot;&quot;&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;id&quot;: &quot;&quot;,&#xd;
                                            &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                            &quot;code&quot;: &quot;&quot;&#xd;
                                        }&#xd;
                                    ],&#xd;
                                    &quot;subjectOfInformation&quot;: &quot;${{participant.id}}&quot;,&#xd;
                                    &quot;topic&quot;: &quot;OBSERVATION_PROCEDURE&quot;,&#xd;
                                    &quot;type&quot;: &quot;PERFORMANCE&quot;,&#xd;
                                    &quot;circumstanceChoice&quot;: {&#xd;
                                        &quot;status&quot;: &quot;{\&quot;expressionType\&quot;:\&quot;simple\&quot;,\&quot;expressionLanguage\&quot;:\&quot;local\&quot;,\&quot;expressionValue\&quot;:\&quot;performed\&quot;,\&quot;expressionDescription\&quot;:\&quot;Measurement action has been performed.\&quot;}&quot;,&#xd;
                                        &quot;healthRisk&quot;: &quot; ${{rules.engine.calculated[circumstanceChoice.result]}}&quot;,&#xd;
                                        &quot;circumstanceType&quot;: &quot;PERFORMANCE_CIRCUMSTANCE&quot;,&#xd;
                                        &quot;result&quot;: {&#xd;
                                            &quot;lowerBound&quot;: &quot;90&quot;,&#xd;
                                            &quot;includeLowerBound&quot;: false,&#xd;
                                            &quot;semantic&quot;: &quot;&quot;,&#xd;
                                            &quot;resolution&quot;: &quot;{{REPLACE_3079919224534}}&quot;,&#xd;
                                            &quot;upperBound&quot;: &quot;120&quot;,&#xd;
                                            &quot;includeUpperBound&quot;: false&#xd;
                                        },&#xd;
                                        &quot;normalRange&quot;: {&#xd;
                                            &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                            &quot;includeLowerBound&quot;: false,&#xd;
                                            &quot;semantic&quot;: &quot;&quot;,&#xd;
                                            &quot;resolution&quot;: &quot;&quot;,&#xd;
                                            &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                            &quot;includeUpperBound&quot;: false&#xd;
                                        },&#xd;
                                        &quot;circumstance&quot;: {&#xd;
                                            &quot;id&quot;: &quot;&quot;,&#xd;
                                            &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                            &quot;code&quot;: &quot;&quot;&#xd;
                                        },&#xd;
                                        &quot;timing&quot;: {&#xd;
                                            &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                            &quot;includeLowerBound&quot;: false,&#xd;
                                            &quot;semantic&quot;: &quot;&quot;,&#xd;
                                            &quot;resolution&quot;: &quot;&quot;,&#xd;
                                            &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                            &quot;includeUpperBound&quot;: false&#xd;
                                        },&#xd;
                                        &quot;participant&quot;: {&#xd;
                                            &quot;id&quot;: &quot;&quot;,&#xd;
                                            &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                            &quot;code&quot;: &quot;&quot;&#xd;
                                        }&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfStatementType&quot;: &quot;ANF_STATEMENT_TYPE_MAIN&quot;,&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;type&quot;: &quot;boolean&quot;,&#xd;
                &quot;linkId&quot;: &quot;7048556169730&quot;,&#xd;
                &quot;text&quot;: &quot;Measurement taken using cuff&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;initial&quot;: [&#xd;
                    {&#xd;
                        &quot;valueBoolean&quot;: true&#xd;
                    }&#xd;
                ],&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;type&quot;: &quot;choice&quot;,&#xd;
                &quot;extension&quot;: [&#xd;
                    {&#xd;
                        &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl&quot;,&#xd;
                        &quot;valueCodeableConcept&quot;: {&#xd;
                            &quot;coding&quot;: [&#xd;
                                {&#xd;
                                    &quot;system&quot;: &quot;http://hl7.org/fhir/questionnaire-item-control&quot;,&#xd;
                                    &quot;code&quot;: &quot;drop-down&quot;,&#xd;
                                    &quot;display&quot;: &quot;Drop down&quot;&#xd;
                                }&#xd;
                            ]&#xd;
                        }&#xd;
                    }&#xd;
                ],&#xd;
                &quot;linkId&quot;: &quot;8501933950742&quot;,&#xd;
                &quot;text&quot;: &quot;Cuff Size&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;answerOption&quot;: [&#xd;
                    {&#xd;
                        &quot;valueCoding&quot;: {&#xd;
                            &quot;display&quot;: &quot;Adult&quot;&#xd;
                        },&#xd;
                        &quot;initialSelected&quot;: true&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;valueCoding&quot;: {&#xd;
                            &quot;display&quot;: &quot;Pediatric&quot;&#xd;
                        }&#xd;
                    }&#xd;
                ],&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;type&quot;: &quot;choice&quot;,&#xd;
                &quot;extension&quot;: [&#xd;
                    {&#xd;
                        &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl&quot;,&#xd;
                        &quot;valueCodeableConcept&quot;: {&#xd;
                            &quot;coding&quot;: [&#xd;
                                {&#xd;
                                    &quot;system&quot;: &quot;http://hl7.org/fhir/questionnaire-item-control&quot;,&#xd;
                                    &quot;code&quot;: &quot;drop-down&quot;,&#xd;
                                    &quot;display&quot;: &quot;Drop down&quot;&#xd;
                                }&#xd;
                            ]&#xd;
                        }&#xd;
                    }&#xd;
                ],&#xd;
                &quot;linkId&quot;: &quot;1451784149570&quot;,&#xd;
                &quot;text&quot;: &quot;Arm Used&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;answerOption&quot;: [&#xd;
                    {&#xd;
                        &quot;valueCoding&quot;: {&#xd;
                            &quot;display&quot;: &quot;Right&quot;&#xd;
                        },&#xd;
                        &quot;initialSelected&quot;: true&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;valueCoding&quot;: {&#xd;
                            &quot;display&quot;: &quot;Left&quot;&#xd;
                        }&#xd;
                    }&#xd;
                ],&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;type&quot;: &quot;boolean&quot;,&#xd;
                &quot;linkId&quot;: &quot;4051866307723&quot;,&#xd;
                &quot;text&quot;: &quot;Please confirm you have not urinated more than 30 minutes prior to taking the measurement.&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;initial&quot;: [&#xd;
                    {&#xd;
                        &quot;valueBoolean&quot;: true&#xd;
                    }&#xd;
                ],&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;type&quot;: &quot;boolean&quot;,&#xd;
                &quot;linkId&quot;: &quot;2602220218173&quot;,&#xd;
                &quot;text&quot;: &quot;Please confirm you have been in sitting position before taking the measurement for at least 5 minutes.&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;initial&quot;: [&#xd;
                    {&#xd;
                        &quot;valueBoolean&quot;: true&#xd;
                    }&#xd;
                ],&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            }&#xd;
        ],&#xd;
        &quot;ruleId&quot;: &quot;${rulesetId_r}&quot;,&#xd;
        &quot;ruleQuestionId&quot;: [&#xd;
            &quot;3079919224534&quot;&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/questionnaire/questionnaire</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Questionnaire ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">questionnaireId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/questionnaire [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;questionnaire&quot;: {&#xd;
    	   &quot;id&quot;:&quot;${questionnaireId}&quot;,	&#xd;
        &quot;resourceType&quot;: &quot;Questionnaire&quot;,&#xd;
        &quot;title&quot;: &quot;BP-POC&quot;,&#xd;
        &quot;status&quot;: &quot;draft&quot;,&#xd;
        &quot;item&quot;: [&#xd;
            {&#xd;
                &quot;type&quot;: &quot;integer&quot;,&#xd;
                &quot;extension&quot;: [&#xd;
                    {&#xd;
                        &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-unit&quot;,&#xd;
                        &quot;valueCoding&quot;: {&#xd;
                            &quot;code&quot;: &quot;millimeter of mercury&quot;,&#xd;
                            &quot;display&quot;: &quot;millimeter of mercury&quot;&#xd;
                        }&#xd;
                    }&#xd;
                ],&#xd;
                &quot;linkId&quot;: &quot;3079919224534&quot;,&#xd;
                &quot;text&quot;: &quot;Upper Range (SYSTOLIC)&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;text&quot;: &quot;ANF Main Statement&quot;,&#xd;
                        &quot;type&quot;: &quot;display&quot;,&#xd;
                        &quot;linkId&quot;: &quot;3079919224534_helpText&quot;,&#xd;
                        &quot;extension&quot;: [&#xd;
                            {&#xd;
                                &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl&quot;,&#xd;
                                &quot;valueCodeableConcept&quot;: {&#xd;
                                    &quot;text&quot;: &quot;Help-Button&quot;,&#xd;
                                    &quot;coding&quot;: [&#xd;
                                        {&#xd;
                                            &quot;code&quot;: &quot;help&quot;,&#xd;
                                            &quot;display&quot;: &quot;Help-Button&quot;,&#xd;
                                            &quot;system&quot;: &quot;http://hl7.org/fhir/questionnaire-item-control&quot;&#xd;
                                        }&#xd;
                                    ]&#xd;
                                }&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;${{system.util.epoc(\\&quot;${{application.statement.documented.start.time}}\&quot;)}}&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;Seconds | ${{upperbound - lowerbound}}&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;1 second&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;${{system.util.epoc(\\&quot;${{application.statement.documented.end.time}}\&quot;)}}&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    },&#xd;
                                    &quot;subjectOfRecord&quot;: {&#xd;
                                        &quot;id&quot;: &quot;&quot;,&#xd;
                                        &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                        &quot;code&quot;: &quot;&quot;&#xd;
                                    },&#xd;
                                    &quot;authors&quot;: [&#xd;
                                        {&#xd;
                                            &quot;id&quot;: &quot;&quot;,&#xd;
                                            &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                            &quot;code&quot;: &quot;&quot;&#xd;
                                        },&#xd;
                                        {&#xd;
                                            &quot;id&quot;: &quot;&quot;,&#xd;
                                            &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                            &quot;code&quot;: &quot;&quot;&#xd;
                                        }&#xd;
                                    ],&#xd;
                                    &quot;subjectOfInformation&quot;: &quot;${{participant.id}}&quot;,&#xd;
                                    &quot;topic&quot;: &quot;OBSERVATION_PROCEDURE&quot;,&#xd;
                                    &quot;type&quot;: &quot;PERFORMANCE&quot;,&#xd;
                                    &quot;circumstanceChoice&quot;: {&#xd;
                                        &quot;status&quot;: &quot;{\&quot;expressionType\&quot;:\&quot;simple\&quot;,\&quot;expressionLanguage\&quot;:\&quot;local\&quot;,\&quot;expressionValue\&quot;:\&quot;performed\&quot;,\&quot;expressionDescription\&quot;:\&quot;Measurement action has been performed.\&quot;}&quot;,&#xd;
                                        &quot;healthRisk&quot;: &quot; ${{rules.engine.calculated[circumstanceChoice.result]}}&quot;,&#xd;
                                        &quot;circumstanceType&quot;: &quot;PERFORMANCE_CIRCUMSTANCE&quot;,&#xd;
                                        &quot;result&quot;: {&#xd;
                                            &quot;lowerBound&quot;: &quot;90&quot;,&#xd;
                                            &quot;includeLowerBound&quot;: false,&#xd;
                                            &quot;semantic&quot;: &quot;&quot;,&#xd;
                                            &quot;resolution&quot;: &quot;{{REPLACE_3079919224534}}&quot;,&#xd;
                                            &quot;upperBound&quot;: &quot;120&quot;,&#xd;
                                            &quot;includeUpperBound&quot;: false&#xd;
                                        },&#xd;
                                        &quot;normalRange&quot;: {&#xd;
                                            &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                            &quot;includeLowerBound&quot;: false,&#xd;
                                            &quot;semantic&quot;: &quot;&quot;,&#xd;
                                            &quot;resolution&quot;: &quot;&quot;,&#xd;
                                            &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                            &quot;includeUpperBound&quot;: false&#xd;
                                        },&#xd;
                                        &quot;circumstance&quot;: {&#xd;
                                            &quot;id&quot;: &quot;&quot;,&#xd;
                                            &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                            &quot;code&quot;: &quot;&quot;&#xd;
                                        },&#xd;
                                        &quot;timing&quot;: {&#xd;
                                            &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                            &quot;includeLowerBound&quot;: false,&#xd;
                                            &quot;semantic&quot;: &quot;&quot;,&#xd;
                                            &quot;resolution&quot;: &quot;&quot;,&#xd;
                                            &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                            &quot;includeUpperBound&quot;: false&#xd;
                                        },&#xd;
                                        &quot;participant&quot;: {&#xd;
                                            &quot;id&quot;: &quot;&quot;,&#xd;
                                            &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                            &quot;code&quot;: &quot;&quot;&#xd;
                                        }&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfStatementType&quot;: &quot;ANF_STATEMENT_TYPE_MAIN&quot;,&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;type&quot;: &quot;boolean&quot;,&#xd;
                &quot;linkId&quot;: &quot;7048556169730&quot;,&#xd;
                &quot;text&quot;: &quot;Measurement taken using cuff&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;initial&quot;: [&#xd;
                    {&#xd;
                        &quot;valueBoolean&quot;: true&#xd;
                    }&#xd;
                ],&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;type&quot;: &quot;choice&quot;,&#xd;
                &quot;extension&quot;: [&#xd;
                    {&#xd;
                        &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl&quot;,&#xd;
                        &quot;valueCodeableConcept&quot;: {&#xd;
                            &quot;coding&quot;: [&#xd;
                                {&#xd;
                                    &quot;system&quot;: &quot;http://hl7.org/fhir/questionnaire-item-control&quot;,&#xd;
                                    &quot;code&quot;: &quot;drop-down&quot;,&#xd;
                                    &quot;display&quot;: &quot;Drop down&quot;&#xd;
                                }&#xd;
                            ]&#xd;
                        }&#xd;
                    }&#xd;
                ],&#xd;
                &quot;linkId&quot;: &quot;8501933950742&quot;,&#xd;
                &quot;text&quot;: &quot;Cuff Size&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;answerOption&quot;: [&#xd;
                    {&#xd;
                        &quot;valueCoding&quot;: {&#xd;
                            &quot;display&quot;: &quot;Adult&quot;&#xd;
                        },&#xd;
                        &quot;initialSelected&quot;: true&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;valueCoding&quot;: {&#xd;
                            &quot;display&quot;: &quot;Pediatric&quot;&#xd;
                        }&#xd;
                    }&#xd;
                ],&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;type&quot;: &quot;choice&quot;,&#xd;
                &quot;extension&quot;: [&#xd;
                    {&#xd;
                        &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl&quot;,&#xd;
                        &quot;valueCodeableConcept&quot;: {&#xd;
                            &quot;coding&quot;: [&#xd;
                                {&#xd;
                                    &quot;system&quot;: &quot;http://hl7.org/fhir/questionnaire-item-control&quot;,&#xd;
                                    &quot;code&quot;: &quot;drop-down&quot;,&#xd;
                                    &quot;display&quot;: &quot;Drop down&quot;&#xd;
                                }&#xd;
                            ]&#xd;
                        }&#xd;
                    }&#xd;
                ],&#xd;
                &quot;linkId&quot;: &quot;1451784149570&quot;,&#xd;
                &quot;text&quot;: &quot;Arm Used&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;answerOption&quot;: [&#xd;
                    {&#xd;
                        &quot;valueCoding&quot;: {&#xd;
                            &quot;display&quot;: &quot;Right&quot;&#xd;
                        },&#xd;
                        &quot;initialSelected&quot;: true&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;valueCoding&quot;: {&#xd;
                            &quot;display&quot;: &quot;Left&quot;&#xd;
                        }&#xd;
                    }&#xd;
                ],&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;type&quot;: &quot;boolean&quot;,&#xd;
                &quot;linkId&quot;: &quot;4051866307723&quot;,&#xd;
                &quot;text&quot;: &quot;Please confirm you have not urinated more than 30 minutes prior to taking the measurement.&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;initial&quot;: [&#xd;
                    {&#xd;
                        &quot;valueBoolean&quot;: true&#xd;
                    }&#xd;
                ],&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;type&quot;: &quot;boolean&quot;,&#xd;
                &quot;linkId&quot;: &quot;2602220218173&quot;,&#xd;
                &quot;text&quot;: &quot;Please confirm you have been in sitting position before taking the measurement for at least 5 minutes.&quot;,&#xd;
                &quot;required&quot;: false,&#xd;
                &quot;repeats&quot;: false,&#xd;
                &quot;readOnly&quot;: false,&#xd;
                &quot;initial&quot;: [&#xd;
                    {&#xd;
                        &quot;valueBoolean&quot;: true&#xd;
                    }&#xd;
                ],&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;anfStatementConnector&quot;: [&#xd;
                            {&#xd;
                                &quot;anfStatement&quot;: {&#xd;
                                    &quot;time&quot;: {&#xd;
                                        &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeLowerBound&quot;: false,&#xd;
                                        &quot;semantic&quot;: &quot;&quot;,&#xd;
                                        &quot;resolution&quot;: &quot;&quot;,&#xd;
                                        &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                        &quot;includeUpperBound&quot;: false&#xd;
                                    }&#xd;
                                },&#xd;
                                &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;&#xd;
                            }&#xd;
                        ]&#xd;
                    }&#xd;
                ]&#xd;
            }&#xd;
        ],&#xd;
        &quot;ruleId&quot;: &quot;${rulesetId_r}&quot;,&#xd;
        &quot;ruleQuestionId&quot;: [&#xd;
            &quot;3079919224534&quot;&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/questionnaire/questionnaire</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/questionnaire [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/questionnaire/questionnaire/${questionnaireId}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/user/questionnaire [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
    &quot;userQuestionnaireData&quot;: {&#xd;
        &quot;patientId&quot;: &quot;${patient_id_r}&quot;,&#xd;
        &quot;questionnaireData&quot;: [&#xd;
            {&#xd;
                &quot;id&quot;: &quot;${questionnaireId}&quot;,&#xd;
                &quot;resourceType&quot;: &quot;Questionnaire&quot;,&#xd;
                &quot;title&quot;: &quot;BP-POC&quot;,&#xd;
                &quot;status&quot;: &quot;active&quot;,&#xd;
                &quot;description&quot;: &quot;&quot;,&#xd;
                &quot;item&quot;: [&#xd;
                    {&#xd;
                        &quot;type&quot;: &quot;integer&quot;,&#xd;
                        &quot;linkId&quot;: &quot;3079919224534&quot;,&#xd;
                        &quot;text&quot;: &quot;Upper Range (SYSTOLIC)&quot;,&#xd;
                        &quot;enableWhen&quot;: [],&#xd;
                        &quot;required&quot;: false,&#xd;
                        &quot;repeats&quot;: false,&#xd;
                        &quot;readOnly&quot;: false,&#xd;
                        &quot;code&quot;: [],&#xd;
                        &quot;item&quot;: [&#xd;
                            {&#xd;
                                &quot;type&quot;: &quot;display&quot;,&#xd;
                                &quot;linkId&quot;: &quot;3079919224534_helpText&quot;,&#xd;
                                &quot;text&quot;: &quot;ANF Main Statement&quot;,&#xd;
                                &quot;enableWhen&quot;: [],&#xd;
                                &quot;code&quot;: [],&#xd;
                                &quot;item&quot;: [],&#xd;
                                &quot;extension&quot;: [&#xd;
                                    {&#xd;
                                        &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl&quot;,&#xd;
                                        &quot;valueCodeableConcept&quot;: {&#xd;
                                            &quot;text&quot;: &quot;Help-Button&quot;,&#xd;
                                            &quot;coding&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;system&quot;: &quot;http://hl7.org/fhir/questionnaire-item-control&quot;,&#xd;
                                                    &quot;code&quot;: &quot;help&quot;,&#xd;
                                                    &quot;display&quot;: &quot;Help-Button&quot;&#xd;
                                                }&#xd;
                                            ]&#xd;
                                        }&#xd;
                                    }&#xd;
                                ],&#xd;
                                &quot;answerOption&quot;: [],&#xd;
                                &quot;initial&quot;: [],&#xd;
                                &quot;anfStatementConnector&quot;: [&#xd;
                                    {&#xd;
                                        &quot;anfStatement&quot;: {&#xd;
                                            &quot;time&quot;: {&#xd;
                                                &quot;upperBound&quot;: &quot;${{system.util.epoc(\\&quot;${{application.statement.documented.end.time}}\&quot;)}}&quot;,&#xd;
                                                &quot;lowerBound&quot;: &quot;${{system.util.epoc(\\&quot;${{application.statement.documented.start.time}}\&quot;)}}&quot;,&#xd;
                                                &quot;includeUpperBound&quot;: false,&#xd;
                                                &quot;includeLowerBound&quot;: false,&#xd;
                                                &quot;semantic&quot;: &quot;Seconds | ${{upperbound - lowerbound}}&quot;,&#xd;
                                                &quot;resolution&quot;: &quot;1 second&quot;&#xd;
                                            },&#xd;
                                            &quot;subjectOfRecord&quot;: {&#xd;
                                                &quot;id&quot;: &quot;&quot;,&#xd;
                                                &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                                &quot;code&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;authors&quot;: [&#xd;
                                                {&#xd;
                                                    &quot;id&quot;: &quot;&quot;,&#xd;
                                                    &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                                    &quot;code&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                {&#xd;
                                                    &quot;id&quot;: &quot;&quot;,&#xd;
                                                    &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                                    &quot;code&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            ],&#xd;
                                            &quot;subjectOfInformation&quot;: &quot;${{participant.id}}&quot;,&#xd;
                                            &quot;associatedStatement&quot;: [],&#xd;
                                            &quot;topic&quot;: &quot;OBSERVATION_PROCEDURE&quot;,&#xd;
                                            &quot;type&quot;: &quot;PERFORMANCE&quot;,&#xd;
                                            &quot;circumstanceChoice&quot;: {&#xd;
                                                &quot;circumstanceType&quot;: &quot;PERFORMANCE_CIRCUMSTANCE&quot;,&#xd;
                                                &quot;status&quot;: &quot;{\&quot;expressionType\&quot;:\&quot;simple\&quot;,\&quot;expressionLanguage\&quot;:\&quot;local\&quot;,\&quot;expressionValue\&quot;:\&quot;performed\&quot;,\&quot;expressionDescription\&quot;:\&quot;Measurement action has been performed.\&quot;}&quot;,&#xd;
                                                &quot;result&quot;: {&#xd;
                                                    &quot;upperBound&quot;: &quot;120&quot;,&#xd;
                                                    &quot;lowerBound&quot;: &quot;90&quot;,&#xd;
                                                    &quot;includeUpperBound&quot;: false,&#xd;
                                                    &quot;includeLowerBound&quot;: false,&#xd;
                                                    &quot;semantic&quot;: &quot;&quot;,&#xd;
                                                    &quot;resolution&quot;: &quot;87&quot;&#xd;
                                                },&#xd;
                                                &quot;healthRisk&quot;: &quot; ${{rules.engine.calculated[circumstanceChoice.result]}}&quot;,&#xd;
                                                &quot;normalRange&quot;: {&#xd;
                                                    &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                                    &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                                    &quot;includeUpperBound&quot;: false,&#xd;
                                                    &quot;includeLowerBound&quot;: false,&#xd;
                                                    &quot;semantic&quot;: &quot;&quot;,&#xd;
                                                    &quot;resolution&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                &quot;circumstance&quot;: {&#xd;
                                                    &quot;id&quot;: &quot;&quot;,&#xd;
                                                    &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                                    &quot;code&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                &quot;timing&quot;: {&#xd;
                                                    &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                                    &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                                    &quot;includeUpperBound&quot;: false,&#xd;
                                                    &quot;includeLowerBound&quot;: false,&#xd;
                                                    &quot;semantic&quot;: &quot;&quot;,&#xd;
                                                    &quot;resolution&quot;: &quot;&quot;&#xd;
                                                },&#xd;
                                                &quot;participant&quot;: {&#xd;
                                                    &quot;id&quot;: &quot;&quot;,&#xd;
                                                    &quot;practitionerValue&quot;: &quot;&quot;,&#xd;
                                                    &quot;code&quot;: &quot;&quot;&#xd;
                                                }&#xd;
                                            },&#xd;
                                            &quot;status&quot;: &quot;STATUS_UNSPECIFIED&quot;&#xd;
                                        },&#xd;
                                        &quot;anfStatementType&quot;: &quot;ANF_STATEMENT_TYPE_MAIN&quot;,&#xd;
                                        &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_EQUAL&quot;,&#xd;
                                        &quot;operatorValue&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;extension&quot;: [&#xd;
                            {&#xd;
                                &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-unit&quot;,&#xd;
                                &quot;valueCoding&quot;: {&#xd;
                                    &quot;code&quot;: &quot;millimeter of mercury&quot;,&#xd;
                                    &quot;display&quot;: &quot;millimeter of mercury&quot;&#xd;
                                }&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;answerOption&quot;: [],&#xd;
                        &quot;initial&quot;: [],&#xd;
                        &quot;anfStatementConnector&quot;: [],&#xd;
                        &quot;answerInteger&quot;: &quot;87&quot;&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;type&quot;: &quot;boolean&quot;,&#xd;
                        &quot;linkId&quot;: &quot;7048556169730&quot;,&#xd;
                        &quot;text&quot;: &quot;Measurement taken using cuff&quot;,&#xd;
                        &quot;enableWhen&quot;: [],&#xd;
                        &quot;required&quot;: false,&#xd;
                        &quot;repeats&quot;: false,&#xd;
                        &quot;readOnly&quot;: false,&#xd;
                        &quot;code&quot;: [],&#xd;
                        &quot;item&quot;: [&#xd;
                            {&#xd;
                                &quot;enableWhen&quot;: [],&#xd;
                                &quot;code&quot;: [],&#xd;
                                &quot;item&quot;: [],&#xd;
                                &quot;extension&quot;: [],&#xd;
                                &quot;answerOption&quot;: [],&#xd;
                                &quot;initial&quot;: [],&#xd;
                                &quot;anfStatementConnector&quot;: [&#xd;
                                    {&#xd;
                                        &quot;anfStatement&quot;: {&#xd;
                                            &quot;time&quot;: {&#xd;
                                                &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                                &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                                &quot;includeUpperBound&quot;: false,&#xd;
                                                &quot;includeLowerBound&quot;: false,&#xd;
                                                &quot;semantic&quot;: &quot;&quot;,&#xd;
                                                &quot;resolution&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;authors&quot;: [],&#xd;
                                            &quot;subjectOfInformation&quot;: &quot;&quot;,&#xd;
                                            &quot;associatedStatement&quot;: [],&#xd;
                                            &quot;topic&quot;: &quot;&quot;,&#xd;
                                            &quot;type&quot;: &quot;&quot;,&#xd;
                                            &quot;status&quot;: &quot;STATUS_UNSPECIFIED&quot;&#xd;
                                        },&#xd;
                                        &quot;anfStatementType&quot;: &quot;ANF_STATEMENT_TYPE_UNSPECIFIED&quot;,&#xd;
                                        &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;,&#xd;
                                        &quot;operatorValue&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;extension&quot;: [],&#xd;
                        &quot;answerOption&quot;: [],&#xd;
                        &quot;initial&quot;: [&#xd;
                            {&#xd;
                                &quot;valueBoolean&quot;: true&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;anfStatementConnector&quot;: [],&#xd;
                        &quot;answerBoolean&quot;: true&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;type&quot;: &quot;choice&quot;,&#xd;
                        &quot;linkId&quot;: &quot;8501933950742&quot;,&#xd;
                        &quot;text&quot;: &quot;Cuff Size&quot;,&#xd;
                        &quot;enableWhen&quot;: [],&#xd;
                        &quot;required&quot;: false,&#xd;
                        &quot;repeats&quot;: false,&#xd;
                        &quot;readOnly&quot;: false,&#xd;
                        &quot;code&quot;: [],&#xd;
                        &quot;item&quot;: [&#xd;
                            {&#xd;
                                &quot;enableWhen&quot;: [],&#xd;
                                &quot;code&quot;: [],&#xd;
                                &quot;item&quot;: [],&#xd;
                                &quot;extension&quot;: [],&#xd;
                                &quot;answerOption&quot;: [],&#xd;
                                &quot;initial&quot;: [],&#xd;
                                &quot;anfStatementConnector&quot;: [&#xd;
                                    {&#xd;
                                        &quot;anfStatement&quot;: {&#xd;
                                            &quot;time&quot;: {&#xd;
                                                &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                                &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                                &quot;includeUpperBound&quot;: false,&#xd;
                                                &quot;includeLowerBound&quot;: false,&#xd;
                                                &quot;semantic&quot;: &quot;&quot;,&#xd;
                                                &quot;resolution&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;authors&quot;: [],&#xd;
                                            &quot;subjectOfInformation&quot;: &quot;&quot;,&#xd;
                                            &quot;associatedStatement&quot;: [],&#xd;
                                            &quot;topic&quot;: &quot;&quot;,&#xd;
                                            &quot;type&quot;: &quot;&quot;,&#xd;
                                            &quot;status&quot;: &quot;STATUS_UNSPECIFIED&quot;&#xd;
                                        },&#xd;
                                        &quot;anfStatementType&quot;: &quot;ANF_STATEMENT_TYPE_UNSPECIFIED&quot;,&#xd;
                                        &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;,&#xd;
                                        &quot;operatorValue&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;extension&quot;: [&#xd;
                            {&#xd;
                                &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl&quot;,&#xd;
                                &quot;valueCodeableConcept&quot;: {&#xd;
                                    &quot;coding&quot;: [&#xd;
                                        {&#xd;
                                            &quot;system&quot;: &quot;http://hl7.org/fhir/questionnaire-item-control&quot;,&#xd;
                                            &quot;code&quot;: &quot;drop-down&quot;,&#xd;
                                            &quot;display&quot;: &quot;Drop down&quot;&#xd;
                                        }&#xd;
                                    ]&#xd;
                                }&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;answerOption&quot;: [&#xd;
                            {&#xd;
                                &quot;valueCoding&quot;: {&#xd;
                                    &quot;display&quot;: &quot;Adult&quot;&#xd;
                                },&#xd;
                                &quot;initialSelected&quot;: true,&#xd;
                                &quot;extension&quot;: []&#xd;
                            },&#xd;
                            {&#xd;
                                &quot;valueCoding&quot;: {&#xd;
                                    &quot;display&quot;: &quot;Pediatric&quot;&#xd;
                                },&#xd;
                                &quot;extension&quot;: []&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;initial&quot;: [],&#xd;
                        &quot;anfStatementConnector&quot;: [],&#xd;
                        &quot;answerString&quot;: &quot;Adult&quot;&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;type&quot;: &quot;choice&quot;,&#xd;
                        &quot;linkId&quot;: &quot;1451784149570&quot;,&#xd;
                        &quot;text&quot;: &quot;Arm Used&quot;,&#xd;
                        &quot;enableWhen&quot;: [],&#xd;
                        &quot;required&quot;: false,&#xd;
                        &quot;repeats&quot;: false,&#xd;
                        &quot;readOnly&quot;: false,&#xd;
                        &quot;code&quot;: [],&#xd;
                        &quot;item&quot;: [&#xd;
                            {&#xd;
                                &quot;enableWhen&quot;: [],&#xd;
                                &quot;code&quot;: [],&#xd;
                                &quot;item&quot;: [],&#xd;
                                &quot;extension&quot;: [],&#xd;
                                &quot;answerOption&quot;: [],&#xd;
                                &quot;initial&quot;: [],&#xd;
                                &quot;anfStatementConnector&quot;: [&#xd;
                                    {&#xd;
                                        &quot;anfStatement&quot;: {&#xd;
                                            &quot;time&quot;: {&#xd;
                                                &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                                &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                                &quot;includeUpperBound&quot;: false,&#xd;
                                                &quot;includeLowerBound&quot;: false,&#xd;
                                                &quot;semantic&quot;: &quot;&quot;,&#xd;
                                                &quot;resolution&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;authors&quot;: [],&#xd;
                                            &quot;subjectOfInformation&quot;: &quot;&quot;,&#xd;
                                            &quot;associatedStatement&quot;: [],&#xd;
                                            &quot;topic&quot;: &quot;&quot;,&#xd;
                                            &quot;type&quot;: &quot;&quot;,&#xd;
                                            &quot;status&quot;: &quot;STATUS_UNSPECIFIED&quot;&#xd;
                                        },&#xd;
                                        &quot;anfStatementType&quot;: &quot;ANF_STATEMENT_TYPE_UNSPECIFIED&quot;,&#xd;
                                        &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;,&#xd;
                                        &quot;operatorValue&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;extension&quot;: [&#xd;
                            {&#xd;
                                &quot;url&quot;: &quot;http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl&quot;,&#xd;
                                &quot;valueCodeableConcept&quot;: {&#xd;
                                    &quot;coding&quot;: [&#xd;
                                        {&#xd;
                                            &quot;system&quot;: &quot;http://hl7.org/fhir/questionnaire-item-control&quot;,&#xd;
                                            &quot;code&quot;: &quot;drop-down&quot;,&#xd;
                                            &quot;display&quot;: &quot;Drop down&quot;&#xd;
                                        }&#xd;
                                    ]&#xd;
                                }&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;answerOption&quot;: [&#xd;
                            {&#xd;
                                &quot;valueCoding&quot;: {&#xd;
                                    &quot;display&quot;: &quot;Right&quot;&#xd;
                                },&#xd;
                                &quot;initialSelected&quot;: true,&#xd;
                                &quot;extension&quot;: []&#xd;
                            },&#xd;
                            {&#xd;
                                &quot;valueCoding&quot;: {&#xd;
                                    &quot;display&quot;: &quot;Left&quot;&#xd;
                                },&#xd;
                                &quot;extension&quot;: []&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;initial&quot;: [],&#xd;
                        &quot;anfStatementConnector&quot;: [],&#xd;
                        &quot;answerString&quot;: &quot;Right&quot;&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;type&quot;: &quot;boolean&quot;,&#xd;
                        &quot;linkId&quot;: &quot;4051866307723&quot;,&#xd;
                        &quot;text&quot;: &quot;Please confirm you have not urinated more than 30 minutes prior to taking the measurement.&quot;,&#xd;
                        &quot;enableWhen&quot;: [],&#xd;
                        &quot;required&quot;: false,&#xd;
                        &quot;repeats&quot;: false,&#xd;
                        &quot;readOnly&quot;: false,&#xd;
                        &quot;code&quot;: [],&#xd;
                        &quot;item&quot;: [&#xd;
                            {&#xd;
                                &quot;enableWhen&quot;: [],&#xd;
                                &quot;code&quot;: [],&#xd;
                                &quot;item&quot;: [],&#xd;
                                &quot;extension&quot;: [],&#xd;
                                &quot;answerOption&quot;: [],&#xd;
                                &quot;initial&quot;: [],&#xd;
                                &quot;anfStatementConnector&quot;: [&#xd;
                                    {&#xd;
                                        &quot;anfStatement&quot;: {&#xd;
                                            &quot;time&quot;: {&#xd;
                                                &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                                &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                                &quot;includeUpperBound&quot;: false,&#xd;
                                                &quot;includeLowerBound&quot;: false,&#xd;
                                                &quot;semantic&quot;: &quot;&quot;,&#xd;
                                                &quot;resolution&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;authors&quot;: [],&#xd;
                                            &quot;subjectOfInformation&quot;: &quot;&quot;,&#xd;
                                            &quot;associatedStatement&quot;: [],&#xd;
                                            &quot;topic&quot;: &quot;&quot;,&#xd;
                                            &quot;type&quot;: &quot;&quot;,&#xd;
                                            &quot;status&quot;: &quot;STATUS_UNSPECIFIED&quot;&#xd;
                                        },&#xd;
                                        &quot;anfStatementType&quot;: &quot;ANF_STATEMENT_TYPE_UNSPECIFIED&quot;,&#xd;
                                        &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;,&#xd;
                                        &quot;operatorValue&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;extension&quot;: [],&#xd;
                        &quot;answerOption&quot;: [],&#xd;
                        &quot;initial&quot;: [&#xd;
                            {&#xd;
                                &quot;valueBoolean&quot;: true&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;anfStatementConnector&quot;: [],&#xd;
                        &quot;answerBoolean&quot;: true&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;type&quot;: &quot;boolean&quot;,&#xd;
                        &quot;linkId&quot;: &quot;2602220218173&quot;,&#xd;
                        &quot;text&quot;: &quot;Please confirm you have been in sitting position before taking the measurement for at least 5 minutes.&quot;,&#xd;
                        &quot;enableWhen&quot;: [],&#xd;
                        &quot;required&quot;: false,&#xd;
                        &quot;repeats&quot;: false,&#xd;
                        &quot;readOnly&quot;: false,&#xd;
                        &quot;code&quot;: [],&#xd;
                        &quot;item&quot;: [&#xd;
                            {&#xd;
                                &quot;enableWhen&quot;: [],&#xd;
                                &quot;code&quot;: [],&#xd;
                                &quot;item&quot;: [],&#xd;
                                &quot;extension&quot;: [],&#xd;
                                &quot;answerOption&quot;: [],&#xd;
                                &quot;initial&quot;: [],&#xd;
                                &quot;anfStatementConnector&quot;: [&#xd;
                                    {&#xd;
                                        &quot;anfStatement&quot;: {&#xd;
                                            &quot;time&quot;: {&#xd;
                                                &quot;upperBound&quot;: &quot;&quot;,&#xd;
                                                &quot;lowerBound&quot;: &quot;&quot;,&#xd;
                                                &quot;includeUpperBound&quot;: false,&#xd;
                                                &quot;includeLowerBound&quot;: false,&#xd;
                                                &quot;semantic&quot;: &quot;&quot;,&#xd;
                                                &quot;resolution&quot;: &quot;&quot;&#xd;
                                            },&#xd;
                                            &quot;authors&quot;: [],&#xd;
                                            &quot;subjectOfInformation&quot;: &quot;&quot;,&#xd;
                                            &quot;associatedStatement&quot;: [],&#xd;
                                            &quot;topic&quot;: &quot;&quot;,&#xd;
                                            &quot;type&quot;: &quot;&quot;,&#xd;
                                            &quot;status&quot;: &quot;STATUS_UNSPECIFIED&quot;&#xd;
                                        },&#xd;
                                        &quot;anfStatementType&quot;: &quot;ANF_STATEMENT_TYPE_UNSPECIFIED&quot;,&#xd;
                                        &quot;anfOperatorType&quot;: &quot;ANF_OPERATOR_TYPE_NOT_EQUAL&quot;,&#xd;
                                        &quot;operatorValue&quot;: &quot;&quot;&#xd;
                                    }&#xd;
                                ]&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;extension&quot;: [],&#xd;
                        &quot;answerOption&quot;: [],&#xd;
                        &quot;initial&quot;: [&#xd;
                            {&#xd;
                                &quot;valueBoolean&quot;: true&#xd;
                            }&#xd;
                        ],&#xd;
                        &quot;anfStatementConnector&quot;: [],&#xd;
                        &quot;answerBoolean&quot;: true&#xd;
                    }&#xd;
                ],&#xd;
                &quot;ruleId&quot;: &quot;${rulesetId_r}&quot;,&#xd;
                &quot;ruleQuestionId&quot;: [&#xd;
                    &quot;3079919224534&quot;&#xd;
                ]&#xd;
            }&#xd;
        ]&#xd;
    }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/questionnaire/user/questionnaire</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract User Questionnaire ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">userQuestionnaireId</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Classification" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/classify [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;userAnswer&quot; : {&#xd;
    &quot;patientId&quot; : &quot;${patient_id_r}&quot;,&#xd;
    &quot;connectedTestId&quot; : &quot;${connectedTestId}&quot;,&#xd;
    &quot;symptoms&quot; : [ {&#xd;
      &quot;name&quot; : &quot;Fever&quot;,&#xd;
      &quot;severity&quot; : &quot;HIGH&quot;,&#xd;
      &quot;onsetDate&quot; : &quot;2023-10-08T02:28:24Z&quot;,&#xd;
      &quot;duration&quot; : {&#xd;
        &quot;duration&quot; : 4,&#xd;
        &quot;type&quot; : &quot;DURATION_TYPE_DAYS&quot;&#xd;
      },&#xd;
      &quot;additionalDetails&quot; : &quot;Fever 101&quot;&#xd;
    } ],&#xd;
    &quot;mediaId&quot; : &quot;${mediaId}&quot;,&#xd;
    &quot;age&quot; : 25,&#xd;
    &quot;gender&quot; : &quot;GENDER_MALE&quot;,&#xd;
    &quot;medicalConditions&quot; : &quot;Medical Conditions&quot;,&#xd;
    &quot;pregnancyStatus&quot; : false,&#xd;
    &quot;languagePreference&quot; : &quot;english&quot;,&#xd;
    &quot;userLocation&quot; : {&#xd;
      &quot;latitude&quot; : 0.1,&#xd;
      &quot;longitude&quot; : 0.1&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/classification/classify</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
            <stringProp name="HTTPSampler.connect_timeout">1000</stringProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Logistics" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/order [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;order&quot;:{&#xd;
		&quot;patientId&quot;:&quot;${patient_id_r}&quot;,&#xd;
		&quot;shippingAddress&quot;:{&#xd;
			&quot;countryId&quot;:&quot;${countryId}&quot;,&#xd;
			&quot;addressPurpose&quot;:null,&#xd;
			&quot;address1&quot;:&quot;Hello&quot;,&#xd;
			&quot;address2&quot;:&quot;Hello&quot;,&#xd;
			&quot;address3&quot;:&quot;Hello&quot;,&#xd;
			&quot;city&quot;:&quot;Hello&quot;,&#xd;
			&quot;state&quot;:&quot;Hello&quot;,&#xd;
			&quot;postalCode&quot;:&quot;Hello&quot;&#xd;
		},&#xd;
		&quot;testCaseId&quot;:&quot;${testcaseId}&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/order</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract User ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">order_id_r</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.order.id</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/order [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/order/${order_id_r}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/order [PUT]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;order&quot;:{&#xd;
		&quot;id&quot;:&quot;${order_id_r}&quot;,&#xd;
		&quot;patientId&quot;:&quot;${patient_id_r}&quot;,&#xd;
		&quot;shippingAddress&quot;:{&#xd;
			&quot;countryId&quot;:&quot;${countryId}&quot;,&#xd;
			&quot;addressPurpose&quot;:null,&#xd;
			&quot;address1&quot;:&quot;Hello&quot;,&#xd;
			&quot;address2&quot;:&quot;Hello&quot;,&#xd;
			&quot;address3&quot;:&quot;Hello&quot;,&#xd;
			&quot;city&quot;:&quot;Hello&quot;,&#xd;
			&quot;state&quot;:&quot;KY&quot;,&#xd;
			&quot;postalCode&quot;:&quot;Hello&quot;&#xd;
		},&#xd;
		&quot;testCaseId&quot;:&quot;${testcaseId}&quot;&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/order</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/order [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;senderAddress&quot;:{&#xd;
		&quot;countryId&quot;:&quot;${countryId}&quot;,&#xd;
			&quot;addressPurpose&quot;:null,&#xd;
			&quot;address1&quot;:&quot;Hello&quot;,&#xd;
			&quot;address2&quot;:&quot;Hello&quot;,&#xd;
			&quot;address3&quot;:&quot;Hello&quot;,&#xd;
			&quot;city&quot;:&quot;Hello&quot;,&#xd;
			&quot;state&quot;:&quot;Hello&quot;,&#xd;
			&quot;postalCode&quot;:&quot;Hello&quot;&#xd;
	},&#xd;
	&quot;recipientAddress&quot;:{&#xd;
		&quot;countryId&quot;:&quot;${countryId}&quot;,&#xd;
			&quot;addressPurpose&quot;:null,&#xd;
			&quot;address1&quot;:&quot;Hello&quot;,&#xd;
			&quot;address2&quot;:&quot;Hello&quot;,&#xd;
			&quot;address3&quot;:&quot;Hello&quot;,&#xd;
			&quot;city&quot;:&quot;Hello&quot;,&#xd;
			&quot;state&quot;:&quot;Hello&quot;,&#xd;
			&quot;postalCode&quot;:&quot;Hello&quot;&#xd;
	},&#xd;
	&quot;packageDetails&quot;:{&#xd;
		&quot;id&quot;:&quot;${order_id_r}&quot;,&#xd;
		&quot;patientId&quot;:&quot;${patient_id_r}&quot;,&#xd;
		&quot;shippingAddress&quot;:{&#xd;
			&quot;countryId&quot;:&quot;${countryId}&quot;,&#xd;
			&quot;addressPurpose&quot;:null,&#xd;
			&quot;address1&quot;:&quot;Hello&quot;,&#xd;
			&quot;address2&quot;:&quot;Hello&quot;,&#xd;
			&quot;address3&quot;:&quot;Hello&quot;,&#xd;
			&quot;city&quot;:&quot;Hello&quot;,&#xd;
			&quot;state&quot;:&quot;Hello&quot;,&#xd;
			&quot;postalCode&quot;:&quot;Hello&quot;&#xd;
		},&#xd;
		&quot;testCaseId&quot;:&quot;${testcaseId}&quot;&#xd;
	},&#xd;
	&quot;requireSignature&quot;:true,&#xd;
	&quot;declaredValue&quot;:1.4&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/vendors</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Ship" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">ship_r</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.options.[0]</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/ship [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${ship_r}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/ship</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract User ID" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">tracking_number_r</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.trackingNumber</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">No_Default</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/shipping/deliveryTracking [POST]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;deliveryTracking&quot; : {&#xd;
  	&quot;trackingId&quot;:&quot;${tracking_number_r}&quot;,&#xd;
    &quot;orderId&quot; : &quot;${order_id_r}&quot;,&#xd;
    &quot;status&quot; : &quot;DELAYED&quot;,&#xd;
    &quot;startDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;endDatetime&quot; : &quot;2023-10-04T15:58:24Z&quot;,&#xd;
    &quot;currentLocation&quot; : &quot;Current Location&quot;,&#xd;
    &quot;recipient&quot; : &quot;6581e5157e001111d3736b50&quot;,&#xd;
    &quot;deliveryItems&quot; : [ &quot;6581e5157e001111d3736b51&quot; ],&#xd;
    &quot;assignedCourier&quot; : &quot;6581e5157e001111d3736b52&quot;&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/logistics/deliveryTracking</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Tinkar" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/tinkar [GET] (Appendicitis)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">appendecitis</stringProp>
                </elementProp>
                <elementProp name="maxResults" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">maxResults</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/tinkar</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/tinkar [GET] (chronic disease of respiratory system)" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="query" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">query</stringProp>
                  <stringProp name="Argument.value">chronic disease of respiratory system</stringProp>
                </elementProp>
                <elementProp name="maxResults" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">maxResults</stringProp>
                  <stringProp name="Argument.value">10</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/tinkar</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/tinkar/nid [GET]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="nid" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">true</boolProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  <stringProp name="Argument.name">nid</stringProp>
                  <stringProp name="Argument.value">-2144684618</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/tinkar/nid</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Media - Delete" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/media  [DELETE]]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.path">/media/${mediaId}</stringProp>
            <stringProp name="HTTPSampler.method">DELETE</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Communications - Messages" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/messages [POST]" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;patientId&quot;:&quot;${patient_id_r}&quot;,&#xd;
	&quot;pagination&quot;:{&#xd;
		&quot;pageNumber&quot;:0,&#xd;
		&quot;pageSize&quot;:100,&#xd;
		&quot;sortAscending&quot;:false&#xd;
	}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.path">/communications/messages</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">false</boolProp>
            <boolProp name="HTTPSampler.image_parser">false</boolProp>
            <boolProp name="HTTPSampler.concurrentDwn">false</boolProp>
            <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
            <boolProp name="HTTPSampler.md5">false</boolProp>
            <intProp name="HTTPSampler.ipSourceType">0</intProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <Summariser guiclass="SummariserGui" testclass="Summariser" testname="Generate Summary Results" enabled="true"/>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
