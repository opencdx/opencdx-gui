spring:
  banner:
    location: /banner.txt
  application:
    name: Gateway
  ssl:
    bundle:
      jks:
        web-server:
          key:
            alias: gateway
          keystore:
            location: file:/certs/opencdx-keystore.p12
            password: opencdx
            type: PKCS12
  cloud:
    gateway:
      httpclient:
        ssl:
          useInsecureTrustManager: true
        pool:
          max-connections: 1000
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      enabled: true
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: "*"
            allowedMethods: "*"
            allowedHeaders: "*"
      routes:
        - id: dashboard
          uri: http://dashboard:3005
          predicates:
            - Path=/dashboard/**
          filters:
            - RewritePath=/dashboard/(?<segment>.*), /$\{segment}
        - id: grpc-helloworld
          uri: https://helloworld:9090
          predicates:
            - Path=/cdx.opencdx.grpc.helloworld.Greeter/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-audit
          uri: https://audit:9090
          predicates:
            - Path=/cdx.opencdx.grpc.audit.AuditService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-protector
          uri: https://protector:9090
          predicates:
            - Path=/cdx.opencdx.grpc.protector.NeuralProtectorService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value            
        - id: grpc-predictor
          uri: https://predictor:9090
          predicates:
            - Path=/cdx.opencdx.grpc.predictor.NeuralPredictorService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value  
        - id: grpc-questionnaire
          uri: https://questionnaire:9090
          predicates:
            - Path=/cdx.opencdx.grpc.questionnaire.QuestionnaireService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value  
        - id: grpc-communications
          uri: https://communications:9090
          predicates:
            - Path=/cdx.opencdx.grpc.communication.CommunicationService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-health
          uri: https://health:9090
          predicates:
            - Path=/cdx.opencdx.grpc.connected.HealthcareService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-media
          uri: https://media:9090
          predicates:
            - Path=/cdx.opencdx.grpc.media.MediaService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-routine
          uri: https://routine:9090
          predicates:
            - Path=/cdx.opencdx.grpc.routine.RoutineSystemService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value            
        - id: grpc-iam
          uri: https://iam:9090
          predicates:
            - Path=/cdx.opencdx.grpc.iam.IamUserService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-logistics-country
          uri: https://logistics:9090
          predicates:
            - Path=/cdx.opencdx.grpc.inventory.CountryService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-logistics-device
          uri: https://logistics:9090
          predicates:
            - Path=/cdx.opencdx.grpc.inventory.DeviceService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-logistics-manufacturer
          uri: https://logistics:9090
          predicates:
            - Path=/cdx.opencdx.grpc.inventory.ManufacturerService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-logistics-testcase
          uri: https://logistics:9090
          predicates:
            - Path=/cdx.opencdx.grpc.inventory.TestCaseService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-logistics-vendor
          uri: https://logistics:9090
          predicates:
            - Path=/cdx.opencdx.grpc.inventory.VendorService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-health-profile
          uri: https://health:9090
          predicates:
            - Path=/cdx.opencdx.grpc.profile.UserProfileService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-iam-workspace
          uri: https://iam:9090
          predicates:
            - Path=/cdx.opencdx.grpc.organization.WorkspaceService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-iam-organization
          uri: https://iam:9090
          predicates:
            - Path=/cdx.opencdx.grpc.organization.OrganizationService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-anf
          uri: https://anf:9090
          predicates:
            - Path=/cdx.opencdx.grpc.anf.ANFService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-predictor
          uri: https://predictor:9090
          predicates:
            - Path=/cdx.opencdx.grpc.neural.predictor.NeuralPredictorService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-protector
          uri: https://protector:9090
          predicates:
            - Path=/cdx.opencdx.grpc.neural.protector.NeuralProtectorService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-routine
          uri: https://routine:9090
          predicates:
            - Path=/cdx.opencdx.grpc.routine.RoutineSystemService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-classification
          uri: https://classification:9090
          predicates:
            - Path=/cdx.opencdx.grpc.neural.classification.ClassificationService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-tinkar
          uri: https://tinkar:9090
          predicates:
            - Path=/cdx.opencdx.grpc.tinkar.TinkarQueryService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: admin-dashboard
          uri: https://dashboard:3005
          predicates:
            - Path=/dashboard/**
          filters:
            - RewritePath=/dashboard/?(?<segment>.*), /$\{segment}
        - id: grpc-order
          uri: https://logistics:9090
          predicates:
            - Path=/cdx.opencdx.grpc.shipping.OrderService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-logistics
          uri: https://logistics:9090
          predicates:
            - Path=/cdx.opencdx.grpc.shipping.ShippingService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
        - id: grpc-connected-lab
          uri: https://connected-lab:9090
          predicates:
            - Path=/cdx.opencdx.grpc.lab.connected.ConnectedLabService/**
          filters:
            - AddResponseHeader=X-Request-header, header-value
eureka:
  client:
    service-url:
      defaultZone: https://discovery:8761/eureka/
    registry-fetch-interval-seconds: 5
    tls:
      enabled: 'true'
      key-store: file:/certs/opencdx-keystore.p12
      key-store-type: PKCS12
      key-store-password: opencdx
      trust-store: file:/certs/opencdx-keystore.p12
      trust-store-type: PKCS12
      trust-store-password: opencdx
      key-password: opencdx
  instance:
    nonSecurePortEnabled: false
    securePortEnabled: true
    statusPageUrl: https://${spring.application.name}:${server.port}/info
    healthCheckUrl: https://${spring.application.name}:${server.port}/actuator/health
    homePageUrl: https://${spring.application.name}:${server.port}/

management:
  info:
    java:
      enabled: true
    env:
      enabled: true
    git:
      mode: full
  endpoint:
    gateway:
      enabled: true
    health:
      probes:
        enabled: true
      enabled: true
      show-details: always
  endpoints:
    web:
      exposure:
        include: "*"
  tracing:
    enabled: true
    sampling.probability: 1.0
    propagation:
      type: b3
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
  zipkin:
    tracing:
      endpoint: https://zipkin:9411/api/v2/spans
logging:
  level:
    health:
      safe: debug
  pattern:
    level: "${spring.application.name:} trace_id=%mdc{traceId} span_id=%mdc{spanId} trace_flags=%mdc{traceFlags} %p"
    file: "%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${spring.application.name:} trace_id=%mdc{traceId} span_id=%mdc{spanId} trace_flags=%mdc{traceFlags} %p) %clr(${PID}){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n%wEx"
  file:
    name: "/var/log/sample-boot-application.log"
server:
  port: 8080
  ssl:
    enabled: true
    bundle: web-server
    client-auth: none
  http2:
    enabled: true

opencdx:
  client:
    trustStore: /certs/opencdx-clients.pem